
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	98 92 00 20 6d b2 00 00 75 fc 00 00 41 b2 00 00     ... m...u...A...
    8010:	41 b2 00 00 41 b2 00 00 41 b2 00 00 41 b2 00 00     A...A...A...A...
	...
    802c:	a9 ab 00 00 41 b2 00 00 00 00 00 00 49 ab 00 00     ....A.......I...
    803c:	41 b2 00 00                                         A...

00008040 <_irq_vector_table>:
    8040:	2d ac 00 00 2d ac 00 00 2d ac 00 00 2d ac 00 00     -...-...-...-...
    8050:	2d ac 00 00 2d ac 00 00 2d ac 00 00 2d ac 00 00     -...-...-...-...
    8060:	2d ac 00 00 2d ac 00 00 2d ac 00 00 2d ac 00 00     -...-...-...-...
    8070:	2d ac 00 00 2d ac 00 00 2d ac 00 00 2d ac 00 00     -...-...-...-...
    8080:	2d ac 00 00 2d ac 00 00 2d ac 00 00 2d ac 00 00     -...-...-...-...
    8090:	2d ac 00 00 2d ac 00 00 2d ac 00 00 2d ac 00 00     -...-...-...-...
    80a0:	2d ac 00 00 2d ac 00 00 2d ac 00 00 2d ac 00 00     -...-...-...-...
    80b0:	2d ac 00 00 2d ac 00 00 2d ac 00 00 2d ac 00 00     -...-...-...-...
    80c0:	2d ac 00 00 2d ac 00 00 2d ac 00 00 2d ac 00 00     -...-...-...-...
    80d0:	2d ac 00 00 2d ac 00 00 2d ac 00 00 2d ac 00 00     -...-...-...-...
    80e0:	2d ac 00 00 2d ac 00 00 2d ac 00 00 2d ac 00 00     -...-...-...-...
    80f0:	2d ac 00 00 2d ac 00 00 2d ac 00 00 2d ac 00 00     -...-...-...-...
    8100:	2d ac 00 00 2d ac 00 00 2d ac 00 00 2d ac 00 00     -...-...-...-...
    8110:	2d ac 00 00 2d ac 00 00 2d ac 00 00 2d ac 00 00     -...-...-...-...
    8120:	2d ac 00 00 2d ac 00 00 2d ac 00 00 2d ac 00 00     -...-...-...-...
    8130:	2d ac 00 00 2d ac 00 00 2d ac 00 00 2d ac 00 00     -...-...-...-...
    8140:	2d ac 00 00 2d ac 00 00 2d ac 00 00 2d ac 00 00     -...-...-...-...
    8150:	2d ac 00 00                                         -...

Disassembly of section text:

00008154 <__aeabi_uldivmod>:
    8154:	b953      	cbnz	r3, 816c <__aeabi_uldivmod+0x18>
    8156:	b94a      	cbnz	r2, 816c <__aeabi_uldivmod+0x18>
    8158:	2900      	cmp	r1, #0
    815a:	bf08      	it	eq
    815c:	2800      	cmpeq	r0, #0
    815e:	bf1c      	itt	ne
    8160:	f04f 31ff 	movne.w	r1, #4294967295
    8164:	f04f 30ff 	movne.w	r0, #4294967295
    8168:	f000 b80c 	b.w	8184 <__aeabi_idiv0>
    816c:	f1ad 0c08 	sub.w	ip, sp, #8
    8170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8174:	f000 f808 	bl	8188 <__udivmoddi4>
    8178:	f8dd e004 	ldr.w	lr, [sp, #4]
    817c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8180:	b004      	add	sp, #16
    8182:	4770      	bx	lr

00008184 <__aeabi_idiv0>:
    8184:	4770      	bx	lr
    8186:	bf00      	nop

00008188 <__udivmoddi4>:
    8188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    818c:	4686      	mov	lr, r0
    818e:	468c      	mov	ip, r1
    8190:	4608      	mov	r0, r1
    8192:	9e08      	ldr	r6, [sp, #32]
    8194:	4615      	mov	r5, r2
    8196:	4674      	mov	r4, lr
    8198:	4619      	mov	r1, r3
    819a:	2b00      	cmp	r3, #0
    819c:	f040 80c1 	bne.w	8322 <__udivmoddi4+0x19a>
    81a0:	4285      	cmp	r5, r0
    81a2:	fab2 f282 	clz	r2, r2
    81a6:	d945      	bls.n	8234 <__udivmoddi4+0xac>
    81a8:	b14a      	cbz	r2, 81be <__udivmoddi4+0x36>
    81aa:	f1c2 0320 	rsb	r3, r2, #32
    81ae:	fa00 fc02 	lsl.w	ip, r0, r2
    81b2:	4095      	lsls	r5, r2
    81b4:	4094      	lsls	r4, r2
    81b6:	fa2e f303 	lsr.w	r3, lr, r3
    81ba:	ea43 0c0c 	orr.w	ip, r3, ip
    81be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    81c2:	b2a8      	uxth	r0, r5
    81c4:	0c23      	lsrs	r3, r4, #16
    81c6:	fbbc f8fe 	udiv	r8, ip, lr
    81ca:	fb0e cc18 	mls	ip, lr, r8, ip
    81ce:	fb08 f900 	mul.w	r9, r8, r0
    81d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    81d6:	4599      	cmp	r9, r3
    81d8:	d928      	bls.n	822c <__udivmoddi4+0xa4>
    81da:	18eb      	adds	r3, r5, r3
    81dc:	f108 37ff 	add.w	r7, r8, #4294967295
    81e0:	d204      	bcs.n	81ec <__udivmoddi4+0x64>
    81e2:	4599      	cmp	r9, r3
    81e4:	d902      	bls.n	81ec <__udivmoddi4+0x64>
    81e6:	f1a8 0702 	sub.w	r7, r8, #2
    81ea:	442b      	add	r3, r5
    81ec:	eba3 0309 	sub.w	r3, r3, r9
    81f0:	b2a4      	uxth	r4, r4
    81f2:	fbb3 fcfe 	udiv	ip, r3, lr
    81f6:	fb0e 331c 	mls	r3, lr, ip, r3
    81fa:	fb0c f000 	mul.w	r0, ip, r0
    81fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8202:	42a0      	cmp	r0, r4
    8204:	d914      	bls.n	8230 <__udivmoddi4+0xa8>
    8206:	192c      	adds	r4, r5, r4
    8208:	f10c 33ff 	add.w	r3, ip, #4294967295
    820c:	d204      	bcs.n	8218 <__udivmoddi4+0x90>
    820e:	42a0      	cmp	r0, r4
    8210:	d902      	bls.n	8218 <__udivmoddi4+0x90>
    8212:	f1ac 0302 	sub.w	r3, ip, #2
    8216:	442c      	add	r4, r5
    8218:	1a24      	subs	r4, r4, r0
    821a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    821e:	b11e      	cbz	r6, 8228 <__udivmoddi4+0xa0>
    8220:	40d4      	lsrs	r4, r2
    8222:	2300      	movs	r3, #0
    8224:	6034      	str	r4, [r6, #0]
    8226:	6073      	str	r3, [r6, #4]
    8228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    822c:	4647      	mov	r7, r8
    822e:	e7dd      	b.n	81ec <__udivmoddi4+0x64>
    8230:	4663      	mov	r3, ip
    8232:	e7f1      	b.n	8218 <__udivmoddi4+0x90>
    8234:	bb92      	cbnz	r2, 829c <__udivmoddi4+0x114>
    8236:	1b43      	subs	r3, r0, r5
    8238:	2101      	movs	r1, #1
    823a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    823e:	b2af      	uxth	r7, r5
    8240:	0c20      	lsrs	r0, r4, #16
    8242:	fbb3 fcfe 	udiv	ip, r3, lr
    8246:	fb0e 331c 	mls	r3, lr, ip, r3
    824a:	fb0c f807 	mul.w	r8, ip, r7
    824e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8252:	4598      	cmp	r8, r3
    8254:	d961      	bls.n	831a <__udivmoddi4+0x192>
    8256:	18eb      	adds	r3, r5, r3
    8258:	f10c 30ff 	add.w	r0, ip, #4294967295
    825c:	d204      	bcs.n	8268 <__udivmoddi4+0xe0>
    825e:	4598      	cmp	r8, r3
    8260:	d902      	bls.n	8268 <__udivmoddi4+0xe0>
    8262:	f1ac 0002 	sub.w	r0, ip, #2
    8266:	442b      	add	r3, r5
    8268:	eba3 0308 	sub.w	r3, r3, r8
    826c:	b2a4      	uxth	r4, r4
    826e:	fbb3 fcfe 	udiv	ip, r3, lr
    8272:	fb0e 331c 	mls	r3, lr, ip, r3
    8276:	fb0c f707 	mul.w	r7, ip, r7
    827a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    827e:	42a7      	cmp	r7, r4
    8280:	d94d      	bls.n	831e <__udivmoddi4+0x196>
    8282:	192c      	adds	r4, r5, r4
    8284:	f10c 33ff 	add.w	r3, ip, #4294967295
    8288:	d204      	bcs.n	8294 <__udivmoddi4+0x10c>
    828a:	42a7      	cmp	r7, r4
    828c:	d902      	bls.n	8294 <__udivmoddi4+0x10c>
    828e:	f1ac 0302 	sub.w	r3, ip, #2
    8292:	442c      	add	r4, r5
    8294:	1be4      	subs	r4, r4, r7
    8296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    829a:	e7c0      	b.n	821e <__udivmoddi4+0x96>
    829c:	f1c2 0320 	rsb	r3, r2, #32
    82a0:	4095      	lsls	r5, r2
    82a2:	4094      	lsls	r4, r2
    82a4:	fa20 f103 	lsr.w	r1, r0, r3
    82a8:	fa2e f303 	lsr.w	r3, lr, r3
    82ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    82b0:	4090      	lsls	r0, r2
    82b2:	b2af      	uxth	r7, r5
    82b4:	4303      	orrs	r3, r0
    82b6:	fbb1 fcfe 	udiv	ip, r1, lr
    82ba:	fb0e 101c 	mls	r0, lr, ip, r1
    82be:	0c19      	lsrs	r1, r3, #16
    82c0:	fb0c f807 	mul.w	r8, ip, r7
    82c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    82c8:	4588      	cmp	r8, r1
    82ca:	d922      	bls.n	8312 <__udivmoddi4+0x18a>
    82cc:	1869      	adds	r1, r5, r1
    82ce:	f10c 30ff 	add.w	r0, ip, #4294967295
    82d2:	d204      	bcs.n	82de <__udivmoddi4+0x156>
    82d4:	4588      	cmp	r8, r1
    82d6:	d902      	bls.n	82de <__udivmoddi4+0x156>
    82d8:	f1ac 0002 	sub.w	r0, ip, #2
    82dc:	4429      	add	r1, r5
    82de:	eba1 0108 	sub.w	r1, r1, r8
    82e2:	b29b      	uxth	r3, r3
    82e4:	fbb1 fcfe 	udiv	ip, r1, lr
    82e8:	fb0e 111c 	mls	r1, lr, ip, r1
    82ec:	fb0c f707 	mul.w	r7, ip, r7
    82f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    82f4:	429f      	cmp	r7, r3
    82f6:	d90e      	bls.n	8316 <__udivmoddi4+0x18e>
    82f8:	18eb      	adds	r3, r5, r3
    82fa:	f10c 31ff 	add.w	r1, ip, #4294967295
    82fe:	d204      	bcs.n	830a <__udivmoddi4+0x182>
    8300:	429f      	cmp	r7, r3
    8302:	d902      	bls.n	830a <__udivmoddi4+0x182>
    8304:	f1ac 0102 	sub.w	r1, ip, #2
    8308:	442b      	add	r3, r5
    830a:	1bdb      	subs	r3, r3, r7
    830c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8310:	e793      	b.n	823a <__udivmoddi4+0xb2>
    8312:	4660      	mov	r0, ip
    8314:	e7e3      	b.n	82de <__udivmoddi4+0x156>
    8316:	4661      	mov	r1, ip
    8318:	e7f7      	b.n	830a <__udivmoddi4+0x182>
    831a:	4660      	mov	r0, ip
    831c:	e7a4      	b.n	8268 <__udivmoddi4+0xe0>
    831e:	4663      	mov	r3, ip
    8320:	e7b8      	b.n	8294 <__udivmoddi4+0x10c>
    8322:	4283      	cmp	r3, r0
    8324:	d906      	bls.n	8334 <__udivmoddi4+0x1ac>
    8326:	b916      	cbnz	r6, 832e <__udivmoddi4+0x1a6>
    8328:	2100      	movs	r1, #0
    832a:	4608      	mov	r0, r1
    832c:	e77c      	b.n	8228 <__udivmoddi4+0xa0>
    832e:	e9c6 e000 	strd	lr, r0, [r6]
    8332:	e7f9      	b.n	8328 <__udivmoddi4+0x1a0>
    8334:	fab3 f783 	clz	r7, r3
    8338:	b98f      	cbnz	r7, 835e <__udivmoddi4+0x1d6>
    833a:	4283      	cmp	r3, r0
    833c:	d301      	bcc.n	8342 <__udivmoddi4+0x1ba>
    833e:	4572      	cmp	r2, lr
    8340:	d808      	bhi.n	8354 <__udivmoddi4+0x1cc>
    8342:	ebbe 0402 	subs.w	r4, lr, r2
    8346:	eb60 0303 	sbc.w	r3, r0, r3
    834a:	2001      	movs	r0, #1
    834c:	469c      	mov	ip, r3
    834e:	b91e      	cbnz	r6, 8358 <__udivmoddi4+0x1d0>
    8350:	2100      	movs	r1, #0
    8352:	e769      	b.n	8228 <__udivmoddi4+0xa0>
    8354:	4638      	mov	r0, r7
    8356:	e7fa      	b.n	834e <__udivmoddi4+0x1c6>
    8358:	e9c6 4c00 	strd	r4, ip, [r6]
    835c:	e7f8      	b.n	8350 <__udivmoddi4+0x1c8>
    835e:	f1c7 0c20 	rsb	ip, r7, #32
    8362:	40bb      	lsls	r3, r7
    8364:	fa0e f507 	lsl.w	r5, lr, r7
    8368:	fa22 f40c 	lsr.w	r4, r2, ip
    836c:	fa2e f10c 	lsr.w	r1, lr, ip
    8370:	40ba      	lsls	r2, r7
    8372:	431c      	orrs	r4, r3
    8374:	fa20 f30c 	lsr.w	r3, r0, ip
    8378:	40b8      	lsls	r0, r7
    837a:	ea4f 4914 	mov.w	r9, r4, lsr #16
    837e:	4301      	orrs	r1, r0
    8380:	fa1f fe84 	uxth.w	lr, r4
    8384:	fbb3 f8f9 	udiv	r8, r3, r9
    8388:	fb09 3018 	mls	r0, r9, r8, r3
    838c:	0c0b      	lsrs	r3, r1, #16
    838e:	fb08 fa0e 	mul.w	sl, r8, lr
    8392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8396:	459a      	cmp	sl, r3
    8398:	d940      	bls.n	841c <__udivmoddi4+0x294>
    839a:	18e3      	adds	r3, r4, r3
    839c:	f108 30ff 	add.w	r0, r8, #4294967295
    83a0:	d204      	bcs.n	83ac <__udivmoddi4+0x224>
    83a2:	459a      	cmp	sl, r3
    83a4:	d902      	bls.n	83ac <__udivmoddi4+0x224>
    83a6:	f1a8 0002 	sub.w	r0, r8, #2
    83aa:	4423      	add	r3, r4
    83ac:	eba3 030a 	sub.w	r3, r3, sl
    83b0:	b289      	uxth	r1, r1
    83b2:	fbb3 f8f9 	udiv	r8, r3, r9
    83b6:	fb09 3318 	mls	r3, r9, r8, r3
    83ba:	fb08 fe0e 	mul.w	lr, r8, lr
    83be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    83c2:	458e      	cmp	lr, r1
    83c4:	d92c      	bls.n	8420 <__udivmoddi4+0x298>
    83c6:	1861      	adds	r1, r4, r1
    83c8:	f108 33ff 	add.w	r3, r8, #4294967295
    83cc:	d204      	bcs.n	83d8 <__udivmoddi4+0x250>
    83ce:	458e      	cmp	lr, r1
    83d0:	d902      	bls.n	83d8 <__udivmoddi4+0x250>
    83d2:	f1a8 0302 	sub.w	r3, r8, #2
    83d6:	4421      	add	r1, r4
    83d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    83dc:	eba1 010e 	sub.w	r1, r1, lr
    83e0:	fba0 9802 	umull	r9, r8, r0, r2
    83e4:	4541      	cmp	r1, r8
    83e6:	46ce      	mov	lr, r9
    83e8:	4643      	mov	r3, r8
    83ea:	d302      	bcc.n	83f2 <__udivmoddi4+0x26a>
    83ec:	d106      	bne.n	83fc <__udivmoddi4+0x274>
    83ee:	454d      	cmp	r5, r9
    83f0:	d204      	bcs.n	83fc <__udivmoddi4+0x274>
    83f2:	3801      	subs	r0, #1
    83f4:	ebb9 0e02 	subs.w	lr, r9, r2
    83f8:	eb68 0304 	sbc.w	r3, r8, r4
    83fc:	2e00      	cmp	r6, #0
    83fe:	d0a7      	beq.n	8350 <__udivmoddi4+0x1c8>
    8400:	ebb5 020e 	subs.w	r2, r5, lr
    8404:	eb61 0103 	sbc.w	r1, r1, r3
    8408:	fa01 fc0c 	lsl.w	ip, r1, ip
    840c:	fa22 f307 	lsr.w	r3, r2, r7
    8410:	40f9      	lsrs	r1, r7
    8412:	ea4c 0303 	orr.w	r3, ip, r3
    8416:	e9c6 3100 	strd	r3, r1, [r6]
    841a:	e799      	b.n	8350 <__udivmoddi4+0x1c8>
    841c:	4640      	mov	r0, r8
    841e:	e7c5      	b.n	83ac <__udivmoddi4+0x224>
    8420:	4643      	mov	r3, r8
    8422:	e7d9      	b.n	83d8 <__udivmoddi4+0x250>

00008424 <main>:

LOG_MODULE_REGISTER(MODULE_NAME, LOG_LEVEL_DBG);


int main(void)
{
    8424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	size_t count = 0;
	uint32_t buffer = 0;
    8428:	2400      	movs	r4, #0
	const char* test_label[] = {"test_val_1", "test_val_2", "test_val_3"};

	LOG_DBG("Start NVS Test");
    842a:	2608      	movs	r6, #8
	const char* test_label[] = {"test_val_1", "test_val_2", "test_val_3"};
    842c:	4b45      	ldr	r3, [pc, #276]	; (8544 <main+0x120>)
{
    842e:	b08d      	sub	sp, #52	; 0x34
	const char* test_label[] = {"test_val_1", "test_val_2", "test_val_3"};
    8430:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
	LOG_DBG("Start NVS Test");
    8434:	4d44      	ldr	r5, [pc, #272]	; (8548 <main+0x124>)
    8436:	4b45      	ldr	r3, [pc, #276]	; (854c <main+0x128>)
	const char* test_label[] = {"test_val_1", "test_val_2", "test_val_3"};
    8438:	af09      	add	r7, sp, #36	; 0x24
    843a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	LOG_DBG("Start NVS Test");
    843e:	2204      	movs	r2, #4
    8440:	4620      	mov	r0, r4
    8442:	4943      	ldr	r1, [pc, #268]	; (8550 <main+0x12c>)
    8444:	9302      	str	r3, [sp, #8]
    8446:	e9cd 4600 	strd	r4, r6, [sp]
    844a:	4623      	mov	r3, r4
    844c:	9503      	str	r5, [sp, #12]
	uint32_t buffer = 0;
    844e:	9408      	str	r4, [sp, #32]
	LOG_DBG("Start NVS Test");
    8450:	f007 f834 	bl	f4bc <z_log_msg_runtime_create.constprop.0>
	LOG_DBG("KEYS: [%s], [%s], [%s]", test_label[0], test_label[1], test_label[2]);
    8454:	4b3f      	ldr	r3, [pc, #252]	; (8554 <main+0x130>)
    8456:	2204      	movs	r2, #4
    8458:	9306      	str	r3, [sp, #24]
    845a:	4b3f      	ldr	r3, [pc, #252]	; (8558 <main+0x134>)
    845c:	4620      	mov	r0, r4
    845e:	9305      	str	r3, [sp, #20]
    8460:	4b3e      	ldr	r3, [pc, #248]	; (855c <main+0x138>)
    8462:	493b      	ldr	r1, [pc, #236]	; (8550 <main+0x12c>)
    8464:	e9cd 5303 	strd	r5, r3, [sp, #12]
    8468:	4b3d      	ldr	r3, [pc, #244]	; (8560 <main+0x13c>)
    846a:	9400      	str	r4, [sp, #0]
    846c:	e9cd 6301 	strd	r6, r3, [sp, #4]
    8470:	4623      	mov	r3, r4
    8472:	f007 f823 	bl	f4bc <z_log_msg_runtime_create.constprop.0>

	ret = memory_manager_init();
    8476:	f000 f87d 	bl	8574 <memory_manager_init>
	if (ret) {
    847a:	b158      	cbz	r0, 8494 <main+0x70>
		LOG_DBG("Error Code: [%d]", ret);
    847c:	4b39      	ldr	r3, [pc, #228]	; (8564 <main+0x140>)
    847e:	e9cd 5003 	strd	r5, r0, [sp, #12]
    8482:	e9cd 6301 	strd	r6, r3, [sp, #4]
    8486:	2204      	movs	r2, #4
    8488:	4623      	mov	r3, r4
    848a:	4620      	mov	r0, r4
    848c:	4930      	ldr	r1, [pc, #192]	; (8550 <main+0x12c>)
    848e:	9400      	str	r4, [sp, #0]
    8490:	f007 f814 	bl	f4bc <z_log_msg_runtime_create.constprop.0>
{
    8494:	f04f 0b00 	mov.w	fp, #0
	}

	while(1) {

		k_msleep(1000);
		LOG_DBG("---------------------------------");
    8498:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8550 <main+0x12c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    849c:	2100      	movs	r1, #0
    849e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    84a2:	f006 fe2b 	bl	f0fc <z_impl_k_sleep>
    84a6:	4b30      	ldr	r3, [pc, #192]	; (8568 <main+0x144>)
    84a8:	2400      	movs	r4, #0
    84aa:	9302      	str	r3, [sp, #8]
    84ac:	2308      	movs	r3, #8
    84ae:	2204      	movs	r2, #4
    84b0:	e9cd 4300 	strd	r4, r3, [sp]
    84b4:	4641      	mov	r1, r8
    84b6:	4623      	mov	r3, r4
    84b8:	4620      	mov	r0, r4
    84ba:	9503      	str	r5, [sp, #12]
    84bc:	f006 fffe 	bl	f4bc <z_log_msg_runtime_create.constprop.0>
		for(size_t i = 0; i < g_num_items; i++) {
    84c0:	46ba      	mov	sl, r7
    84c2:	4b2a      	ldr	r3, [pc, #168]	; (856c <main+0x148>)
    84c4:	eb04 060b 	add.w	r6, r4, fp
    84c8:	681b      	ldr	r3, [r3, #0]
    84ca:	429c      	cmp	r4, r3
    84cc:	d301      	bcc.n	84d2 <main+0xae>
    84ce:	46b3      	mov	fp, r6
    84d0:	e7e4      	b.n	849c <main+0x78>
			
			ret = memory_load(test_label[i], (uint8_t *)&buffer, sizeof(buffer));
    84d2:	f85a 9b04 	ldr.w	r9, [sl], #4
    84d6:	2204      	movs	r2, #4
    84d8:	4648      	mov	r0, r9
    84da:	a908      	add	r1, sp, #32
    84dc:	f000 f8fc 	bl	86d8 <memory_load>
			if (ret) {
    84e0:	b160      	cbz	r0, 84fc <main+0xd8>
				LOG_DBG("Error Code: [%d]", ret);
    84e2:	4b20      	ldr	r3, [pc, #128]	; (8564 <main+0x140>)
    84e4:	2108      	movs	r1, #8
    84e6:	9302      	str	r3, [sp, #8]
    84e8:	2300      	movs	r3, #0
    84ea:	e9cd 5003 	strd	r5, r0, [sp, #12]
    84ee:	e9cd 3100 	strd	r3, r1, [sp]
    84f2:	2204      	movs	r2, #4
    84f4:	4641      	mov	r1, r8
    84f6:	4618      	mov	r0, r3
    84f8:	f006 ffe0 	bl	f4bc <z_log_msg_runtime_create.constprop.0>
			}
			buffer = i + count;
    84fc:	4426      	add	r6, r4
			ret = memory_save(test_label[i], (uint8_t *)&buffer, sizeof(buffer));
    84fe:	2204      	movs	r2, #4
    8500:	4648      	mov	r0, r9
    8502:	a908      	add	r1, sp, #32
			buffer = i + count;
    8504:	9608      	str	r6, [sp, #32]
			ret = memory_save(test_label[i], (uint8_t *)&buffer, sizeof(buffer));
    8506:	f000 f90f 	bl	8728 <memory_save>
			if (ret) {
    850a:	b160      	cbz	r0, 8526 <main+0x102>
				LOG_DBG("Error Code: [%d]", ret);
    850c:	4b15      	ldr	r3, [pc, #84]	; (8564 <main+0x140>)
    850e:	2208      	movs	r2, #8
    8510:	9302      	str	r3, [sp, #8]
    8512:	2300      	movs	r3, #0
    8514:	e9cd 5003 	strd	r5, r0, [sp, #12]
    8518:	e9cd 3200 	strd	r3, r2, [sp]
    851c:	4641      	mov	r1, r8
    851e:	2204      	movs	r2, #4
    8520:	4618      	mov	r0, r3
    8522:	f006 ffcb 	bl	f4bc <z_log_msg_runtime_create.constprop.0>
			}
			LOG_WRN("%s.value = %u", test_label[i], buffer);
    8526:	9b08      	ldr	r3, [sp, #32]
    8528:	2202      	movs	r2, #2
    852a:	e9cd 9303 	strd	r9, r3, [sp, #12]
    852e:	4b10      	ldr	r3, [pc, #64]	; (8570 <main+0x14c>)
    8530:	4641      	mov	r1, r8
    8532:	9302      	str	r3, [sp, #8]
    8534:	2300      	movs	r3, #0
    8536:	4618      	mov	r0, r3
    8538:	e9cd 3300 	strd	r3, r3, [sp]
    853c:	f006 ffbe 	bl	f4bc <z_log_msg_runtime_create.constprop.0>
		for(size_t i = 0; i < g_num_items; i++) {
    8540:	3401      	adds	r4, #1
    8542:	e7be      	b.n	84c2 <main+0x9e>
    8544:	00010a20 	.word	0x00010a20
    8548:	00010d3e 	.word	0x00010d3e
    854c:	00010ca6 	.word	0x00010ca6
    8550:	000109b4 	.word	0x000109b4
    8554:	00010cb9 	.word	0x00010cb9
    8558:	00010cc4 	.word	0x00010cc4
    855c:	00010ccf 	.word	0x00010ccf
    8560:	00010cda 	.word	0x00010cda
    8564:	00010cf5 	.word	0x00010cf5
    8568:	00010d0a 	.word	0x00010d0a
    856c:	20008000 	.word	0x20008000
    8570:	00010d30 	.word	0x00010d30

00008574 <memory_manager_init>:
 * @retval Flash related errors of device binding or flash get page info fails.
 * @retval NVS error if nvs_init fails.
 * 
 ***************************************************************/
int memory_manager_init(void) 
{
    8574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int err;
    struct flash_pages_info flash_info;

    // check if memory_manager is initialized alread
    if (m_is_initialized) {
    8578:	4e3c      	ldr	r6, [pc, #240]	; (866c <memory_manager_init+0xf8>)
{
    857a:	b08c      	sub	sp, #48	; 0x30
    if (m_is_initialized) {
    857c:	7837      	ldrb	r7, [r6, #0]
    857e:	2f00      	cmp	r7, #0
    8580:	d140      	bne.n	8604 <memory_manager_init+0x90>
        return 0;
    }

    // set up flash device
    m_fs.flash_device = NVS_PARTITION_DEVICE;
    8582:	4c3b      	ldr	r4, [pc, #236]	; (8670 <memory_manager_init+0xfc>)
    8584:	483b      	ldr	r0, [pc, #236]	; (8674 <memory_manager_init+0x100>)
    8586:	62a0      	str	r0, [r4, #40]	; 0x28
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    8588:	f007 ff06 	bl	10398 <z_device_is_ready>
    if (!device_is_ready(m_fs.flash_device)) {
    858c:	4603      	mov	r3, r0
    858e:	b970      	cbnz	r0, 85ae <memory_manager_init+0x3a>
        LOG_WRN("Flash Device %s Not Ready", m_fs.flash_device->name);
    8590:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    8592:	4939      	ldr	r1, [pc, #228]	; (8678 <memory_manager_init+0x104>)
    8594:	6812      	ldr	r2, [r2, #0]
    8596:	9000      	str	r0, [sp, #0]
    8598:	9203      	str	r2, [sp, #12]
    859a:	4a38      	ldr	r2, [pc, #224]	; (867c <memory_manager_init+0x108>)
    859c:	e9cd 0201 	strd	r0, r2, [sp, #4]
    85a0:	2202      	movs	r2, #2
    85a2:	f006 ff9b 	bl	f4dc <z_log_msg_runtime_create.constprop.0>
        return MEMORY_ERR_FLASH_NOT_READY;
    85a6:	2002      	movs	r0, #2
    }

    // memory_manager initialization complete
    m_is_initialized = true;
    return MEMORY_SUCCESS;
}
    85a8:	b00c      	add	sp, #48	; 0x30
    85aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_fs.offset = NVS_PARTITION_OFFSET;
    85ae:	f44f 2178 	mov.w	r1, #1015808	; 0xf8000
    err = flash_get_page_info_by_offs(m_fs.flash_device, m_fs.offset, &flash_info);
    85b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    m_fs.offset = NVS_PARTITION_OFFSET;
    85b4:	6021      	str	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    85b6:	aa09      	add	r2, sp, #36	; 0x24
    85b8:	f007 fd4f 	bl	1005a <z_impl_flash_get_page_info_by_offs>
    if (err) {
    85bc:	4605      	mov	r5, r0
    85be:	b158      	cbz	r0, 85d8 <memory_manager_init+0x64>
        LOG_WRN("Can't Get Flash Page Info");
    85c0:	4b2f      	ldr	r3, [pc, #188]	; (8680 <memory_manager_init+0x10c>)
    85c2:	4638      	mov	r0, r7
    85c4:	e9cd 7301 	strd	r7, r3, [sp, #4]
    85c8:	2202      	movs	r2, #2
    85ca:	463b      	mov	r3, r7
    85cc:	492a      	ldr	r1, [pc, #168]	; (8678 <memory_manager_init+0x104>)
    85ce:	9700      	str	r7, [sp, #0]
    85d0:	f006 ff84 	bl	f4dc <z_log_msg_runtime_create.constprop.0>
        return MEMORY_ERR_FLASH_PAGE;
    85d4:	2003      	movs	r0, #3
    85d6:	e7e7      	b.n	85a8 <memory_manager_init+0x34>
    m_fs.sector_count = 2U;
    85d8:	2702      	movs	r7, #2
    m_fs.sector_size = flash_info.size;
    85da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    err = nvs_mount(&m_fs);
    85dc:	4620      	mov	r0, r4
    m_fs.sector_size = flash_info.size;
    85de:	81a3      	strh	r3, [r4, #12]
    m_fs.sector_count = 2U;
    85e0:	81e7      	strh	r7, [r4, #14]
    err = nvs_mount(&m_fs);
    85e2:	f001 fa31 	bl	9a48 <nvs_mount>
    if (err) {
    85e6:	4604      	mov	r4, r0
    85e8:	b970      	cbnz	r0, 8608 <memory_manager_init+0x94>
    85ea:	4f26      	ldr	r7, [pc, #152]	; (8684 <memory_manager_init+0x110>)
    for (size_t i=0; i < g_num_items; i++) {
    85ec:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8688 <memory_manager_init+0x114>
        LOG_DBG("m_items[%u] : {key = %s, id = %u, value = %u}", i, m_items[i].key, m_items[i].id, m_items[i].value);
    85f0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 868c <memory_manager_init+0x118>
    85f4:	f8df a098 	ldr.w	sl, [pc, #152]	; 8690 <memory_manager_init+0x11c>
    for (size_t i=0; i < g_num_items; i++) {
    85f8:	f8d8 3000 	ldr.w	r3, [r8]
    85fc:	429c      	cmp	r4, r3
    85fe:	d30f      	bcc.n	8620 <memory_manager_init+0xac>
    m_is_initialized = true;
    8600:	2301      	movs	r3, #1
    8602:	7033      	strb	r3, [r6, #0]
        return 0;
    8604:	2000      	movs	r0, #0
    8606:	e7cf      	b.n	85a8 <memory_manager_init+0x34>
        LOG_WRN("NVS Flash Mount Failed");
    8608:	4b22      	ldr	r3, [pc, #136]	; (8694 <memory_manager_init+0x120>)
    860a:	4628      	mov	r0, r5
    860c:	e9cd 5301 	strd	r5, r3, [sp, #4]
    8610:	463a      	mov	r2, r7
    8612:	462b      	mov	r3, r5
    8614:	4918      	ldr	r1, [pc, #96]	; (8678 <memory_manager_init+0x104>)
    8616:	9500      	str	r5, [sp, #0]
    8618:	f006 ff60 	bl	f4dc <z_log_msg_runtime_create.constprop.0>
        return MEMORY_ERR_FLASH_MOUNT;
    861c:	2004      	movs	r0, #4
    861e:	e7c3      	b.n	85a8 <memory_manager_init+0x34>
        LOG_DBG("m_items[%u] : {key = %s, id = %u, value = %u}", i, m_items[i].key, m_items[i].id, m_items[i].value);
    8620:	463d      	mov	r5, r7
    8622:	68bb      	ldr	r3, [r7, #8]
    8624:	2208      	movs	r2, #8
    8626:	9307      	str	r3, [sp, #28]
    8628:	687b      	ldr	r3, [r7, #4]
    862a:	4913      	ldr	r1, [pc, #76]	; (8678 <memory_manager_init+0x104>)
    862c:	9306      	str	r3, [sp, #24]
    862e:	f855 3b08 	ldr.w	r3, [r5], #8
    8632:	e9cd a902 	strd	sl, r9, [sp, #8]
    8636:	e9cd 4304 	strd	r4, r3, [sp, #16]
    863a:	2300      	movs	r3, #0
    863c:	4618      	mov	r0, r3
    863e:	e9cd 3200 	strd	r3, r2, [sp]
    8642:	2204      	movs	r2, #4
    8644:	f006 ff4a 	bl	f4dc <z_log_msg_runtime_create.constprop.0>
        err = nvs_read(&m_fs, m_items[i].id, &m_items[i].value, sizeof(m_items[i].value));
    8648:	2304      	movs	r3, #4
    864a:	462a      	mov	r2, r5
    864c:	88b9      	ldrh	r1, [r7, #4]
    864e:	4808      	ldr	r0, [pc, #32]	; (8670 <memory_manager_init+0xfc>)
    8650:	f007 fa75 	bl	fb3e <nvs_read>
        if (err <= 0) {
    8654:	2800      	cmp	r0, #0
    8656:	dc05      	bgt.n	8664 <memory_manager_init+0xf0>
            nvs_write(&m_fs, m_items[i].id, &m_items[i].value, sizeof(m_items[i].value));
    8658:	2304      	movs	r3, #4
    865a:	462a      	mov	r2, r5
    865c:	88b9      	ldrh	r1, [r7, #4]
    865e:	4804      	ldr	r0, [pc, #16]	; (8670 <memory_manager_init+0xfc>)
    8660:	f001 fbc4 	bl	9dec <nvs_write>
    for (size_t i=0; i < g_num_items; i++) {
    8664:	3401      	adds	r4, #1
    8666:	370c      	adds	r7, #12
    8668:	e7c6      	b.n	85f8 <memory_manager_init+0x84>
    866a:	bf00      	nop
    866c:	2000854c 	.word	0x2000854c
    8670:	200082a8 	.word	0x200082a8
    8674:	000106bc 	.word	0x000106bc
    8678:	000109c4 	.word	0x000109c4
    867c:	00010d48 	.word	0x00010d48
    8680:	00010d62 	.word	0x00010d62
    8684:	20008004 	.word	0x20008004
    8688:	20008000 	.word	0x20008000
    868c:	00010e0d 	.word	0x00010e0d
    8690:	00010d93 	.word	0x00010d93
    8694:	00010d7c 	.word	0x00010d7c

00008698 <_find_item_index>:
 *
 * @retval Index of data container if it exists
 * @retval 0 if key does not exist
 * 
 ***************************************************************/
size_t _find_item_index(const char* key) {
    8698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    869c:	4605      	mov	r5, r0
    for (size_t i=0; i < g_num_items; i++) {
    869e:	2400      	movs	r4, #0
        if (strcmp(m_items[i].key, key) == 0) {
    86a0:	270c      	movs	r7, #12
    for (size_t i=0; i < g_num_items; i++) {
    86a2:	4e0b      	ldr	r6, [pc, #44]	; (86d0 <_find_item_index+0x38>)
        if (strcmp(m_items[i].key, key) == 0) {
    86a4:	f8df 802c 	ldr.w	r8, [pc, #44]	; 86d4 <_find_item_index+0x3c>
    for (size_t i=0; i < g_num_items; i++) {
    86a8:	6833      	ldr	r3, [r6, #0]
    86aa:	42a3      	cmp	r3, r4
    86ac:	d804      	bhi.n	86b8 <_find_item_index+0x20>
            return i;
        }
    }
    return -1;
    86ae:	f04f 34ff 	mov.w	r4, #4294967295
    86b2:	4620      	mov	r0, r4
    86b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (strcmp(m_items[i].key, key) == 0) {
    86b8:	fb07 f304 	mul.w	r3, r7, r4
    86bc:	4629      	mov	r1, r5
    86be:	f858 0003 	ldr.w	r0, [r8, r3]
    86c2:	f007 fb36 	bl	fd32 <strcmp>
    86c6:	2800      	cmp	r0, #0
    86c8:	d0f3      	beq.n	86b2 <_find_item_index+0x1a>
    for (size_t i=0; i < g_num_items; i++) {
    86ca:	3401      	adds	r4, #1
    86cc:	e7ec      	b.n	86a8 <_find_item_index+0x10>
    86ce:	bf00      	nop
    86d0:	20008000 	.word	0x20008000
    86d4:	20008004 	.word	0x20008004

000086d8 <memory_load>:
{
    86d8:	b530      	push	{r4, r5, lr}
    if (!m_is_initialized) {
    86da:	4b0f      	ldr	r3, [pc, #60]	; (8718 <memory_load+0x40>)
{
    86dc:	460c      	mov	r4, r1
    if (!m_is_initialized) {
    86de:	781b      	ldrb	r3, [r3, #0]
{
    86e0:	4615      	mov	r5, r2
    86e2:	b085      	sub	sp, #20
    if (!m_is_initialized) {
    86e4:	b95b      	cbnz	r3, 86fe <memory_load+0x26>
        LOG_WRN("NVS Not Initialized, Unable to Load");
    86e6:	4a0d      	ldr	r2, [pc, #52]	; (871c <memory_load+0x44>)
    86e8:	4618      	mov	r0, r3
    86ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
    86ee:	490c      	ldr	r1, [pc, #48]	; (8720 <memory_load+0x48>)
    86f0:	2202      	movs	r2, #2
    86f2:	9300      	str	r3, [sp, #0]
    86f4:	f006 fef2 	bl	f4dc <z_log_msg_runtime_create.constprop.0>
    86f8:	2005      	movs	r0, #5
}
    86fa:	b005      	add	sp, #20
    86fc:	bd30      	pop	{r4, r5, pc}
    index = _find_item_index(key);
    86fe:	f7ff ffcb 	bl	8698 <_find_item_index>
    memcpy(data_p, (uint8_t *)&m_items[index].value, data_len);
    8702:	210c      	movs	r1, #12
    8704:	4b07      	ldr	r3, [pc, #28]	; (8724 <memory_load+0x4c>)
    8706:	462a      	mov	r2, r5
    8708:	fb01 3100 	mla	r1, r1, r0, r3
    870c:	4620      	mov	r0, r4
    870e:	f007 fb43 	bl	fd98 <memcpy>
    return MEMORY_SUCCESS;
    8712:	2000      	movs	r0, #0
    8714:	e7f1      	b.n	86fa <memory_load+0x22>
    8716:	bf00      	nop
    8718:	2000854c 	.word	0x2000854c
    871c:	00010dc5 	.word	0x00010dc5
    8720:	000109c4 	.word	0x000109c4
    8724:	2000800c 	.word	0x2000800c

00008728 <memory_save>:
{
    8728:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    if (!m_is_initialized) {
    872c:	4b16      	ldr	r3, [pc, #88]	; (8788 <memory_save+0x60>)
{
    872e:	4688      	mov	r8, r1
    if (!m_is_initialized) {
    8730:	781b      	ldrb	r3, [r3, #0]
{
    8732:	4614      	mov	r4, r2
    if (!m_is_initialized) {
    8734:	b963      	cbnz	r3, 8750 <memory_save+0x28>
        LOG_WRN("NVS Not Initialized, Unable to Save");
    8736:	4a15      	ldr	r2, [pc, #84]	; (878c <memory_save+0x64>)
    8738:	4618      	mov	r0, r3
    873a:	e9cd 3201 	strd	r3, r2, [sp, #4]
    873e:	4914      	ldr	r1, [pc, #80]	; (8790 <memory_save+0x68>)
    8740:	2202      	movs	r2, #2
    8742:	9300      	str	r3, [sp, #0]
    8744:	f006 feca 	bl	f4dc <z_log_msg_runtime_create.constprop.0>
    8748:	2005      	movs	r0, #5
}
    874a:	b004      	add	sp, #16
    874c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    index = _find_item_index(key);
    8750:	f7ff ffa2 	bl	8698 <_find_item_index>
    memcpy((uint8_t *)&m_items[index].value, data_p, data_len);
    8754:	230c      	movs	r3, #12
    8756:	fb03 f700 	mul.w	r7, r3, r0
    875a:	4d0e      	ldr	r5, [pc, #56]	; (8794 <memory_save+0x6c>)
    875c:	f107 0608 	add.w	r6, r7, #8
    8760:	442e      	add	r6, r5
    8762:	4622      	mov	r2, r4
    8764:	4641      	mov	r1, r8
    8766:	4630      	mov	r0, r6
    err = nvs_write(&m_fs, m_items[index].id, &m_items[index].value, data_len);
    8768:	443d      	add	r5, r7
    memcpy((uint8_t *)&m_items[index].value, data_p, data_len);
    876a:	f007 fb15 	bl	fd98 <memcpy>
    err = nvs_write(&m_fs, m_items[index].id, &m_items[index].value, data_len);
    876e:	4623      	mov	r3, r4
    8770:	4632      	mov	r2, r6
    8772:	88a9      	ldrh	r1, [r5, #4]
    8774:	4808      	ldr	r0, [pc, #32]	; (8798 <memory_save+0x70>)
    8776:	f001 fb39 	bl	9dec <nvs_write>
    if (err == 0 || err == data_len) {
    877a:	2800      	cmp	r0, #0
    877c:	d0e5      	beq.n	874a <memory_save+0x22>
        return MEMORY_SUCCESS;
    877e:	4284      	cmp	r4, r0
    8780:	bf14      	ite	ne
    8782:	2007      	movne	r0, #7
    8784:	2000      	moveq	r0, #0
    8786:	e7e0      	b.n	874a <memory_save+0x22>
    8788:	2000854c 	.word	0x2000854c
    878c:	00010de9 	.word	0x00010de9
    8790:	000109c4 	.word	0x000109c4
    8794:	20008004 	.word	0x20008004
    8798:	200082a8 	.word	0x200082a8

0000879c <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    879c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    87a0:	b091      	sub	sp, #68	; 0x44
    87a2:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    87a4:	f002 0304 	and.w	r3, r2, #4
    87a8:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    87aa:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    87ae:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    87b0:	0784      	lsls	r4, r0, #30
{
    87b2:	4605      	mov	r5, r0
    87b4:	460e      	mov	r6, r1
    87b6:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    87ba:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    87bc:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    87be:	f040 81bd 	bne.w	8b3c <cbvprintf_package+0x3a0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    87c2:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    87c4:	b130      	cbz	r0, 87d4 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    87c6:	2907      	cmp	r1, #7
    87c8:	d809      	bhi.n	87de <cbvprintf_package+0x42>
		return -ENOSPC;
    87ca:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    87ce:	b011      	add	sp, #68	; 0x44
    87d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    87d4:	f001 0607 	and.w	r6, r1, #7
    87d8:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    87da:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    87de:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    87e0:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
    87e4:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
    87e8:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    87ea:	f04f 33ff 	mov.w	r3, #4294967295
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    87ee:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    87f0:	9301      	str	r3, [sp, #4]
	bool parsing = false;
    87f2:	46cb      	mov	fp, r9
	size = sizeof(char *);
    87f4:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    87f6:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
    87fa:	b10d      	cbz	r5, 8800 <cbvprintf_package+0x64>
				*(const char **)buf = s;
    87fc:	9a00      	ldr	r2, [sp, #0]
    87fe:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    8800:	9805      	ldr	r0, [sp, #20]
    8802:	2800      	cmp	r0, #0
    8804:	f300 80eb 	bgt.w	89de <cbvprintf_package+0x242>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    8808:	4899      	ldr	r0, [pc, #612]	; (8a70 <cbvprintf_package+0x2d4>)
    880a:	9a00      	ldr	r2, [sp, #0]
    880c:	4282      	cmp	r2, r0
    880e:	d303      	bcc.n	8818 <cbvprintf_package+0x7c>
    8810:	4898      	ldr	r0, [pc, #608]	; (8a74 <cbvprintf_package+0x2d8>)
    8812:	4282      	cmp	r2, r0
    8814:	f0c0 80e3 	bcc.w	89de <cbvprintf_package+0x242>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    8818:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    881a:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    881e:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    8820:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    8824:	f100 8106 	bmi.w	8a34 <cbvprintf_package+0x298>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    8828:	2f0f      	cmp	r7, #15
    882a:	f200 80b4 	bhi.w	8996 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    882e:	2d00      	cmp	r5, #0
    8830:	f000 8108 	beq.w	8a44 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    8834:	f107 0240 	add.w	r2, r7, #64	; 0x40
    8838:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    883c:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    883e:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    8842:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    8846:	9804      	ldr	r0, [sp, #16]
    8848:	3001      	adds	r0, #1
    884a:	9004      	str	r0, [sp, #16]
    884c:	e0ea      	b.n	8a24 <cbvprintf_package+0x288>
			switch (*fmt) {
    884e:	287a      	cmp	r0, #122	; 0x7a
    8850:	d860      	bhi.n	8914 <cbvprintf_package+0x178>
    8852:	284b      	cmp	r0, #75	; 0x4b
    8854:	d80e      	bhi.n	8874 <cbvprintf_package+0xd8>
    8856:	2847      	cmp	r0, #71	; 0x47
    8858:	d85c      	bhi.n	8914 <cbvprintf_package+0x178>
    885a:	2829      	cmp	r0, #41	; 0x29
    885c:	d82f      	bhi.n	88be <cbvprintf_package+0x122>
    885e:	2825      	cmp	r0, #37	; 0x25
    8860:	d055      	beq.n	890e <cbvprintf_package+0x172>
    8862:	d857      	bhi.n	8914 <cbvprintf_package+0x178>
    8864:	2820      	cmp	r0, #32
    8866:	d07d      	beq.n	8964 <cbvprintf_package+0x1c8>
    8868:	3823      	subs	r0, #35	; 0x23
    886a:	f1d0 0b00 	rsbs	fp, r0, #0
    886e:	eb4b 0b00 	adc.w	fp, fp, r0
    8872:	e077      	b.n	8964 <cbvprintf_package+0x1c8>
    8874:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    8878:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    887c:	d84a      	bhi.n	8914 <cbvprintf_package+0x178>
    887e:	e8df f00c 	tbb	[pc, ip]
    8882:	4971      	.short	0x4971
    8884:	49494949 	.word	0x49494949
    8888:	49494949 	.word	0x49494949
    888c:	494c4949 	.word	0x494c4949
    8890:	49494949 	.word	0x49494949
    8894:	5a494949 	.word	0x5a494949
    8898:	5a4c4c49 	.word	0x5a4c4c49
    889c:	4c715a5a 	.word	0x4c715a5a
    88a0:	4971496e 	.word	0x4971496e
    88a4:	49184c18 	.word	0x49184c18
    88a8:	4c808349 	.word	0x4c808349
    88ac:	494c4949 	.word	0x494c4949
    88b0:	80          	.byte	0x80
    88b1:	00          	.byte	0x00
    88b2:	2000      	movs	r0, #0
    88b4:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    88b8:	f04f 0a04 	mov.w	sl, #4
    88bc:	e039      	b.n	8932 <cbvprintf_package+0x196>
    88be:	2201      	movs	r2, #1
			switch (*fmt) {
    88c0:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    88c4:	fa5f fc8c 	uxtb.w	ip, ip
    88c8:	fa02 fc0c 	lsl.w	ip, r2, ip
    88cc:	ea1c 0f0e 	tst.w	ip, lr
    88d0:	d148      	bne.n	8964 <cbvprintf_package+0x1c8>
    88d2:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    88d6:	d12e      	bne.n	8936 <cbvprintf_package+0x19a>
    88d8:	ea1c 0b02 	ands.w	fp, ip, r2
    88dc:	d042      	beq.n	8964 <cbvprintf_package+0x1c8>
		buf = (void *) ROUND_UP(buf, align);
    88de:	3c01      	subs	r4, #1
    88e0:	4454      	add	r4, sl
    88e2:	f1ca 0c00 	rsb	ip, sl, #0
    88e6:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    88ea:	2d00      	cmp	r5, #0
    88ec:	d061      	beq.n	89b2 <cbvprintf_package+0x216>
    88ee:	eba3 0c05 	sub.w	ip, r3, r5
    88f2:	44a4      	add	ip, r4
    88f4:	45b4      	cmp	ip, r6
    88f6:	f63f af68 	bhi.w	87ca <cbvprintf_package+0x2e>
		if (is_str_arg) {
    88fa:	2800      	cmp	r0, #0
    88fc:	d168      	bne.n	89d0 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    88fe:	2b04      	cmp	r3, #4
    8900:	d147      	bne.n	8992 <cbvprintf_package+0x1f6>
			int v = va_arg(ap, int);
    8902:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    8906:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    8908:	2304      	movs	r3, #4
    890a:	3404      	adds	r4, #4
    890c:	e02a      	b.n	8964 <cbvprintf_package+0x1c8>
				arg_idx--;
    890e:	9a01      	ldr	r2, [sp, #4]
    8910:	3a01      	subs	r2, #1
    8912:	9201      	str	r2, [sp, #4]
				parsing = false;
    8914:	f04f 0b00 	mov.w	fp, #0
				continue;
    8918:	e024      	b.n	8964 <cbvprintf_package+0x1c8>
				if (fmt[-1] == 'l') {
    891a:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    891e:	286c      	cmp	r0, #108	; 0x6c
    8920:	d134      	bne.n	898c <cbvprintf_package+0x1f0>
					if (fmt[-2] == 'l') {
    8922:	2000      	movs	r0, #0
    8924:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
    8928:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    892a:	2b6c      	cmp	r3, #108	; 0x6c
    892c:	d1c4      	bne.n	88b8 <cbvprintf_package+0x11c>
						align = VA_STACK_ALIGN(long long);
    892e:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    8932:	4653      	mov	r3, sl
    8934:	e7d3      	b.n	88de <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
    8936:	f108 0807 	add.w	r8, r8, #7
    893a:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    893e:	3407      	adds	r4, #7
    8940:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    8944:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
    8948:	b135      	cbz	r5, 8958 <cbvprintf_package+0x1bc>
					if (BUF_OFFSET + size > len) {
    894a:	9806      	ldr	r0, [sp, #24]
    894c:	4420      	add	r0, r4
    894e:	42b0      	cmp	r0, r6
    8950:	f63f af3b 	bhi.w	87ca <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    8954:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    8958:	f04f 0b00 	mov.w	fp, #0
				buf += size;
    895c:	3408      	adds	r4, #8
			switch (*fmt) {
    895e:	f04f 0a08 	mov.w	sl, #8
    8962:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    8964:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    8968:	2800      	cmp	r0, #0
    896a:	d078      	beq.n	8a5e <cbvprintf_package+0x2c2>
			if (!parsing) {
    896c:	f1bb 0f00 	cmp.w	fp, #0
    8970:	f47f af6d 	bne.w	884e <cbvprintf_package+0xb2>
				if (*fmt == '%') {
    8974:	2825      	cmp	r0, #37	; 0x25
    8976:	d1f5      	bne.n	8964 <cbvprintf_package+0x1c8>
					parsing = true;
    8978:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
    897c:	9b01      	ldr	r3, [sp, #4]
    897e:	3301      	adds	r3, #1
    8980:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
    8982:	f04f 0a04 	mov.w	sl, #4
    8986:	e7ec      	b.n	8962 <cbvprintf_package+0x1c6>
			switch (*fmt) {
    8988:	4658      	mov	r0, fp
    898a:	e793      	b.n	88b4 <cbvprintf_package+0x118>
    898c:	2000      	movs	r0, #0
				parsing = false;
    898e:	4683      	mov	fp, r0
    8990:	e7a5      	b.n	88de <cbvprintf_package+0x142>
		} else if (size == sizeof(long long)) {
    8992:	2b08      	cmp	r3, #8
    8994:	d002      	beq.n	899c <cbvprintf_package+0x200>
					return -EINVAL;
    8996:	f06f 0015 	mvn.w	r0, #21
    899a:	e718      	b.n	87ce <cbvprintf_package+0x32>
			long long v = va_arg(ap, long long);
    899c:	f108 0807 	add.w	r8, r8, #7
    89a0:	f028 0807 	bic.w	r8, r8, #7
    89a4:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
    89a8:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
    89ac:	2308      	movs	r3, #8
    89ae:	3408      	adds	r4, #8
    89b0:	e7d8      	b.n	8964 <cbvprintf_package+0x1c8>
		if (is_str_arg) {
    89b2:	b968      	cbnz	r0, 89d0 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    89b4:	2b04      	cmp	r3, #4
    89b6:	d102      	bne.n	89be <cbvprintf_package+0x222>
			int v = va_arg(ap, int);
    89b8:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    89bc:	e7a4      	b.n	8908 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
    89be:	2b08      	cmp	r3, #8
    89c0:	d1e9      	bne.n	8996 <cbvprintf_package+0x1fa>
			long long v = va_arg(ap, long long);
    89c2:	f108 0807 	add.w	r8, r8, #7
    89c6:	f028 0807 	bic.w	r8, r8, #7
    89ca:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    89ce:	e7ed      	b.n	89ac <cbvprintf_package+0x210>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    89d0:	9a05      	ldr	r2, [sp, #20]
    89d2:	3a01      	subs	r2, #1
    89d4:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
    89d6:	f858 2b04 	ldr.w	r2, [r8], #4
    89da:	9200      	str	r2, [sp, #0]
    89dc:	e70d      	b.n	87fa <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
    89de:	9a03      	ldr	r2, [sp, #12]
    89e0:	0790      	lsls	r0, r2, #30
    89e2:	d520      	bpl.n	8a26 <cbvprintf_package+0x28a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    89e4:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    89e8:	eba4 0e05 	sub.w	lr, r4, r5
    89ec:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    89f0:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    89f4:	d2cf      	bcs.n	8996 <cbvprintf_package+0x1fa>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    89f6:	2f0f      	cmp	r7, #15
    89f8:	d8cd      	bhi.n	8996 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    89fa:	b1f5      	cbz	r5, 8a3a <cbvprintf_package+0x29e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    89fc:	f107 0240 	add.w	r2, r7, #64	; 0x40
    8a00:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    8a04:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    8a06:	b2c0      	uxtb	r0, r0
    8a08:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    8a0c:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    8a10:	f1bc 0f00 	cmp.w	ip, #0
    8a14:	f43f af17 	beq.w	8846 <cbvprintf_package+0xaa>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    8a18:	f060 007f 	orn	r0, r0, #127	; 0x7f
    8a1c:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    8a20:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    8a24:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    8a26:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
    8a2a:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
    8a2e:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    8a30:	9206      	str	r2, [sp, #24]
    8a32:	e797      	b.n	8964 <cbvprintf_package+0x1c8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    8a34:	f04f 0c00 	mov.w	ip, #0
    8a38:	e7da      	b.n	89f0 <cbvprintf_package+0x254>
				} else if (is_ro) {
    8a3a:	f1bc 0f00 	cmp.w	ip, #0
    8a3e:	d001      	beq.n	8a44 <cbvprintf_package+0x2a8>
					len += 1;
    8a40:	3601      	adds	r6, #1
    8a42:	e7ef      	b.n	8a24 <cbvprintf_package+0x288>
				} else if (rws_pos_en) {
    8a44:	9802      	ldr	r0, [sp, #8]
					len += 2;
    8a46:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    8a48:	2800      	cmp	r0, #0
    8a4a:	d1eb      	bne.n	8a24 <cbvprintf_package+0x288>
					len += strlen(s) + 1 + 1;
    8a4c:	9800      	ldr	r0, [sp, #0]
    8a4e:	e9cd 3106 	strd	r3, r1, [sp, #24]
    8a52:	f007 f95e 	bl	fd12 <strlen>
    8a56:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    8a5a:	4406      	add	r6, r0
    8a5c:	e7e2      	b.n	8a24 <cbvprintf_package+0x288>
	if (BUF_OFFSET / sizeof(int) > 255) {
    8a5e:	1b63      	subs	r3, r4, r5
    8a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    8a64:	d297      	bcs.n	8996 <cbvprintf_package+0x1fa>
	if (buf0 == NULL) {
    8a66:	b93d      	cbnz	r5, 8a78 <cbvprintf_package+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    8a68:	f1a6 0408 	sub.w	r4, r6, #8
    8a6c:	18e0      	adds	r0, r4, r3
    8a6e:	e6ae      	b.n	87ce <cbvprintf_package+0x32>
    8a70:	000105d4 	.word	0x000105d4
    8a74:	00011a68 	.word	0x00011a68
	if (rws_pos_en) {
    8a78:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    8a7a:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    8a7c:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    8a7e:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    8a80:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    8a84:	b1c2      	cbz	r2, 8ab8 <cbvprintf_package+0x31c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    8a86:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    8a88:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    8a8c:	f1b9 0f00 	cmp.w	r9, #0
    8a90:	d005      	beq.n	8a9e <cbvprintf_package+0x302>
		for (i = 0; i < s_idx; i++) {
    8a92:	2200      	movs	r2, #0
    8a94:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    8a96:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    8a9a:	4297      	cmp	r7, r2
    8a9c:	d10e      	bne.n	8abc <cbvprintf_package+0x320>
			*buf++ = str_ptr_arg[i];
    8a9e:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    8aa2:	f1c5 0301 	rsb	r3, r5, #1
    8aa6:	f10d 0820 	add.w	r8, sp, #32
    8aaa:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    8aac:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    8ab0:	4557      	cmp	r7, sl
    8ab2:	d112      	bne.n	8ada <cbvprintf_package+0x33e>
	return BUF_OFFSET;
    8ab4:	1b60      	subs	r0, r4, r5
    8ab6:	e68a      	b.n	87ce <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    8ab8:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    8aba:	e7e5      	b.n	8a88 <cbvprintf_package+0x2ec>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    8abc:	f810 3b01 	ldrb.w	r3, [r0], #1
    8ac0:	0619      	lsls	r1, r3, #24
    8ac2:	d508      	bpl.n	8ad6 <cbvprintf_package+0x33a>
			if (BUF_OFFSET + 1 > len) {
    8ac4:	eb04 0e0c 	add.w	lr, r4, ip
    8ac8:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    8aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    8ace:	f63f ae7c 	bhi.w	87ca <cbvprintf_package+0x2e>
			*buf++ = pos;
    8ad2:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    8ad6:	3201      	adds	r2, #1
    8ad8:	e7df      	b.n	8a9a <cbvprintf_package+0x2fe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    8ada:	f1b9 0f00 	cmp.w	r9, #0
    8ade:	d003      	beq.n	8ae8 <cbvprintf_package+0x34c>
    8ae0:	f998 2000 	ldrsb.w	r2, [r8]
    8ae4:	2a00      	cmp	r2, #0
    8ae6:	db17      	blt.n	8b18 <cbvprintf_package+0x37c>
		if (rws_pos_en) {
    8ae8:	9b02      	ldr	r3, [sp, #8]
    8aea:	b1d3      	cbz	r3, 8b22 <cbvprintf_package+0x386>
			*buf++ = str_ptr_arg[i];
    8aec:	f81a 200b 	ldrb.w	r2, [sl, fp]
    8af0:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    8af4:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    8af6:	9b01      	ldr	r3, [sp, #4]
    8af8:	1898      	adds	r0, r3, r2
    8afa:	4420      	add	r0, r4
    8afc:	42b0      	cmp	r0, r6
    8afe:	f63f ae64 	bhi.w	87ca <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    8b02:	f898 0000 	ldrb.w	r0, [r8]
		memcpy(buf, s, size);
    8b06:	9900      	ldr	r1, [sp, #0]
		*buf++ = str_ptr_pos[i];
    8b08:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
    8b0c:	4620      	mov	r0, r4
    8b0e:	9203      	str	r2, [sp, #12]
    8b10:	f007 f942 	bl	fd98 <memcpy>
		buf += size;
    8b14:	9a03      	ldr	r2, [sp, #12]
    8b16:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    8b18:	f10a 0a01 	add.w	sl, sl, #1
    8b1c:	f108 0801 	add.w	r8, r8, #1
    8b20:	e7c6      	b.n	8ab0 <cbvprintf_package+0x314>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    8b22:	f898 2000 	ldrb.w	r2, [r8]
    8b26:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    8b2a:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    8b2c:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
    8b2e:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    8b30:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    8b34:	f007 f8ed 	bl	fd12 <strlen>
    8b38:	1c42      	adds	r2, r0, #1
    8b3a:	e7dc      	b.n	8af6 <cbvprintf_package+0x35a>
		return -EFAULT;
    8b3c:	f06f 000d 	mvn.w	r0, #13
    8b40:	e645      	b.n	87ce <cbvprintf_package+0x32>
    8b42:	bf00      	nop

00008b44 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    8b44:	4b01      	ldr	r3, [pc, #4]	; (8b4c <__printk_hook_install+0x8>)
    8b46:	6018      	str	r0, [r3, #0]
}
    8b48:	4770      	bx	lr
    8b4a:	bf00      	nop
    8b4c:	20008028 	.word	0x20008028

00008b50 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    8b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8b54:	8b05      	ldrh	r5, [r0, #24]
{
    8b56:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    8b58:	0728      	lsls	r0, r5, #28
{
    8b5a:	4690      	mov	r8, r2
	if (processing) {
    8b5c:	d411      	bmi.n	8b82 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    8b5e:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8b60:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    8b64:	f040 80cd 	bne.w	8d02 <process_event+0x1b2>
			evt = process_recheck(mgr);
    8b68:	4620      	mov	r0, r4
    8b6a:	f006 fd11 	bl	f590 <process_recheck>
		}

		if (evt == EVT_NOP) {
    8b6e:	b178      	cbz	r0, 8b90 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    8b70:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8b72:	8b21      	ldrh	r1, [r4, #24]
    8b74:	2804      	cmp	r0, #4
    8b76:	d811      	bhi.n	8b9c <process_event+0x4c>
    8b78:	e8df f000 	tbb	[pc, r0]
    8b7c:	856d10c3 	.word	0x856d10c3
    8b80:	95          	.byte	0x95
    8b81:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    8b82:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    8b84:	bf0c      	ite	eq
    8b86:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8b8a:	f045 0520 	orrne.w	r5, r5, #32
    8b8e:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    8b90:	f388 8811 	msr	BASEPRI, r8
    8b94:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    8b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8b9c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    8ba0:	45aa      	cmp	sl, r5
    8ba2:	f000 80a6 	beq.w	8cf2 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    8ba6:	2700      	movs	r7, #0
    8ba8:	46b9      	mov	r9, r7
    8baa:	463e      	mov	r6, r7
    8bac:	68a3      	ldr	r3, [r4, #8]
    8bae:	2b00      	cmp	r3, #0
    8bb0:	f000 80bd 	beq.w	8d2e <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    8bb4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    8bb8:	8321      	strh	r1, [r4, #24]
    8bba:	f388 8811 	msr	BASEPRI, r8
    8bbe:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    8bc2:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    8bc4:	2900      	cmp	r1, #0
    8bc6:	f000 80bb 	beq.w	8d40 <process_event+0x1f0>
	return node->next;
    8bca:	680d      	ldr	r5, [r1, #0]
    8bcc:	2900      	cmp	r1, #0
    8bce:	f000 80b7 	beq.w	8d40 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    8bd2:	4633      	mov	r3, r6
    8bd4:	4652      	mov	r2, sl
    8bd6:	4620      	mov	r0, r4
    8bd8:	f8d1 8004 	ldr.w	r8, [r1, #4]
    8bdc:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    8bde:	2d00      	cmp	r5, #0
    8be0:	d076      	beq.n	8cd0 <process_event+0x180>
    8be2:	682b      	ldr	r3, [r5, #0]
    8be4:	4629      	mov	r1, r5
    8be6:	461d      	mov	r5, r3
    8be8:	e7f0      	b.n	8bcc <process_event+0x7c>
    8bea:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    8bee:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    8bf0:	2a01      	cmp	r2, #1
    8bf2:	d81b      	bhi.n	8c2c <process_event+0xdc>
	list->head = NULL;
    8bf4:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8bf6:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    8bfa:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    8bfc:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8bfe:	b289      	uxth	r1, r1
	list->tail = NULL;
    8c00:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    8c04:	d109      	bne.n	8c1a <process_event+0xca>
    8c06:	463b      	mov	r3, r7
    8c08:	e003      	b.n	8c12 <process_event+0xc2>
				mgr->refs += 1U;
    8c0a:	8b62      	ldrh	r2, [r4, #26]
    8c0c:	3201      	adds	r2, #1
    8c0e:	8362      	strh	r2, [r4, #26]
	return node->next;
    8c10:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    8c12:	2b00      	cmp	r3, #0
    8c14:	d1f9      	bne.n	8c0a <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8c16:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    8c1a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    8c1c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    8c1e:	f006 fcb7 	bl	f590 <process_recheck>
    8c22:	2800      	cmp	r0, #0
    8c24:	d07b      	beq.n	8d1e <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8c26:	f041 0120 	orr.w	r1, r1, #32
    8c2a:	e077      	b.n	8d1c <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    8c2c:	2b04      	cmp	r3, #4
    8c2e:	d10a      	bne.n	8c46 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8c30:	f021 0107 	bic.w	r1, r1, #7
    8c34:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    8c36:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    8c38:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    8c3a:	f006 fca9 	bl	f590 <process_recheck>
    8c3e:	b110      	cbz	r0, 8c46 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8c40:	f041 0120 	orr.w	r1, r1, #32
    8c44:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8c46:	8b21      	ldrh	r1, [r4, #24]
    8c48:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    8c4c:	45aa      	cmp	sl, r5
    8c4e:	d050      	beq.n	8cf2 <process_event+0x1a2>
    8c50:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    8c52:	46b9      	mov	r9, r7
    8c54:	e7aa      	b.n	8bac <process_event+0x5c>
			transit = mgr->transitions->start;
    8c56:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8c58:	f021 0107 	bic.w	r1, r1, #7
    8c5c:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    8c60:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    8c62:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    8c66:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    8c68:	d12d      	bne.n	8cc6 <process_event+0x176>
		    || (transit != NULL)) {
    8c6a:	f1b9 0f00 	cmp.w	r9, #0
    8c6e:	d040      	beq.n	8cf2 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    8c70:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    8c74:	8321      	strh	r1, [r4, #24]
    8c76:	f388 8811 	msr	BASEPRI, r8
    8c7a:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    8c7e:	4620      	mov	r0, r4
    8c80:	4939      	ldr	r1, [pc, #228]	; (8d68 <process_event+0x218>)
    8c82:	47c8      	blx	r9
    8c84:	e029      	b.n	8cda <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8c86:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    8c8a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8c8c:	f041 0104 	orr.w	r1, r1, #4
    8c90:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    8c92:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    8c94:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    8c98:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    8c9a:	d0e6      	beq.n	8c6a <process_event+0x11a>
    8c9c:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8c9e:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    8ca2:	463e      	mov	r6, r7
    8ca4:	e782      	b.n	8bac <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8ca6:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    8caa:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8cac:	f041 0105 	orr.w	r1, r1, #5
    8cb0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    8cb2:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    8cb4:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    8cb8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    8cba:	d0d6      	beq.n	8c6a <process_event+0x11a>
    8cbc:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8cbe:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    8cc2:	463e      	mov	r6, r7
    8cc4:	e772      	b.n	8bac <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    8cc6:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8cc8:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    8ccc:	463e      	mov	r6, r7
    8cce:	e76d      	b.n	8bac <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    8cd0:	462b      	mov	r3, r5
    8cd2:	e787      	b.n	8be4 <process_event+0x94>
			if (transit != NULL) {
    8cd4:	f1b9 0f00 	cmp.w	r9, #0
    8cd8:	d1d1      	bne.n	8c7e <process_event+0x12e>
	__asm__ volatile(
    8cda:	f04f 0320 	mov.w	r3, #32
    8cde:	f3ef 8811 	mrs	r8, BASEPRI
    8ce2:	f383 8812 	msr	BASEPRI_MAX, r3
    8ce6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    8cea:	8b23      	ldrh	r3, [r4, #24]
    8cec:	f023 0308 	bic.w	r3, r3, #8
    8cf0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    8cf2:	8b25      	ldrh	r5, [r4, #24]
    8cf4:	06ea      	lsls	r2, r5, #27
    8cf6:	d52e      	bpl.n	8d56 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    8cf8:	f025 0310 	bic.w	r3, r5, #16
    8cfc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    8cfe:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    8d02:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8d04:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    8d06:	2e00      	cmp	r6, #0
    8d08:	f6bf af6f 	bge.w	8bea <process_event+0x9a>
	list->head = NULL;
    8d0c:	2300      	movs	r3, #0
		*clients = mgr->clients;
    8d0e:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    8d10:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8d14:	f021 0107 	bic.w	r1, r1, #7
    8d18:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8d1c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8d1e:	8b21      	ldrh	r1, [r4, #24]
    8d20:	f04f 0900 	mov.w	r9, #0
    8d24:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    8d28:	45aa      	cmp	sl, r5
    8d2a:	f47f af3f 	bne.w	8bac <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    8d2e:	2f00      	cmp	r7, #0
    8d30:	d09b      	beq.n	8c6a <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    8d32:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    8d36:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    8d38:	f388 8811 	msr	BASEPRI, r8
    8d3c:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    8d40:	2f00      	cmp	r7, #0
    8d42:	d0c7      	beq.n	8cd4 <process_event+0x184>
	return node->next;
    8d44:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    8d46:	4639      	mov	r1, r7
    8d48:	4633      	mov	r3, r6
    8d4a:	4652      	mov	r2, sl
    8d4c:	4620      	mov	r0, r4
    8d4e:	f006 fc4b 	bl	f5e8 <notify_one>
	list->head = node;
    8d52:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    8d54:	e7f4      	b.n	8d40 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    8d56:	06ab      	lsls	r3, r5, #26
    8d58:	f57f af1a 	bpl.w	8b90 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    8d5c:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    8d60:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    8d62:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    8d66:	e6ff      	b.n	8b68 <process_event+0x18>
    8d68:	0000f615 	.word	0x0000f615

00008d6c <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    8d6c:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    8d6e:	4c09      	ldr	r4, [pc, #36]	; (8d94 <crc8_ccitt+0x28>)
    8d70:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    8d72:	4291      	cmp	r1, r2
    8d74:	d100      	bne.n	8d78 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    8d76:	bd10      	pop	{r4, pc}
		val ^= p[i];
    8d78:	f811 3b01 	ldrb.w	r3, [r1], #1
    8d7c:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    8d7e:	0903      	lsrs	r3, r0, #4
    8d80:	5ce3      	ldrb	r3, [r4, r3]
    8d82:	0100      	lsls	r0, r0, #4
    8d84:	b2c0      	uxtb	r0, r0
    8d86:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    8d88:	0918      	lsrs	r0, r3, #4
    8d8a:	5c20      	ldrb	r0, [r4, r0]
    8d8c:	011b      	lsls	r3, r3, #4
    8d8e:	b2db      	uxtb	r3, r3
    8d90:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
    8d92:	e7ee      	b.n	8d72 <crc8_ccitt+0x6>
    8d94:	00010e41 	.word	0x00010e41

00008d98 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    8d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d9c:	4681      	mov	r9, r0
    8d9e:	468b      	mov	fp, r1
    8da0:	4617      	mov	r7, r2
    8da2:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    8da4:	2500      	movs	r5, #0
{
    8da6:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    8da8:	7838      	ldrb	r0, [r7, #0]
    8daa:	b908      	cbnz	r0, 8db0 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    8dac:	4628      	mov	r0, r5
    8dae:	e357      	b.n	9460 <z_cbvprintf_impl+0x6c8>
			OUTC(*fp++);
    8db0:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    8db2:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    8db4:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    8db6:	d006      	beq.n	8dc6 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    8db8:	4659      	mov	r1, fp
    8dba:	47c8      	blx	r9
    8dbc:	2800      	cmp	r0, #0
    8dbe:	f2c0 834f 	blt.w	9460 <z_cbvprintf_impl+0x6c8>
    8dc2:	3501      	adds	r5, #1
		if (bps == NULL) {
    8dc4:	e1fb      	b.n	91be <z_cbvprintf_impl+0x426>
		} state = {
    8dc6:	2218      	movs	r2, #24
    8dc8:	2100      	movs	r1, #0
    8dca:	a80e      	add	r0, sp, #56	; 0x38
    8dcc:	f006 ffef 	bl	fdae <memset>
	if (*sp == '%') {
    8dd0:	787b      	ldrb	r3, [r7, #1]
    8dd2:	2b25      	cmp	r3, #37	; 0x25
    8dd4:	d07d      	beq.n	8ed2 <z_cbvprintf_impl+0x13a>
    8dd6:	2300      	movs	r3, #0
    8dd8:	4698      	mov	r8, r3
    8dda:	469e      	mov	lr, r3
    8ddc:	469c      	mov	ip, r3
    8dde:	461e      	mov	r6, r3
    8de0:	1c78      	adds	r0, r7, #1
    8de2:	4601      	mov	r1, r0
		switch (*sp) {
    8de4:	f810 2b01 	ldrb.w	r2, [r0], #1
    8de8:	2a2b      	cmp	r2, #43	; 0x2b
    8dea:	f000 80a1 	beq.w	8f30 <z_cbvprintf_impl+0x198>
    8dee:	f200 8098 	bhi.w	8f22 <z_cbvprintf_impl+0x18a>
    8df2:	2a20      	cmp	r2, #32
    8df4:	f000 809f 	beq.w	8f36 <z_cbvprintf_impl+0x19e>
    8df8:	2a23      	cmp	r2, #35	; 0x23
    8dfa:	f000 809f 	beq.w	8f3c <z_cbvprintf_impl+0x1a4>
    8dfe:	b12b      	cbz	r3, 8e0c <z_cbvprintf_impl+0x74>
    8e00:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    8e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8e08:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    8e0c:	f1b8 0f00 	cmp.w	r8, #0
    8e10:	d005      	beq.n	8e1e <z_cbvprintf_impl+0x86>
    8e12:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    8e16:	f043 0320 	orr.w	r3, r3, #32
    8e1a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    8e1e:	f1be 0f00 	cmp.w	lr, #0
    8e22:	d005      	beq.n	8e30 <z_cbvprintf_impl+0x98>
    8e24:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    8e28:	f043 0310 	orr.w	r3, r3, #16
    8e2c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    8e30:	f1bc 0f00 	cmp.w	ip, #0
    8e34:	d005      	beq.n	8e42 <z_cbvprintf_impl+0xaa>
    8e36:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    8e3a:	f043 0308 	orr.w	r3, r3, #8
    8e3e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    8e42:	b12e      	cbz	r6, 8e50 <z_cbvprintf_impl+0xb8>
    8e44:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    8e48:	f043 0304 	orr.w	r3, r3, #4
    8e4c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    8e50:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    8e54:	f003 0044 	and.w	r0, r3, #68	; 0x44
    8e58:	2844      	cmp	r0, #68	; 0x44
    8e5a:	d103      	bne.n	8e64 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    8e5c:	f36f 1386 	bfc	r3, #6, #1
    8e60:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    8e64:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    8e68:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    8e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8e6e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    8e72:	d17f      	bne.n	8f74 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    8e74:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    8e78:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    8e7a:	f042 0201 	orr.w	r2, r2, #1
    8e7e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    8e82:	781a      	ldrb	r2, [r3, #0]
    8e84:	2a2e      	cmp	r2, #46	; 0x2e
    8e86:	bf0c      	ite	eq
    8e88:	2101      	moveq	r1, #1
    8e8a:	2100      	movne	r1, #0
    8e8c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    8e90:	f361 0241 	bfi	r2, r1, #1, #1
    8e94:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    8e98:	d178      	bne.n	8f8c <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    8e9a:	785a      	ldrb	r2, [r3, #1]
    8e9c:	2a2a      	cmp	r2, #42	; 0x2a
    8e9e:	d06e      	beq.n	8f7e <z_cbvprintf_impl+0x1e6>
	size_t val = 0;
    8ea0:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    8ea2:	f04f 0c0a 	mov.w	ip, #10
	++sp;
    8ea6:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    8ea8:	4619      	mov	r1, r3
    8eaa:	f811 0b01 	ldrb.w	r0, [r1], #1
    8eae:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    8eb2:	2e09      	cmp	r6, #9
    8eb4:	f240 8095 	bls.w	8fe2 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    8eb8:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    8ebc:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    8ebe:	f3c1 0040 	ubfx	r0, r1, #1, #1
    8ec2:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    8ec6:	460a      	mov	r2, r1
    8ec8:	f360 0241 	bfi	r2, r0, #1, #1
    8ecc:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    8ed0:	e05c      	b.n	8f8c <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    8ed2:	1cba      	adds	r2, r7, #2
    8ed4:	9203      	str	r2, [sp, #12]
    8ed6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    8eda:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    8ede:	07da      	lsls	r2, r3, #31
    8ee0:	f140 812e 	bpl.w	9140 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    8ee4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    8ee8:	f1b8 0f00 	cmp.w	r8, #0
    8eec:	da07      	bge.n	8efe <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    8eee:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
    8ef2:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    8ef6:	f042 0204 	orr.w	r2, r2, #4
    8efa:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
    8efe:	075e      	lsls	r6, r3, #29
    8f00:	f140 8127 	bpl.w	9152 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    8f04:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    8f08:	f1ba 0f00 	cmp.w	sl, #0
    8f0c:	f280 8126 	bge.w	915c <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    8f10:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    8f14:	f36f 0341 	bfc	r3, #1, #1
    8f18:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    8f1c:	f04f 3aff 	mov.w	sl, #4294967295
    8f20:	e11c      	b.n	915c <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    8f22:	2a2d      	cmp	r2, #45	; 0x2d
    8f24:	d00d      	beq.n	8f42 <z_cbvprintf_impl+0x1aa>
    8f26:	2a30      	cmp	r2, #48	; 0x30
    8f28:	f47f af69 	bne.w	8dfe <z_cbvprintf_impl+0x66>
    8f2c:	2301      	movs	r3, #1
	} while (loop);
    8f2e:	e758      	b.n	8de2 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    8f30:	f04f 0c01 	mov.w	ip, #1
    8f34:	e755      	b.n	8de2 <z_cbvprintf_impl+0x4a>
    8f36:	f04f 0e01 	mov.w	lr, #1
    8f3a:	e752      	b.n	8de2 <z_cbvprintf_impl+0x4a>
    8f3c:	f04f 0801 	mov.w	r8, #1
    8f40:	e74f      	b.n	8de2 <z_cbvprintf_impl+0x4a>
    8f42:	2601      	movs	r6, #1
    8f44:	e74d      	b.n	8de2 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    8f46:	4603      	mov	r3, r0
    8f48:	fb0e 6202 	mla	r2, lr, r2, r6
    8f4c:	3a30      	subs	r2, #48	; 0x30
    8f4e:	4618      	mov	r0, r3
    8f50:	f810 6b01 	ldrb.w	r6, [r0], #1
    8f54:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    8f58:	f1bc 0f09 	cmp.w	ip, #9
    8f5c:	d9f3      	bls.n	8f46 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    8f5e:	4299      	cmp	r1, r3
    8f60:	d08f      	beq.n	8e82 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    8f62:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    8f66:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    8f68:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    8f6a:	f362 0141 	bfi	r1, r2, #1, #1
    8f6e:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    8f72:	e786      	b.n	8e82 <z_cbvprintf_impl+0xea>
    8f74:	460b      	mov	r3, r1
	size_t val = 0;
    8f76:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    8f78:	f04f 0e0a 	mov.w	lr, #10
    8f7c:	e7e7      	b.n	8f4e <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    8f7e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    8f82:	3302      	adds	r3, #2
		conv->prec_star = true;
    8f84:	f042 0204 	orr.w	r2, r2, #4
    8f88:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
    8f8c:	781a      	ldrb	r2, [r3, #0]
    8f8e:	2a6c      	cmp	r2, #108	; 0x6c
    8f90:	d047      	beq.n	9022 <z_cbvprintf_impl+0x28a>
    8f92:	d82b      	bhi.n	8fec <z_cbvprintf_impl+0x254>
    8f94:	2a68      	cmp	r2, #104	; 0x68
    8f96:	d031      	beq.n	8ffc <z_cbvprintf_impl+0x264>
    8f98:	2a6a      	cmp	r2, #106	; 0x6a
    8f9a:	d04b      	beq.n	9034 <z_cbvprintf_impl+0x29c>
    8f9c:	2a4c      	cmp	r2, #76	; 0x4c
    8f9e:	d051      	beq.n	9044 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    8fa0:	461a      	mov	r2, r3
    8fa2:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    8fa6:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    8fa8:	9203      	str	r2, [sp, #12]
    8faa:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
    8fae:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
    8fb2:	f200 80be 	bhi.w	9132 <z_cbvprintf_impl+0x39a>
    8fb6:	2b6d      	cmp	r3, #109	; 0x6d
    8fb8:	d851      	bhi.n	905e <z_cbvprintf_impl+0x2c6>
    8fba:	2b69      	cmp	r3, #105	; 0x69
    8fbc:	f200 80b9 	bhi.w	9132 <z_cbvprintf_impl+0x39a>
    8fc0:	2b57      	cmp	r3, #87	; 0x57
    8fc2:	d867      	bhi.n	9094 <z_cbvprintf_impl+0x2fc>
    8fc4:	2b41      	cmp	r3, #65	; 0x41
    8fc6:	d003      	beq.n	8fd0 <z_cbvprintf_impl+0x238>
    8fc8:	3b45      	subs	r3, #69	; 0x45
    8fca:	2b02      	cmp	r3, #2
    8fcc:	f200 80b1 	bhi.w	9132 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    8fd0:	2204      	movs	r2, #4
    8fd2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    8fd6:	f362 0302 	bfi	r3, r2, #0, #3
    8fda:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    8fde:	2301      	movs	r3, #1
			break;
    8fe0:	e073      	b.n	90ca <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    8fe2:	fb0c 0202 	mla	r2, ip, r2, r0
    8fe6:	460b      	mov	r3, r1
    8fe8:	3a30      	subs	r2, #48	; 0x30
    8fea:	e75d      	b.n	8ea8 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    8fec:	2a74      	cmp	r2, #116	; 0x74
    8fee:	d025      	beq.n	903c <z_cbvprintf_impl+0x2a4>
    8ff0:	2a7a      	cmp	r2, #122	; 0x7a
    8ff2:	d1d5      	bne.n	8fa0 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    8ff4:	2106      	movs	r1, #6
    8ff6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    8ffa:	e00c      	b.n	9016 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    8ffc:	785a      	ldrb	r2, [r3, #1]
    8ffe:	2a68      	cmp	r2, #104	; 0x68
    9000:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    9004:	d106      	bne.n	9014 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    9006:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    9008:	f361 02c6 	bfi	r2, r1, #3, #4
    900c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    9010:	3302      	adds	r3, #2
    9012:	e7c5      	b.n	8fa0 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    9014:	2102      	movs	r1, #2
    9016:	f361 02c6 	bfi	r2, r1, #3, #4
    901a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    901e:	3301      	adds	r3, #1
    9020:	e7be      	b.n	8fa0 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    9022:	785a      	ldrb	r2, [r3, #1]
    9024:	2a6c      	cmp	r2, #108	; 0x6c
    9026:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    902a:	d101      	bne.n	9030 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    902c:	2104      	movs	r1, #4
    902e:	e7eb      	b.n	9008 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    9030:	2103      	movs	r1, #3
    9032:	e7f0      	b.n	9016 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    9034:	2105      	movs	r1, #5
    9036:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    903a:	e7ec      	b.n	9016 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    903c:	2107      	movs	r1, #7
    903e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    9042:	e7e8      	b.n	9016 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    9044:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    9048:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    904c:	f022 0202 	bic.w	r2, r2, #2
    9050:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    9054:	f042 0202 	orr.w	r2, r2, #2
    9058:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    905c:	e7df      	b.n	901e <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    905e:	3b6e      	subs	r3, #110	; 0x6e
    9060:	b2d9      	uxtb	r1, r3
    9062:	2301      	movs	r3, #1
    9064:	408b      	lsls	r3, r1
    9066:	f240 4182 	movw	r1, #1154	; 0x482
    906a:	420b      	tst	r3, r1
    906c:	d137      	bne.n	90de <z_cbvprintf_impl+0x346>
    906e:	f013 0f24 	tst.w	r3, #36	; 0x24
    9072:	d151      	bne.n	9118 <z_cbvprintf_impl+0x380>
    9074:	07d8      	lsls	r0, r3, #31
    9076:	d55c      	bpl.n	9132 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    9078:	2103      	movs	r1, #3
    907a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    907e:	f361 0302 	bfi	r3, r1, #0, #3
    9082:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    9086:	f002 0378 	and.w	r3, r2, #120	; 0x78
    908a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    908e:	424b      	negs	r3, r1
    9090:	414b      	adcs	r3, r1
    9092:	e01a      	b.n	90ca <z_cbvprintf_impl+0x332>
    9094:	2001      	movs	r0, #1
	switch (conv->specifier) {
    9096:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    909a:	b2c9      	uxtb	r1, r1
    909c:	fa00 f101 	lsl.w	r1, r0, r1
    90a0:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    90a4:	d194      	bne.n	8fd0 <z_cbvprintf_impl+0x238>
    90a6:	f640 0601 	movw	r6, #2049	; 0x801
    90aa:	4231      	tst	r1, r6
    90ac:	d11d      	bne.n	90ea <z_cbvprintf_impl+0x352>
    90ae:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    90b2:	d03e      	beq.n	9132 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    90b4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    90b8:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    90bc:	f002 0278 	and.w	r2, r2, #120	; 0x78
    90c0:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    90c2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    90c6:	d034      	beq.n	9132 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    90c8:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    90ca:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    90ce:	f3c2 0140 	ubfx	r1, r2, #1, #1
    90d2:	430b      	orrs	r3, r1
    90d4:	f363 0241 	bfi	r2, r3, #1, #1
    90d8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    90dc:	e6fd      	b.n	8eda <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    90de:	2102      	movs	r1, #2
    90e0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    90e4:	f361 0302 	bfi	r3, r1, #0, #3
    90e8:	e7e8      	b.n	90bc <z_cbvprintf_impl+0x324>
    90ea:	2002      	movs	r0, #2
    90ec:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    90f0:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    90f4:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    90f8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    90fa:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    90fe:	bf02      	ittt	eq
    9100:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    9104:	f041 0101 	orreq.w	r1, r1, #1
    9108:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    910c:	2b63      	cmp	r3, #99	; 0x63
    910e:	d1db      	bne.n	90c8 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    9110:	1e13      	subs	r3, r2, #0
    9112:	bf18      	it	ne
    9114:	2301      	movne	r3, #1
    9116:	e7d8      	b.n	90ca <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    9118:	2103      	movs	r1, #3
    911a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    911e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    9122:	f361 0302 	bfi	r3, r1, #0, #3
    9126:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    912a:	bf14      	ite	ne
    912c:	2301      	movne	r3, #1
    912e:	2300      	moveq	r3, #0
    9130:	e7cb      	b.n	90ca <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    9132:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9136:	f043 0301 	orr.w	r3, r3, #1
    913a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    913e:	e7c3      	b.n	90c8 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    9140:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    9144:	2a00      	cmp	r2, #0
		int width = -1;
    9146:	bfac      	ite	ge
    9148:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    914c:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
    9150:	e6d5      	b.n	8efe <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    9152:	0798      	lsls	r0, r3, #30
    9154:	f57f aee2 	bpl.w	8f1c <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    9158:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
    915c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    915e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    9162:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
    9166:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
    916a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    916e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    9170:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    9174:	d133      	bne.n	91de <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    9176:	1ecb      	subs	r3, r1, #3
    9178:	2b04      	cmp	r3, #4
    917a:	d804      	bhi.n	9186 <z_cbvprintf_impl+0x3ee>
    917c:	e8df f003 	tbb	[pc, r3]
    9180:	21464621 	.word	0x21464621
    9184:	21          	.byte	0x21
    9185:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    9186:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    9188:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    918a:	ea4f 72e3 	mov.w	r2, r3, asr #31
    918e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    9192:	d11c      	bne.n	91ce <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    9194:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    9198:	17da      	asrs	r2, r3, #31
    919a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    919e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    91a0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    91a4:	f013 0603 	ands.w	r6, r3, #3
    91a8:	d050      	beq.n	924c <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    91aa:	463a      	mov	r2, r7
    91ac:	4659      	mov	r1, fp
    91ae:	4648      	mov	r0, r9
    91b0:	9b03      	ldr	r3, [sp, #12]
    91b2:	f006 fb0c 	bl	f7ce <outs>
    91b6:	2800      	cmp	r0, #0
    91b8:	f2c0 8152 	blt.w	9460 <z_cbvprintf_impl+0x6c8>
    91bc:	4405      	add	r5, r0
			continue;
    91be:	9f03      	ldr	r7, [sp, #12]
    91c0:	e5f2      	b.n	8da8 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    91c2:	f854 3b04 	ldr.w	r3, [r4], #4
    91c6:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    91c8:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    91cc:	e7e8      	b.n	91a0 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    91ce:	2902      	cmp	r1, #2
    91d0:	d1e5      	bne.n	919e <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    91d2:	b21a      	sxth	r2, r3
    91d4:	f343 33c0 	sbfx	r3, r3, #15, #1
    91d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    91dc:	e7df      	b.n	919e <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    91de:	2b02      	cmp	r3, #2
    91e0:	d124      	bne.n	922c <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    91e2:	1ecb      	subs	r3, r1, #3
    91e4:	2b04      	cmp	r3, #4
    91e6:	d804      	bhi.n	91f2 <z_cbvprintf_impl+0x45a>
    91e8:	e8df f003 	tbb	[pc, r3]
    91ec:	18101018 	.word	0x18101018
    91f0:	18          	.byte	0x18
    91f1:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    91f2:	2901      	cmp	r1, #1
    91f4:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    91f8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    91fc:	d014      	beq.n	9228 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    91fe:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    9200:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    9204:	d1cc      	bne.n	91a0 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    9206:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    9208:	930e      	str	r3, [sp, #56]	; 0x38
    920a:	e7c9      	b.n	91a0 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    920c:	3407      	adds	r4, #7
    920e:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    9212:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    9216:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    921a:	e7c1      	b.n	91a0 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    921c:	f854 3b04 	ldr.w	r3, [r4], #4
    9220:	930e      	str	r3, [sp, #56]	; 0x38
    9222:	2300      	movs	r3, #0
    9224:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    9226:	e7bb      	b.n	91a0 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    9228:	b2db      	uxtb	r3, r3
    922a:	e7cd      	b.n	91c8 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    922c:	2b04      	cmp	r3, #4
    922e:	d108      	bne.n	9242 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    9230:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    9232:	f024 0407 	bic.w	r4, r4, #7
    9236:	e9d4 2300 	ldrd	r2, r3, [r4]
    923a:	3408      	adds	r4, #8
    923c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    9240:	e7ae      	b.n	91a0 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    9242:	2b03      	cmp	r3, #3
    9244:	d1ac      	bne.n	91a0 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    9246:	f854 3b04 	ldr.w	r3, [r4], #4
    924a:	e7dd      	b.n	9208 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    924c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    9250:	2878      	cmp	r0, #120	; 0x78
    9252:	d8b4      	bhi.n	91be <z_cbvprintf_impl+0x426>
    9254:	2862      	cmp	r0, #98	; 0x62
    9256:	d81c      	bhi.n	9292 <z_cbvprintf_impl+0x4fa>
    9258:	2825      	cmp	r0, #37	; 0x25
    925a:	f43f adad 	beq.w	8db8 <z_cbvprintf_impl+0x20>
    925e:	2858      	cmp	r0, #88	; 0x58
    9260:	d1ad      	bne.n	91be <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    9262:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    9266:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    926a:	9300      	str	r3, [sp, #0]
    926c:	aa10      	add	r2, sp, #64	; 0x40
    926e:	ab08      	add	r3, sp, #32
    9270:	f006 fa67 	bl	f742 <encode_uint>
			if (precision >= 0) {
    9274:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    9278:	4607      	mov	r7, r0
			if (precision >= 0) {
    927a:	f280 8099 	bge.w	93b0 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    927e:	2f00      	cmp	r7, #0
    9280:	d09d      	beq.n	91be <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    9282:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9286:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    9288:	2e00      	cmp	r6, #0
    928a:	f000 80c0 	beq.w	940e <z_cbvprintf_impl+0x676>
			nj_len += 1U;
    928e:	3001      	adds	r0, #1
    9290:	e0bd      	b.n	940e <z_cbvprintf_impl+0x676>
		switch (conv->specifier) {
    9292:	3863      	subs	r0, #99	; 0x63
    9294:	2815      	cmp	r0, #21
    9296:	d892      	bhi.n	91be <z_cbvprintf_impl+0x426>
    9298:	a201      	add	r2, pc, #4	; (adr r2, 92a0 <z_cbvprintf_impl+0x508>)
    929a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    929e:	bf00      	nop
    92a0:	00009375 	.word	0x00009375
    92a4:	00009387 	.word	0x00009387
    92a8:	000091bf 	.word	0x000091bf
    92ac:	000091bf 	.word	0x000091bf
    92b0:	000091bf 	.word	0x000091bf
    92b4:	000091bf 	.word	0x000091bf
    92b8:	00009387 	.word	0x00009387
    92bc:	000091bf 	.word	0x000091bf
    92c0:	000091bf 	.word	0x000091bf
    92c4:	000091bf 	.word	0x000091bf
    92c8:	000091bf 	.word	0x000091bf
    92cc:	00009413 	.word	0x00009413
    92d0:	000093ab 	.word	0x000093ab
    92d4:	000093d1 	.word	0x000093d1
    92d8:	000091bf 	.word	0x000091bf
    92dc:	000091bf 	.word	0x000091bf
    92e0:	000092f9 	.word	0x000092f9
    92e4:	000091bf 	.word	0x000091bf
    92e8:	000093ab 	.word	0x000093ab
    92ec:	000091bf 	.word	0x000091bf
    92f0:	000091bf 	.word	0x000091bf
    92f4:	000093ab 	.word	0x000093ab
			if (precision >= 0) {
    92f8:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    92fc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    92fe:	db35      	blt.n	936c <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    9300:	4651      	mov	r1, sl
    9302:	4638      	mov	r0, r7
    9304:	f006 fd0c 	bl	fd20 <strnlen>
			bpe = bps + len;
    9308:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    930c:	2f00      	cmp	r7, #0
    930e:	f43f af56 	beq.w	91be <z_cbvprintf_impl+0x426>
		char sign = 0;
    9312:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    9314:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9318:	f013 0210 	ands.w	r2, r3, #16
    931c:	9205      	str	r2, [sp, #20]
    931e:	f000 8092 	beq.w	9446 <z_cbvprintf_impl+0x6ae>
			nj_len += 2U;
    9322:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    9324:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    9326:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    9328:	bf48      	it	mi
    932a:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    932c:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    932e:	bf48      	it	mi
    9330:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    9332:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
    9336:	9204      	str	r2, [sp, #16]
		if (width > 0) {
    9338:	f340 809f 	ble.w	947a <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
    933c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    9340:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    9344:	f3c2 0380 	ubfx	r3, r2, #2, #1
    9348:	0750      	lsls	r0, r2, #29
    934a:	9306      	str	r3, [sp, #24]
    934c:	f100 8095 	bmi.w	947a <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
    9350:	0651      	lsls	r1, r2, #25
    9352:	f140 8088 	bpl.w	9466 <z_cbvprintf_impl+0x6ce>
					if (sign != 0) {
    9356:	b13e      	cbz	r6, 9368 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    9358:	4659      	mov	r1, fp
    935a:	4630      	mov	r0, r6
    935c:	47c8      	blx	r9
    935e:	2800      	cmp	r0, #0
    9360:	db7e      	blt.n	9460 <z_cbvprintf_impl+0x6c8>
    9362:	9b06      	ldr	r3, [sp, #24]
    9364:	3501      	adds	r5, #1
    9366:	461e      	mov	r6, r3
					pad = '0';
    9368:	2230      	movs	r2, #48	; 0x30
    936a:	e07d      	b.n	9468 <z_cbvprintf_impl+0x6d0>
				len = strlen(bps);
    936c:	4638      	mov	r0, r7
    936e:	f006 fcd0 	bl	fd12 <strlen>
    9372:	e7c9      	b.n	9308 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    9374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
    9376:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    9378:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    937a:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
    937e:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    9380:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
    9384:	e7c6      	b.n	9314 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    9386:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    9388:	bf5a      	itte	pl
    938a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    938e:	015e      	lslpl	r6, r3, #5
				sign = '+';
    9390:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    9392:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
    9396:	2b00      	cmp	r3, #0
    9398:	f6bf af63 	bge.w	9262 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    939c:	4252      	negs	r2, r2
    939e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    93a2:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    93a4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    93a8:	e75b      	b.n	9262 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    93aa:	2600      	movs	r6, #0
    93ac:	e759      	b.n	9262 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    93ae:	2600      	movs	r6, #0
				conv->flag_zero = false;
    93b0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    93b4:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    93b8:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    93ba:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    93be:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    93c0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    93c4:	f67f af5b 	bls.w	927e <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    93c8:	ebaa 0303 	sub.w	r3, sl, r3
    93cc:	9311      	str	r3, [sp, #68]	; 0x44
    93ce:	e756      	b.n	927e <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    93d0:	980e      	ldr	r0, [sp, #56]	; 0x38
    93d2:	b390      	cbz	r0, 943a <z_cbvprintf_impl+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    93d4:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    93d8:	9300      	str	r3, [sp, #0]
    93da:	2100      	movs	r1, #0
    93dc:	ab08      	add	r3, sp, #32
    93de:	aa10      	add	r2, sp, #64	; 0x40
    93e0:	f006 f9af 	bl	f742 <encode_uint>
				conv->altform_0c = true;
    93e4:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    93e8:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
    93ec:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    93f0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    93f4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    93f8:	4607      	mov	r7, r0
				conv->altform_0c = true;
    93fa:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    93fe:	dad6      	bge.n	93ae <z_cbvprintf_impl+0x616>
		if (bps == NULL) {
    9400:	2800      	cmp	r0, #0
    9402:	f43f aedc 	beq.w	91be <z_cbvprintf_impl+0x426>
		char sign = 0;
    9406:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    9408:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    940c:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
    940e:	469a      	mov	sl, r3
    9410:	e780      	b.n	9314 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    9412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    9414:	2907      	cmp	r1, #7
    9416:	f63f aed2 	bhi.w	91be <z_cbvprintf_impl+0x426>
    941a:	e8df f001 	tbb	[pc, r1]
    941e:	040c      	.short	0x040c
    9420:	08080c06 	.word	0x08080c06
    9424:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    9426:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    9428:	e6c9      	b.n	91be <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    942a:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    942c:	e6c7      	b.n	91be <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    942e:	17ea      	asrs	r2, r5, #31
    9430:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    9434:	e6c3      	b.n	91be <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    9436:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    9438:	e6c1      	b.n	91be <z_cbvprintf_impl+0x426>
    943a:	4f2f      	ldr	r7, [pc, #188]	; (94f8 <z_cbvprintf_impl+0x760>)
		char sign = 0;
    943c:	4606      	mov	r6, r0
			bpe = bps + 5;
    943e:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    9442:	2005      	movs	r0, #5
    9444:	e766      	b.n	9314 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    9446:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    9448:	bf48      	it	mi
    944a:	3001      	addmi	r0, #1
    944c:	e76a      	b.n	9324 <z_cbvprintf_impl+0x58c>
					OUTC(pad);
    944e:	4610      	mov	r0, r2
    9450:	9307      	str	r3, [sp, #28]
    9452:	9206      	str	r2, [sp, #24]
    9454:	4659      	mov	r1, fp
    9456:	47c8      	blx	r9
    9458:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    945c:	2800      	cmp	r0, #0
    945e:	da04      	bge.n	946a <z_cbvprintf_impl+0x6d2>
#undef OUTS
#undef OUTC
}
    9460:	b015      	add	sp, #84	; 0x54
    9462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    9466:	2220      	movs	r2, #32
					pad = '0';
    9468:	4643      	mov	r3, r8
				while (width-- > 0) {
    946a:	4619      	mov	r1, r3
    946c:	2900      	cmp	r1, #0
    946e:	f103 33ff 	add.w	r3, r3, #4294967295
    9472:	dcec      	bgt.n	944e <z_cbvprintf_impl+0x6b6>
    9474:	4445      	add	r5, r8
    9476:	4698      	mov	r8, r3
    9478:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    947a:	b12e      	cbz	r6, 9488 <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
    947c:	4659      	mov	r1, fp
    947e:	4630      	mov	r0, r6
    9480:	47c8      	blx	r9
    9482:	2800      	cmp	r0, #0
    9484:	dbec      	blt.n	9460 <z_cbvprintf_impl+0x6c8>
    9486:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    9488:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    948c:	06da      	lsls	r2, r3, #27
    948e:	d401      	bmi.n	9494 <z_cbvprintf_impl+0x6fc>
    9490:	071b      	lsls	r3, r3, #28
    9492:	d505      	bpl.n	94a0 <z_cbvprintf_impl+0x708>
				OUTC('0');
    9494:	4659      	mov	r1, fp
    9496:	2030      	movs	r0, #48	; 0x30
    9498:	47c8      	blx	r9
    949a:	2800      	cmp	r0, #0
    949c:	dbe0      	blt.n	9460 <z_cbvprintf_impl+0x6c8>
    949e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    94a0:	9b05      	ldr	r3, [sp, #20]
    94a2:	b133      	cbz	r3, 94b2 <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
    94a4:	4659      	mov	r1, fp
    94a6:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    94aa:	47c8      	blx	r9
    94ac:	2800      	cmp	r0, #0
    94ae:	dbd7      	blt.n	9460 <z_cbvprintf_impl+0x6c8>
    94b0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    94b2:	9e04      	ldr	r6, [sp, #16]
    94b4:	442e      	add	r6, r5
    94b6:	e005      	b.n	94c4 <z_cbvprintf_impl+0x72c>
				OUTC('0');
    94b8:	4659      	mov	r1, fp
    94ba:	2030      	movs	r0, #48	; 0x30
    94bc:	47c8      	blx	r9
    94be:	2800      	cmp	r0, #0
    94c0:	dbce      	blt.n	9460 <z_cbvprintf_impl+0x6c8>
    94c2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    94c4:	1b73      	subs	r3, r6, r5
    94c6:	2b00      	cmp	r3, #0
    94c8:	dcf6      	bgt.n	94b8 <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
    94ca:	4653      	mov	r3, sl
    94cc:	463a      	mov	r2, r7
    94ce:	4659      	mov	r1, fp
    94d0:	4648      	mov	r0, r9
    94d2:	f006 f97c 	bl	f7ce <outs>
    94d6:	2800      	cmp	r0, #0
    94d8:	dbc2      	blt.n	9460 <z_cbvprintf_impl+0x6c8>
    94da:	4405      	add	r5, r0
		while (width > 0) {
    94dc:	44a8      	add	r8, r5
    94de:	eba8 0305 	sub.w	r3, r8, r5
    94e2:	2b00      	cmp	r3, #0
    94e4:	f77f ae6b 	ble.w	91be <z_cbvprintf_impl+0x426>
			OUTC(' ');
    94e8:	4659      	mov	r1, fp
    94ea:	2020      	movs	r0, #32
    94ec:	47c8      	blx	r9
    94ee:	2800      	cmp	r0, #0
    94f0:	dbb6      	blt.n	9460 <z_cbvprintf_impl+0x6c8>
    94f2:	3501      	adds	r5, #1
			--width;
    94f4:	e7f3      	b.n	94de <z_cbvprintf_impl+0x746>
    94f6:	bf00      	nop
    94f8:	00010e51 	.word	0x00010e51

000094fc <z_arm_on_enter_cpu_idle>:
		DIV_ROUND_UP(200 * CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				 1000000);
	static uint32_t timestamps[5];
	static bool timestamps_filled;
	static uint8_t current;
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    94fc:	2305      	movs	r3, #5

	return true;
}

bool z_arm_on_enter_cpu_idle(void)
{
    94fe:	b570      	push	{r4, r5, r6, lr}
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    9500:	4d14      	ldr	r5, [pc, #80]	; (9554 <z_arm_on_enter_cpu_idle+0x58>)
    9502:	4e15      	ldr	r6, [pc, #84]	; (9558 <z_arm_on_enter_cpu_idle+0x5c>)
    9504:	782c      	ldrb	r4, [r5, #0]
    9506:	3401      	adds	r4, #1
    9508:	fbb4 f3f3 	udiv	r3, r4, r3
    950c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9510:	1ae4      	subs	r4, r4, r3
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    9512:	f006 feac 	bl	1026e <sys_clock_cycle_get_32>
	if (timestamps_filled &&
    9516:	4a11      	ldr	r2, [pc, #68]	; (955c <z_arm_on_enter_cpu_idle+0x60>)
    9518:	7813      	ldrb	r3, [r2, #0]
    951a:	b123      	cbz	r3, 9526 <z_arm_on_enter_cpu_idle+0x2a>
	    (now - timestamps[oldest]) < (window_cycles + 1)) {
    951c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    9520:	1ac0      	subs	r0, r0, r3
	if (timestamps_filled &&
    9522:	2807      	cmp	r0, #7
    9524:	d913      	bls.n	954e <z_arm_on_enter_cpu_idle+0x52>
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_power_event_check(NRF_POWER_Type const * p_reg, nrf_power_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9526:	4b0e      	ldr	r3, [pc, #56]	; (9560 <z_arm_on_enter_cpu_idle+0x64>)
    9528:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
	if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER)) {
    952c:	b141      	cbz	r1, 9540 <z_arm_on_enter_cpu_idle+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    952e:	2100      	movs	r1, #0
    9530:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    9534:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    9538:	702c      	strb	r4, [r5, #0]
		if (current == 0) {
    953a:	b90c      	cbnz	r4, 9540 <z_arm_on_enter_cpu_idle+0x44>
			timestamps_filled = true;
    953c:	2301      	movs	r3, #1
    953e:	7013      	strb	r3, [r2, #0]
	timestamps[current] = k_cycle_get_32();
    9540:	782c      	ldrb	r4, [r5, #0]
    9542:	f006 fe94 	bl	1026e <sys_clock_cycle_get_32>
    9546:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
	return true;
    954a:	2001      	movs	r0, #1
		suppress_message = true;
	}
#endif

	return ok_to_sleep;
}
    954c:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    954e:	2000      	movs	r0, #0
    9550:	e7fc      	b.n	954c <z_arm_on_enter_cpu_idle+0x50>
    9552:	bf00      	nop
    9554:	2000854e 	.word	0x2000854e
    9558:	200082d8 	.word	0x200082d8
    955c:	2000854d 	.word	0x2000854d
    9560:	40005000 	.word	0x40005000

00009564 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    9564:	b148      	cbz	r0, 957a <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    9566:	4b05      	ldr	r3, [pc, #20]	; (957c <arch_busy_wait+0x18>)
    9568:	4a05      	ldr	r2, [pc, #20]	; (9580 <arch_busy_wait+0x1c>)
    956a:	681b      	ldr	r3, [r3, #0]
    956c:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    9570:	4358      	muls	r0, r3
    9572:	4b04      	ldr	r3, [pc, #16]	; (9584 <arch_busy_wait+0x20>)
    9574:	f043 0301 	orr.w	r3, r3, #1
    9578:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    957a:	4770      	bx	lr
    957c:	200080a0 	.word	0x200080a0
    9580:	000f4240 	.word	0x000f4240
    9584:	00010a30 	.word	0x00010a30

00009588 <z_log_msg_runtime_create.constprop.0>:
 *
 * @param fmt String.
 *
 * @param ... String arguments.
 */
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    9588:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
					     size_t dlen, uint32_t package_flags,
					     const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
    958a:	ab0b      	add	r3, sp, #44	; 0x2c
    958c:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    958e:	9303      	str	r3, [sp, #12]
    9590:	4b05      	ldr	r3, [pc, #20]	; (95a8 <z_log_msg_runtime_create.constprop.0+0x20>)
    9592:	2201      	movs	r2, #1
    9594:	9302      	str	r3, [sp, #8]
    9596:	2300      	movs	r3, #0
    9598:	4618      	mov	r0, r3
    959a:	e9cd 3300 	strd	r3, r3, [sp]
    959e:	f000 fe71 	bl	a284 <z_impl_z_log_msg_runtime_vcreate>
	z_log_msg_runtime_vcreate(domain_id, source, level,
				   data, dlen, package_flags, fmt, ap);
	va_end(ap);
}
    95a2:	b007      	add	sp, #28
    95a4:	f85d fb04 	ldr.w	pc, [sp], #4
    95a8:	00010e5b 	.word	0x00010e5b

000095ac <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(void)
{
    95ac:	b570      	push	{r4, r5, r6, lr}
    95ae:	b086      	sub	sp, #24
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    95b0:	a805      	add	r0, sp, #20
    95b2:	f004 f8ad 	bl	d710 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    95b6:	4b28      	ldr	r3, [pc, #160]	; (9658 <sync_rtc_setup+0xac>)
    95b8:	4298      	cmp	r0, r3
    95ba:	d149      	bne.n	9650 <sync_rtc_setup+0xa4>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    95bc:	f003 fdb8 	bl	d130 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    95c0:	1e04      	subs	r4, r0, #0
    95c2:	da0f      	bge.n	95e4 <sync_rtc_setup+0x38>
		nrfx_dppi_channel_free(channels.ch.ppi);
    95c4:	f89d 0014 	ldrb.w	r0, [sp, #20]
    95c8:	f004 f8a8 	bl	d71c <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    95cc:	4b23      	ldr	r3, [pc, #140]	; (965c <sync_rtc_setup+0xb0>)
    95ce:	2201      	movs	r2, #1
    95d0:	9302      	str	r3, [sp, #8]
    95d2:	2300      	movs	r3, #0
    95d4:	4922      	ldr	r1, [pc, #136]	; (9660 <sync_rtc_setup+0xb4>)
    95d6:	4618      	mov	r0, r3
    95d8:	e9cd 3300 	strd	r3, r3, [sp]
    95dc:	9403      	str	r4, [sp, #12]
    95de:	f7ff ffd3 	bl	9588 <z_log_msg_runtime_create.constprop.0>
	}

	return rv;
    95e2:	e032      	b.n	964a <sync_rtc_setup+0x9e>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    95e4:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    95e8:	4d1e      	ldr	r5, [pc, #120]	; (9664 <sync_rtc_setup+0xb8>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    95ea:	f88d 4015 	strb.w	r4, [sp, #21]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    95ee:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    95f0:	f8ad 3016 	strh.w	r3, [sp, #22]
    95f4:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    95f6:	9b05      	ldr	r3, [sp, #20]
    95f8:	b914      	cbnz	r4, 9600 <sync_rtc_setup+0x54>
		return -ENOSYS;
    95fa:	f06f 0457 	mvn.w	r4, #87	; 0x57
    95fe:	e7e5      	b.n	95cc <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    9600:	2108      	movs	r1, #8
    9602:	4628      	mov	r0, r5
    9604:	4a18      	ldr	r2, [pc, #96]	; (9668 <sync_rtc_setup+0xbc>)
    9606:	47a0      	blx	r4
	if (err < 0) {
    9608:	1e04      	subs	r4, r0, #0
    960a:	dbdf      	blt.n	95cc <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    960c:	6933      	ldr	r3, [r6, #16]
    960e:	2b00      	cmp	r3, #0
    9610:	d0f3      	beq.n	95fa <sync_rtc_setup+0x4e>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    9612:	2201      	movs	r2, #1
    9614:	2108      	movs	r1, #8
    9616:	4628      	mov	r0, r5
    9618:	4798      	blx	r3
	if (rv < 0) {
    961a:	1e04      	subs	r4, r0, #0
    961c:	dbd6      	blt.n	95cc <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    961e:	2301      	movs	r3, #1
    9620:	f89d 5014 	ldrb.w	r5, [sp, #20]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    9624:	4a11      	ldr	r2, [pc, #68]	; (966c <sync_rtc_setup+0xc0>)
    9626:	40ab      	lsls	r3, r5
    9628:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    962c:	f89d 0015 	ldrb.w	r0, [sp, #21]
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    9630:	f89d 6017 	ldrb.w	r6, [sp, #23]
    9634:	f006 fe10 	bl	10258 <z_nrf_rtc_timer_capture_task_address_get>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    9638:	4b0d      	ldr	r3, [pc, #52]	; (9670 <sync_rtc_setup+0xc4>)
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    963a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    963e:	00b6      	lsls	r6, r6, #2
    9640:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    9644:	519d      	str	r5, [r3, r6]
	if (rv != 0) {
    9646:	2c00      	cmp	r4, #0
    9648:	d1c0      	bne.n	95cc <sync_rtc_setup+0x20>
}
    964a:	4620      	mov	r0, r4
    964c:	b006      	add	sp, #24
    964e:	bd70      	pop	{r4, r5, r6, pc}
		rv = -ENODEV;
    9650:	f06f 0412 	mvn.w	r4, #18
    9654:	e7ba      	b.n	95cc <sync_rtc_setup+0x20>
    9656:	bf00      	nop
    9658:	0bad0000 	.word	0x0bad0000
    965c:	00010e5b 	.word	0x00010e5b
    9660:	000109f4 	.word	0x000109f4
    9664:	000106d4 	.word	0x000106d4
    9668:	000096b9 	.word	0x000096b9
    966c:	40017000 	.word	0x40017000
    9670:	4002a180 	.word	0x4002a180

00009674 <rtc_cb>:
{
    9674:	b538      	push	{r3, r4, r5, lr}
    9676:	9c04      	ldr	r4, [sp, #16]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    9678:	f3c4 2507 	ubfx	r5, r4, #8, #8
    967c:	4628      	mov	r0, r5
    967e:	f003 fbc9 	bl	ce14 <z_nrf_rtc_timer_compare_evt_address_get>

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    9682:	2100      	movs	r1, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    9684:	4b0a      	ldr	r3, [pc, #40]	; (96b0 <rtc_cb+0x3c>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    9686:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    9688:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    968c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    9690:	5099      	str	r1, [r3, r2]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    9692:	2301      	movs	r3, #1
    9694:	b2e4      	uxtb	r4, r4
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    9696:	4a07      	ldr	r2, [pc, #28]	; (96b4 <rtc_cb+0x40>)
    9698:	40a3      	lsls	r3, r4
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    969a:	4628      	mov	r0, r5
    969c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    96a0:	f003 fd64 	bl	d16c <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    96a4:	4620      	mov	r0, r4
}
    96a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    96aa:	f004 b837 	b.w	d71c <nrfx_dppi_channel_free>
    96ae:	bf00      	nop
    96b0:	4002a080 	.word	0x4002a080
    96b4:	40017000 	.word	0x40017000

000096b8 <mbox_callback>:
{
    96b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    96ba:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    96bc:	6883      	ldr	r3, [r0, #8]
    96be:	691b      	ldr	r3, [r3, #16]
    96c0:	b10b      	cbz	r3, 96c6 <mbox_callback+0xe>
	return api->set_enabled(channel->dev, channel->id, enable);
    96c2:	2200      	movs	r2, #0
    96c4:	4798      	blx	r3
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    96c6:	f3c4 2607 	ubfx	r6, r4, #8, #8
    96ca:	4630      	mov	r0, r6
    96cc:	f003 fbaa 	bl	ce24 <z_nrf_rtc_timer_compare_read>
    96d0:	4605      	mov	r5, r0
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    96d2:	4630      	mov	r0, r6
    96d4:	f006 fdc0 	bl	10258 <z_nrf_rtc_timer_capture_task_address_get>

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    96d8:	2700      	movs	r7, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    96da:	4b10      	ldr	r3, [pc, #64]	; (971c <mbox_callback+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    96dc:	0e22      	lsrs	r2, r4, #24
    96de:	0092      	lsls	r2, r2, #2
    96e0:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    96e4:	509f      	str	r7, [r3, r2]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    96e6:	4630      	mov	r0, r6
    96e8:	f003 fb94 	bl	ce14 <z_nrf_rtc_timer_compare_evt_address_get>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    96ec:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    96ee:	4b0c      	ldr	r3, [pc, #48]	; (9720 <mbox_callback+0x68>)
    96f0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    96f4:	4413      	add	r3, r2
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    96f6:	b2e2      	uxtb	r2, r4
    96f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    96fc:	601a      	str	r2, [r3, #0]
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    96fe:	4b09      	ldr	r3, [pc, #36]	; (9724 <mbox_callback+0x6c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    9700:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    9704:	f105 0232 	add.w	r2, r5, #50	; 0x32
    9708:	9300      	str	r3, [sp, #0]
    970a:	4630      	mov	r0, r6
    970c:	463b      	mov	r3, r7
    970e:	9401      	str	r4, [sp, #4]
    9710:	0052      	lsls	r2, r2, #1
    9712:	f006 fdaa 	bl	1026a <z_nrf_rtc_timer_set>
}
    9716:	b003      	add	sp, #12
    9718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    971a:	bf00      	nop
    971c:	4002a180 	.word	0x4002a180
    9720:	4002a080 	.word	0x4002a080
    9724:	00009675 	.word	0x00009675

00009728 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    9728:	f006 bdc1 	b.w	102ae <SystemInit>

0000972c <nvs_flash_erase_sector>:

/* erase a sector and verify erase was OK.
 * return 0 if OK, errorcode on error.
 */
static int nvs_flash_erase_sector(struct nvs_fs *fs, uint32_t addr)
{
    972c:	b570      	push	{r4, r5, r6, lr}
	off_t offset;

	addr &= ADDR_SECT_MASK;

	offset = fs->offset;
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    972e:	8983      	ldrh	r3, [r0, #12]
    9730:	6805      	ldr	r5, [r0, #0]
	addr &= ADDR_SECT_MASK;
    9732:	0c0e      	lsrs	r6, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    9734:	0c09      	lsrs	r1, r1, #16
    9736:	fb03 5501 	mla	r5, r3, r1, r5
{
    973a:	b086      	sub	sp, #24

	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    973c:	e9cd 5304 	strd	r5, r3, [sp, #16]
    9740:	4b11      	ldr	r3, [pc, #68]	; (9788 <nvs_flash_erase_sector+0x5c>)
    9742:	2208      	movs	r2, #8
    9744:	9303      	str	r3, [sp, #12]
    9746:	4b11      	ldr	r3, [pc, #68]	; (978c <nvs_flash_erase_sector+0x60>)
{
    9748:	4604      	mov	r4, r0
	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    974a:	9302      	str	r3, [sp, #8]
    974c:	2300      	movs	r3, #0
    974e:	4910      	ldr	r1, [pc, #64]	; (9790 <nvs_flash_erase_sector+0x64>)
    9750:	4618      	mov	r0, r3
    9752:	e9cd 3200 	strd	r3, r2, [sp]
    9756:	2204      	movs	r2, #4
    9758:	f006 f90a 	bl	f970 <z_log_msg_runtime_create.constprop.0>
	addr &= ADDR_SECT_MASK;
    975c:	0436      	lsls	r6, r6, #16
		fs->sector_size);

#ifdef CONFIG_NVS_LOOKUP_CACHE
	nvs_lookup_cache_invalidate(fs, addr >> ADDR_SECT_SHIFT);
#endif
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
    975e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    9760:	89a2      	ldrh	r2, [r4, #12]
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    9762:	6883      	ldr	r3, [r0, #8]
    9764:	4629      	mov	r1, r5
    9766:	689b      	ldr	r3, [r3, #8]
    9768:	4798      	blx	r3

	if (rc) {
    976a:	b950      	cbnz	r0, 9782 <nvs_flash_erase_sector+0x56>
		return rc;
	}

	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
    976c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    976e:	4631      	mov	r1, r6
    9770:	4620      	mov	r0, r4
    9772:	89a3      	ldrh	r3, [r4, #12]
    9774:	7912      	ldrb	r2, [r2, #4]
    9776:	f006 f8cd 	bl	f914 <nvs_flash_cmp_const>
			fs->sector_size)) {
		rc = -ENXIO;
    977a:	2800      	cmp	r0, #0
    977c:	bf18      	it	ne
    977e:	f06f 0005 	mvnne.w	r0, #5
	}

	return rc;
}
    9782:	b006      	add	sp, #24
    9784:	bd70      	pop	{r4, r5, r6, pc}
    9786:	bf00      	nop
    9788:	0001104f 	.word	0x0001104f
    978c:	00010e8c 	.word	0x00010e8c
    9790:	00010994 	.word	0x00010994

00009794 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    9794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t data_end_addr, ate_end_addr;
	struct nvs_ate end_ate;
	size_t ate_size;
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
    9798:	884b      	ldrh	r3, [r1, #2]
{
    979a:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Recovering last ate from sector %d",
    979c:	9304      	str	r3, [sp, #16]
    979e:	4b1d      	ldr	r3, [pc, #116]	; (9814 <nvs_recover_last_ate+0x80>)
    97a0:	2408      	movs	r4, #8
    97a2:	9303      	str	r3, [sp, #12]
    97a4:	4b1c      	ldr	r3, [pc, #112]	; (9818 <nvs_recover_last_ate+0x84>)
{
    97a6:	4607      	mov	r7, r0
	LOG_DBG("Recovering last ate from sector %d",
    97a8:	9302      	str	r3, [sp, #8]
    97aa:	2300      	movs	r3, #0
{
    97ac:	460d      	mov	r5, r1
	LOG_DBG("Recovering last ate from sector %d",
    97ae:	4618      	mov	r0, r3
    97b0:	e9cd 3400 	strd	r3, r4, [sp]
    97b4:	4919      	ldr	r1, [pc, #100]	; (981c <nvs_recover_last_ate+0x88>)
    97b6:	2204      	movs	r2, #4
    97b8:	f006 f8da 	bl	f970 <z_log_msg_runtime_create.constprop.0>
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    97bc:	4621      	mov	r1, r4
    97be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    97c0:	f006 f8e6 	bl	f990 <nvs_al_size.isra.0>
    97c4:	4680      	mov	r8, r0

	*addr -= ate_size;
    97c6:	682c      	ldr	r4, [r5, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    97c8:	f8df 9054 	ldr.w	r9, [pc, #84]	; 9820 <nvs_recover_last_ate+0x8c>
	*addr -= ate_size;
    97cc:	1a24      	subs	r4, r4, r0
    97ce:	602c      	str	r4, [r5, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    97d0:	ea04 0609 	and.w	r6, r4, r9
	while (ate_end_addr > data_end_addr) {
    97d4:	42b4      	cmp	r4, r6
    97d6:	d803      	bhi.n	97e0 <nvs_recover_last_ate+0x4c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    97d8:	2000      	movs	r0, #0
}
    97da:	b009      	add	sp, #36	; 0x24
    97dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    97e0:	2308      	movs	r3, #8
    97e2:	4621      	mov	r1, r4
    97e4:	4638      	mov	r0, r7
    97e6:	aa06      	add	r2, sp, #24
    97e8:	f006 f84f 	bl	f88a <nvs_flash_rd>
		if (rc) {
    97ec:	2800      	cmp	r0, #0
    97ee:	d1f4      	bne.n	97da <nvs_recover_last_ate+0x46>
		if (nvs_ate_valid(fs, &end_ate)) {
    97f0:	4638      	mov	r0, r7
    97f2:	a906      	add	r1, sp, #24
    97f4:	f006 f8d6 	bl	f9a4 <nvs_ate_valid>
    97f8:	b140      	cbz	r0, 980c <nvs_recover_last_ate+0x78>
			data_end_addr += end_ate.offset + end_ate.len;
    97fa:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    97fe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
			data_end_addr &= ADDR_SECT_MASK;
    9802:	ea06 0609 	and.w	r6, r6, r9
			data_end_addr += end_ate.offset + end_ate.len;
    9806:	4413      	add	r3, r2
    9808:	441e      	add	r6, r3
			*addr = ate_end_addr;
    980a:	602c      	str	r4, [r5, #0]
		ate_end_addr -= ate_size;
    980c:	eba4 0408 	sub.w	r4, r4, r8
    9810:	e7e0      	b.n	97d4 <nvs_recover_last_ate+0x40>
    9812:	bf00      	nop
    9814:	0001103a 	.word	0x0001103a
    9818:	00010ead 	.word	0x00010ead
    981c:	00010994 	.word	0x00010994
    9820:	ffff0000 	.word	0xffff0000

00009824 <nvs_add_gc_done_ate>:

	return 0;
}

static int nvs_add_gc_done_ate(struct nvs_fs *fs)
{
    9824:	b530      	push	{r4, r5, lr}
	struct nvs_ate gc_done_ate;

	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    9826:	8883      	ldrh	r3, [r0, #4]
{
    9828:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    982a:	9304      	str	r3, [sp, #16]
    982c:	4b10      	ldr	r3, [pc, #64]	; (9870 <nvs_add_gc_done_ate+0x4c>)
    982e:	2500      	movs	r5, #0
    9830:	9303      	str	r3, [sp, #12]
    9832:	4b10      	ldr	r3, [pc, #64]	; (9874 <nvs_add_gc_done_ate+0x50>)
{
    9834:	4604      	mov	r4, r0
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    9836:	9302      	str	r3, [sp, #8]
    9838:	2308      	movs	r3, #8
    983a:	2204      	movs	r2, #4
    983c:	4628      	mov	r0, r5
    983e:	e9cd 5300 	strd	r5, r3, [sp]
    9842:	490d      	ldr	r1, [pc, #52]	; (9878 <nvs_add_gc_done_ate+0x54>)
    9844:	462b      	mov	r3, r5
    9846:	f006 f893 	bl	f970 <z_log_msg_runtime_create.constprop.0>
	gc_done_ate.id = 0xffff;
    984a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    984e:	f8ad 3018 	strh.w	r3, [sp, #24]
	gc_done_ate.len = 0U;
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    9852:	68a3      	ldr	r3, [r4, #8]
	nvs_ate_crc8_update(&gc_done_ate);
    9854:	a806      	add	r0, sp, #24
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    9856:	f8ad 301a 	strh.w	r3, [sp, #26]
	gc_done_ate.len = 0U;
    985a:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&gc_done_ate);
    985e:	f006 f87e 	bl	f95e <nvs_ate_crc8_update>

	return nvs_flash_ate_wrt(fs, &gc_done_ate);
    9862:	4620      	mov	r0, r4
    9864:	a906      	add	r1, sp, #24
    9866:	f006 f959 	bl	fb1c <nvs_flash_ate_wrt>
}
    986a:	b009      	add	sp, #36	; 0x24
    986c:	bd30      	pop	{r4, r5, pc}
    986e:	bf00      	nop
    9870:	0001101f 	.word	0x0001101f
    9874:	00010ed4 	.word	0x00010ed4
    9878:	00010994 	.word	0x00010994

0000987c <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    9880:	2108      	movs	r1, #8
{
    9882:	b09b      	sub	sp, #108	; 0x6c
    9884:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    9886:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    9888:	f006 f882 	bl	f990 <nvs_al_size.isra.0>
    988c:	4605      	mov	r5, r0

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    988e:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
    9890:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    9892:	0c1b      	lsrs	r3, r3, #16
    9894:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
    9896:	a909      	add	r1, sp, #36	; 0x24
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    9898:	9309      	str	r3, [sp, #36]	; 0x24
	nvs_sector_advance(fs, &sec_addr);
    989a:	f006 f804 	bl	f8a6 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    989e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    98a2:	89a6      	ldrh	r6, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    98a4:	aa0c      	add	r2, sp, #48	; 0x30
	gc_addr = sec_addr + fs->sector_size - ate_size;
    98a6:	445e      	add	r6, fp
    98a8:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    98aa:	2308      	movs	r3, #8
    98ac:	4631      	mov	r1, r6
    98ae:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    98b0:	960a      	str	r6, [sp, #40]	; 0x28
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    98b2:	f005 ffea 	bl	f88a <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    98b6:	1e02      	subs	r2, r0, #0
    98b8:	f2c0 80bb 	blt.w	9a32 <nvs_gc+0x1b6>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    98bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    98be:	aa0c      	add	r2, sp, #48	; 0x30
    98c0:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    98c2:	2300      	movs	r3, #0
		if (data8[i] != value) {
    98c4:	f812 0b01 	ldrb.w	r0, [r2], #1
    98c8:	4281      	cmp	r1, r0
    98ca:	f040 80a1 	bne.w	9a10 <nvs_gc+0x194>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    98ce:	3301      	adds	r3, #1
    98d0:	2b08      	cmp	r3, #8
    98d2:	d1f7      	bne.n	98c4 <nvs_gc+0x48>
	 * gc done ate to the sector. In the field we might have nvs systems
	 * that do not have sufficient space to add this ate, so for these
	 * situations avoid adding the gc done ate.
	 */

	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
    98d4:	68a3      	ldr	r3, [r4, #8]
    98d6:	6862      	ldr	r2, [r4, #4]
    98d8:	442b      	add	r3, r5
    98da:	429a      	cmp	r2, r3
    98dc:	f080 8090 	bcs.w	9a00 <nvs_gc+0x184>
			return rc;
		}
	}

	/* Erase the gc'ed sector */
	rc = nvs_flash_erase_sector(fs, sec_addr);
    98e0:	4659      	mov	r1, fp
    98e2:	4620      	mov	r0, r4
    98e4:	f7ff ff22 	bl	972c <nvs_flash_erase_sector>
    98e8:	4602      	mov	r2, r0
	if (rc) {
    98ea:	e0a2      	b.n	9a32 <nvs_gc+0x1b6>
		gc_addr += close_ate.offset;
    98ec:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
		gc_addr &= ADDR_SECT_MASK;
    98f0:	0c36      	lsrs	r6, r6, #16
    98f2:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
    98f4:	441e      	add	r6, r3
    98f6:	960a      	str	r6, [sp, #40]	; 0x28
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    98f8:	aa0e      	add	r2, sp, #56	; 0x38
    98fa:	4620      	mov	r0, r4
    98fc:	a90a      	add	r1, sp, #40	; 0x28
		gc_prev_addr = gc_addr;
    98fe:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    9902:	f006 f887 	bl	fa14 <nvs_prev_ate>
		if (rc) {
    9906:	4602      	mov	r2, r0
    9908:	2800      	cmp	r0, #0
    990a:	f040 8092 	bne.w	9a32 <nvs_gc+0x1b6>
		if (!nvs_ate_valid(fs, &gc_ate)) {
    990e:	4620      	mov	r0, r4
    9910:	a90e      	add	r1, sp, #56	; 0x38
    9912:	f006 f847 	bl	f9a4 <nvs_ate_valid>
    9916:	b918      	cbnz	r0, 9920 <nvs_gc+0xa4>
	} while (gc_prev_addr != stop_addr);
    9918:	9b07      	ldr	r3, [sp, #28]
    991a:	4553      	cmp	r3, sl
    991c:	d1ec      	bne.n	98f8 <nvs_gc+0x7c>
    991e:	e7d9      	b.n	98d4 <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
    9920:	6863      	ldr	r3, [r4, #4]
    9922:	930b      	str	r3, [sp, #44]	; 0x2c
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    9924:	aa10      	add	r2, sp, #64	; 0x40
    9926:	4620      	mov	r0, r4
    9928:	a90b      	add	r1, sp, #44	; 0x2c
			wlk_prev_addr = wlk_addr;
    992a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    992c:	f006 f872 	bl	fa14 <nvs_prev_ate>
			if (rc) {
    9930:	4602      	mov	r2, r0
    9932:	2800      	cmp	r0, #0
    9934:	d17d      	bne.n	9a32 <nvs_gc+0x1b6>
			if ((wlk_ate.id == gc_ate.id) &&
    9936:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    993a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    993e:	429a      	cmp	r2, r3
    9940:	d038      	beq.n	99b4 <nvs_gc+0x138>
		} while (wlk_addr != fs->ate_wra);
    9942:	6862      	ldr	r2, [r4, #4]
    9944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9946:	429a      	cmp	r2, r3
    9948:	d1ec      	bne.n	9924 <nvs_gc+0xa8>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    994a:	45b2      	cmp	sl, r6
    994c:	d1e4      	bne.n	9918 <nvs_gc+0x9c>
    994e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    9952:	2b00      	cmp	r3, #0
    9954:	d0e0      	beq.n	9918 <nvs_gc+0x9c>
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);
    9956:	9305      	str	r3, [sp, #20]
    9958:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    995c:	2208      	movs	r2, #8
    995e:	9304      	str	r3, [sp, #16]
    9960:	4b36      	ldr	r3, [pc, #216]	; (9a3c <nvs_gc+0x1c0>)
    9962:	4937      	ldr	r1, [pc, #220]	; (9a40 <nvs_gc+0x1c4>)
    9964:	9303      	str	r3, [sp, #12]
    9966:	4b37      	ldr	r3, [pc, #220]	; (9a44 <nvs_gc+0x1c8>)
    9968:	9302      	str	r3, [sp, #8]
    996a:	2300      	movs	r3, #0
    996c:	4618      	mov	r0, r3
    996e:	e9cd 3200 	strd	r3, r2, [sp]
    9972:	2204      	movs	r2, #4
    9974:	f005 fffc 	bl	f970 <z_log_msg_runtime_create.constprop.0>
			data_addr += gc_ate.offset;
    9978:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    997c:	ea4f 431a 	mov.w	r3, sl, lsr #16
    9980:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
    9982:	441f      	add	r7, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    9984:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
    9986:	a80e      	add	r0, sp, #56	; 0x38
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    9988:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
			nvs_ate_crc8_update(&gc_ate);
    998c:	f005 ffe7 	bl	f95e <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    9990:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    9992:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    9996:	681e      	ldr	r6, [r3, #0]
    9998:	4276      	negs	r6, r6
	block_size =
    999a:	f006 0620 	and.w	r6, r6, #32
	while (len) {
    999e:	f1b9 0f00 	cmp.w	r9, #0
    99a2:	d10e      	bne.n	99c2 <nvs_gc+0x146>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    99a4:	4620      	mov	r0, r4
    99a6:	a90e      	add	r1, sp, #56	; 0x38
    99a8:	f006 f8b8 	bl	fb1c <nvs_flash_ate_wrt>
			if (rc) {
    99ac:	4602      	mov	r2, r0
    99ae:	2800      	cmp	r0, #0
    99b0:	d0b2      	beq.n	9918 <nvs_gc+0x9c>
    99b2:	e03e      	b.n	9a32 <nvs_gc+0x1b6>
			    (nvs_ate_valid(fs, &wlk_ate))) {
    99b4:	4620      	mov	r0, r4
    99b6:	a910      	add	r1, sp, #64	; 0x40
    99b8:	f005 fff4 	bl	f9a4 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
    99bc:	2800      	cmp	r0, #0
    99be:	d0c0      	beq.n	9942 <nvs_gc+0xc6>
    99c0:	e7c3      	b.n	994a <nvs_gc+0xce>
		bytes_to_copy = MIN(block_size, len);
    99c2:	454e      	cmp	r6, r9
    99c4:	46b0      	mov	r8, r6
    99c6:	bf28      	it	cs
    99c8:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    99ca:	aa12      	add	r2, sp, #72	; 0x48
    99cc:	4643      	mov	r3, r8
    99ce:	4639      	mov	r1, r7
    99d0:	4620      	mov	r0, r4
    99d2:	f005 ff5a 	bl	f88a <nvs_flash_rd>
		if (rc) {
    99d6:	4602      	mov	r2, r0
    99d8:	bb58      	cbnz	r0, 9a32 <nvs_gc+0x1b6>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    99da:	4643      	mov	r3, r8
    99dc:	68a1      	ldr	r1, [r4, #8]
    99de:	aa12      	add	r2, sp, #72	; 0x48
    99e0:	4620      	mov	r0, r4
    99e2:	f006 f861 	bl	faa8 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    99e6:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    99e8:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
    99ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    99ec:	f005 ffd0 	bl	f990 <nvs_al_size.isra.0>
    99f0:	68a3      	ldr	r3, [r4, #8]
    99f2:	4403      	add	r3, r0
    99f4:	60a3      	str	r3, [r4, #8]
		if (rc) {
    99f6:	b9e2      	cbnz	r2, 9a32 <nvs_gc+0x1b6>
		len -= bytes_to_copy;
    99f8:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
    99fc:	4447      	add	r7, r8
    99fe:	e7ce      	b.n	999e <nvs_gc+0x122>
		rc = nvs_add_gc_done_ate(fs);
    9a00:	4620      	mov	r0, r4
    9a02:	f7ff ff0f 	bl	9824 <nvs_add_gc_done_ate>
		if (rc) {
    9a06:	4602      	mov	r2, r0
    9a08:	2800      	cmp	r0, #0
    9a0a:	f43f af69 	beq.w	98e0 <nvs_gc+0x64>
    9a0e:	e010      	b.n	9a32 <nvs_gc+0x1b6>
	stop_addr = gc_addr - ate_size;
    9a10:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
    9a12:	4620      	mov	r0, r4
    9a14:	a90c      	add	r1, sp, #48	; 0x30
	stop_addr = gc_addr - ate_size;
    9a16:	9307      	str	r3, [sp, #28]
	if (nvs_close_ate_valid(fs, &close_ate)) {
    9a18:	f005 ffde 	bl	f9d8 <nvs_close_ate_valid>
    9a1c:	2800      	cmp	r0, #0
    9a1e:	f47f af65 	bne.w	98ec <nvs_gc+0x70>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    9a22:	4620      	mov	r0, r4
    9a24:	a90a      	add	r1, sp, #40	; 0x28
    9a26:	f7ff feb5 	bl	9794 <nvs_recover_last_ate>
		if (rc) {
    9a2a:	4602      	mov	r2, r0
    9a2c:	2800      	cmp	r0, #0
    9a2e:	f43f af63 	beq.w	98f8 <nvs_gc+0x7c>
		return rc;
	}
	return 0;
}
    9a32:	4610      	mov	r0, r2
    9a34:	b01b      	add	sp, #108	; 0x6c
    9a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a3a:	bf00      	nop
    9a3c:	00011033 	.word	0x00011033
    9a40:	00010994 	.word	0x00010994
    9a44:	00010ef1 	.word	0x00010ef1

00009a48 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    9a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9a4c:	4604      	mov	r4, r0
    9a4e:	b08e      	sub	sp, #56	; 0x38

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    9a50:	f100 0714 	add.w	r7, r0, #20
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
    9a54:	4638      	mov	r0, r7
    9a56:	f006 fcd5 	bl	10404 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    9a5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    9a5c:	6883      	ldr	r3, [r0, #8]
    9a5e:	68db      	ldr	r3, [r3, #12]
    9a60:	4798      	blx	r3
    9a62:	4603      	mov	r3, r0
    9a64:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    9a66:	b930      	cbnz	r0, 9a76 <nvs_mount+0x2e>
		LOG_ERR("Could not obtain flash parameters");
    9a68:	4a90      	ldr	r2, [pc, #576]	; (9cac <_flash_used+0xec>)
    9a6a:	9000      	str	r0, [sp, #0]
    9a6c:	e9cd 0201 	strd	r0, r2, [sp, #4]
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
    9a70:	2201      	movs	r2, #1
    9a72:	498f      	ldr	r1, [pc, #572]	; (9cb0 <_flash_used+0xf0>)
    9a74:	e00f      	b.n	9a96 <nvs_mount+0x4e>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    9a76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    9a78:	6883      	ldr	r3, [r0, #8]
    9a7a:	68db      	ldr	r3, [r3, #12]
    9a7c:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    9a7e:	6803      	ldr	r3, [r0, #0]
    9a80:	3b01      	subs	r3, #1
    9a82:	2b1f      	cmp	r3, #31
    9a84:	d90f      	bls.n	9aa6 <nvs_mount+0x5e>
		LOG_ERR("Unsupported write block size");
    9a86:	4b8b      	ldr	r3, [pc, #556]	; (9cb4 <_flash_used+0xf4>)
    9a88:	9302      	str	r3, [sp, #8]
    9a8a:	2300      	movs	r3, #0
    9a8c:	2201      	movs	r2, #1
    9a8e:	4618      	mov	r0, r3
    9a90:	e9cd 3300 	strd	r3, r3, [sp]
    9a94:	4986      	ldr	r1, [pc, #536]	; (9cb0 <_flash_used+0xf0>)
    9a96:	f005 ff6b 	bl	f970 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    9a9a:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    9a9e:	4628      	mov	r0, r5
    9aa0:	b00e      	add	sp, #56	; 0x38
    9aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    9aa6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    9aa8:	6821      	ldr	r1, [r4, #0]
    9aaa:	aa0b      	add	r2, sp, #44	; 0x2c
    9aac:	f006 fad5 	bl	1005a <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    9ab0:	b108      	cbz	r0, 9ab6 <nvs_mount+0x6e>
		LOG_ERR("Unable to get page info");
    9ab2:	4b81      	ldr	r3, [pc, #516]	; (9cb8 <_flash_used+0xf8>)
    9ab4:	e7e8      	b.n	9a88 <nvs_mount+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
    9ab6:	89a5      	ldrh	r5, [r4, #12]
    9ab8:	b12d      	cbz	r5, 9ac6 <nvs_mount+0x7e>
    9aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9abc:	fbb5 f2f3 	udiv	r2, r5, r3
    9ac0:	fb03 5512 	mls	r5, r3, r2, r5
    9ac4:	b10d      	cbz	r5, 9aca <nvs_mount+0x82>
		LOG_ERR("Invalid sector size");
    9ac6:	4b7d      	ldr	r3, [pc, #500]	; (9cbc <_flash_used+0xfc>)
    9ac8:	e7de      	b.n	9a88 <nvs_mount+0x40>
	if (fs->sector_count < 2) {
    9aca:	89e3      	ldrh	r3, [r4, #14]
    9acc:	2b01      	cmp	r3, #1
    9ace:	d805      	bhi.n	9adc <nvs_mount+0x94>
		LOG_ERR("Configuration error - sector count");
    9ad0:	4b7b      	ldr	r3, [pc, #492]	; (9cc0 <_flash_used+0x100>)
    9ad2:	9500      	str	r5, [sp, #0]
    9ad4:	e9cd 5301 	strd	r5, r3, [sp, #4]
    9ad8:	462b      	mov	r3, r5
    9ada:	e7c9      	b.n	9a70 <nvs_mount+0x28>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    9adc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    9ade:	9506      	str	r5, [sp, #24]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    9ae0:	f893 9004 	ldrb.w	r9, [r3, #4]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    9ae4:	f04f 33ff 	mov.w	r3, #4294967295
    9ae8:	f04f 32ff 	mov.w	r2, #4294967295
    9aec:	4638      	mov	r0, r7
    9aee:	f004 ff45 	bl	e97c <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    9af2:	2108      	movs	r1, #8
    9af4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9af6:	f005 ff4b 	bl	f990 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    9afa:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    9afc:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    9afe:	89e3      	ldrh	r3, [r4, #14]
    9b00:	fa1f fa85 	uxth.w	sl, r5
    9b04:	4553      	cmp	r3, sl
    9b06:	d808      	bhi.n	9b1a <nvs_mount+0xd2>
	if (closed_sectors == fs->sector_count) {
    9b08:	89e3      	ldrh	r3, [r4, #14]
    9b0a:	4543      	cmp	r3, r8
    9b0c:	d123      	bne.n	9b56 <nvs_mount+0x10e>
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    9b0e:	4638      	mov	r0, r7
    9b10:	f004 ffae 	bl	ea70 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
    9b14:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    9b18:	e7c1      	b.n	9a9e <nvs_mount+0x56>
		       (uint16_t)(fs->sector_size - ate_size);
    9b1a:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    9b1c:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    9b1e:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    9b20:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    9b24:	464a      	mov	r2, r9
    9b26:	2308      	movs	r3, #8
    9b28:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    9b2a:	9106      	str	r1, [sp, #24]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    9b2c:	f005 fef2 	bl	f914 <nvs_flash_cmp_const>
		if (rc) {
    9b30:	b178      	cbz	r0, 9b52 <nvs_mount+0x10a>
			nvs_sector_advance(fs, &addr);
    9b32:	4620      	mov	r0, r4
    9b34:	a906      	add	r1, sp, #24
    9b36:	f005 feb6 	bl	f8a6 <nvs_sector_advance>
			closed_sectors++;
    9b3a:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    9b3e:	2308      	movs	r3, #8
    9b40:	464a      	mov	r2, r9
    9b42:	4620      	mov	r0, r4
    9b44:	9906      	ldr	r1, [sp, #24]
			closed_sectors++;
    9b46:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    9b4a:	f005 fee3 	bl	f914 <nvs_flash_cmp_const>
			if (!rc) {
    9b4e:	2800      	cmp	r0, #0
    9b50:	d0da      	beq.n	9b08 <nvs_mount+0xc0>
	for (i = 0; i < fs->sector_count; i++) {
    9b52:	3501      	adds	r5, #1
    9b54:	e7d3      	b.n	9afe <nvs_mount+0xb6>
	if (i == fs->sector_count) {
    9b56:	4553      	cmp	r3, sl
    9b58:	d10b      	bne.n	9b72 <nvs_mount+0x12a>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    9b5a:	9906      	ldr	r1, [sp, #24]
    9b5c:	2308      	movs	r3, #8
    9b5e:	464a      	mov	r2, r9
    9b60:	4620      	mov	r0, r4
    9b62:	1b89      	subs	r1, r1, r6
    9b64:	f005 fed6 	bl	f914 <nvs_flash_cmp_const>
		if (!rc) {
    9b68:	b918      	cbnz	r0, 9b72 <nvs_mount+0x12a>
			nvs_sector_advance(fs, &addr);
    9b6a:	4620      	mov	r0, r4
    9b6c:	a906      	add	r1, sp, #24
    9b6e:	f005 fe9a 	bl	f8a6 <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
    9b72:	4620      	mov	r0, r4
    9b74:	a906      	add	r1, sp, #24
    9b76:	f7ff fe0d 	bl	9794 <nvs_recover_last_ate>
	if (rc) {
    9b7a:	4605      	mov	r5, r0
    9b7c:	b118      	cbz	r0, 9b86 <nvs_mount+0x13e>
    9b7e:	4638      	mov	r0, r7
    9b80:	f004 ff76 	bl	ea70 <z_impl_k_mutex_unlock>
	if (rc) {
    9b84:	e78b      	b.n	9a9e <nvs_mount+0x56>
	fs->ate_wra = addr;
    9b86:	9b06      	ldr	r3, [sp, #24]
	fs->data_wra = addr & ADDR_SECT_MASK;
    9b88:	ea4f 4813 	mov.w	r8, r3, lsr #16
    9b8c:	ea4f 4808 	mov.w	r8, r8, lsl #16
	fs->ate_wra = addr;
    9b90:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    9b92:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    9b96:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    9b9a:	4299      	cmp	r1, r3
    9b9c:	d30f      	bcc.n	9bbe <nvs_mount+0x176>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    9b9e:	2308      	movs	r3, #8
    9ba0:	4620      	mov	r0, r4
    9ba2:	aa07      	add	r2, sp, #28
    9ba4:	f005 fe71 	bl	f88a <nvs_flash_rd>
		if (rc) {
    9ba8:	4605      	mov	r5, r0
    9baa:	2800      	cmp	r0, #0
    9bac:	d1e7      	bne.n	9b7e <nvs_mount+0x136>
    9bae:	ab07      	add	r3, sp, #28
		if (data8[i] != value) {
    9bb0:	f813 2b01 	ldrb.w	r2, [r3], #1
    9bb4:	4591      	cmp	r9, r2
    9bb6:	d143      	bne.n	9c40 <_flash_used+0x80>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    9bb8:	3501      	adds	r5, #1
    9bba:	2d08      	cmp	r5, #8
    9bbc:	d1f8      	bne.n	9bb0 <nvs_mount+0x168>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    9bbe:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    9bc0:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
    9bc2:	0c1b      	lsrs	r3, r3, #16
    9bc4:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    9bc6:	a906      	add	r1, sp, #24
	addr = fs->ate_wra & ADDR_SECT_MASK;
    9bc8:	9306      	str	r3, [sp, #24]
	nvs_sector_advance(fs, &addr);
    9bca:	f005 fe6c 	bl	f8a6 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    9bce:	464a      	mov	r2, r9
    9bd0:	4620      	mov	r0, r4
    9bd2:	89a3      	ldrh	r3, [r4, #12]
    9bd4:	9906      	ldr	r1, [sp, #24]
    9bd6:	f005 fe9d 	bl	f914 <nvs_flash_cmp_const>
	if (rc < 0) {
    9bda:	1e05      	subs	r5, r0, #0
    9bdc:	dbcf      	blt.n	9b7e <nvs_mount+0x136>
		addr = fs->ate_wra + ate_size;
    9bde:	6863      	ldr	r3, [r4, #4]
	if (rc) {
    9be0:	f000 8082 	beq.w	9ce8 <_flash_used+0x128>
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    9be4:	f64f 79ff 	movw	r9, #65535	; 0xffff
		addr = fs->ate_wra + ate_size;
    9be8:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    9bec:	89a3      	ldrh	r3, [r4, #12]
    9bee:	fa1f f288 	uxth.w	r2, r8
    9bf2:	1b9b      	subs	r3, r3, r6
    9bf4:	429a      	cmp	r2, r3
		addr = fs->ate_wra + ate_size;
    9bf6:	f8cd 8018 	str.w	r8, [sp, #24]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    9bfa:	d33d      	bcc.n	9c78 <_flash_used+0xb8>
		LOG_INF("No GC Done marker found: restarting gc");
    9bfc:	4b31      	ldr	r3, [pc, #196]	; (9cc4 <_flash_used+0x104>)
    9bfe:	2203      	movs	r2, #3
    9c00:	9302      	str	r3, [sp, #8]
    9c02:	2300      	movs	r3, #0
    9c04:	492a      	ldr	r1, [pc, #168]	; (9cb0 <_flash_used+0xf0>)
    9c06:	4618      	mov	r0, r3
    9c08:	e9cd 3300 	strd	r3, r3, [sp]
    9c0c:	f005 feb0 	bl	f970 <z_log_msg_runtime_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    9c10:	4620      	mov	r0, r4
    9c12:	6861      	ldr	r1, [r4, #4]
    9c14:	f7ff fd8a 	bl	972c <nvs_flash_erase_sector>
		if (rc) {
    9c18:	4605      	mov	r5, r0
    9c1a:	2800      	cmp	r0, #0
    9c1c:	d1af      	bne.n	9b7e <nvs_mount+0x136>
		fs->ate_wra &= ADDR_SECT_MASK;
    9c1e:	6863      	ldr	r3, [r4, #4]
    9c20:	4a29      	ldr	r2, [pc, #164]	; (9cc8 <_flash_used+0x108>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    9c22:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    9c24:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    9c26:	440b      	add	r3, r1
    9c28:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    9c2c:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    9c2e:	4013      	ands	r3, r2
		rc = nvs_gc(fs);
    9c30:	4620      	mov	r0, r4
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    9c32:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    9c34:	f7ff fe22 	bl	987c <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
    9c38:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    9c3a:	2d00      	cmp	r5, #0
    9c3c:	d070      	beq.n	9d20 <_flash_used+0x160>
    9c3e:	e79e      	b.n	9b7e <nvs_mount+0x136>
		if (nvs_ate_valid(fs, &last_ate)) {
    9c40:	4620      	mov	r0, r4
    9c42:	a907      	add	r1, sp, #28
    9c44:	f005 feae 	bl	f9a4 <nvs_ate_valid>
    9c48:	6862      	ldr	r2, [r4, #4]
    9c4a:	b910      	cbnz	r0, 9c52 <_flash_used+0x92>
		fs->ate_wra -= ate_size;
    9c4c:	1b92      	subs	r2, r2, r6
    9c4e:	6062      	str	r2, [r4, #4]
    9c50:	e7a1      	b.n	9b96 <nvs_mount+0x14e>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    9c52:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    9c56:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    9c5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    9c5c:	f8c4 8008 	str.w	r8, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    9c60:	4429      	add	r1, r5
    9c62:	f005 fe95 	bl	f990 <nvs_al_size.isra.0>
    9c66:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    9c68:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    9c6a:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    9c6c:	d1ee      	bne.n	9c4c <_flash_used+0x8c>
    9c6e:	2d00      	cmp	r5, #0
    9c70:	d0ec      	beq.n	9c4c <_flash_used+0x8c>
				rc = -ESPIPE;
    9c72:	f06f 051c 	mvn.w	r5, #28
    9c76:	e090      	b.n	9d9a <_flash_used+0x1da>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    9c78:	2308      	movs	r3, #8
    9c7a:	4641      	mov	r1, r8
    9c7c:	4620      	mov	r0, r4
    9c7e:	aa09      	add	r2, sp, #36	; 0x24
    9c80:	f005 fe03 	bl	f88a <nvs_flash_rd>
			if (rc) {
    9c84:	4605      	mov	r5, r0
    9c86:	2800      	cmp	r0, #0
    9c88:	f47f af79 	bne.w	9b7e <nvs_mount+0x136>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    9c8c:	4620      	mov	r0, r4
    9c8e:	a909      	add	r1, sp, #36	; 0x24
    9c90:	f005 fe88 	bl	f9a4 <nvs_ate_valid>
    9c94:	b138      	cbz	r0, 9ca6 <_flash_used+0xe6>
    9c96:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9c9a:	454b      	cmp	r3, r9
    9c9c:	d103      	bne.n	9ca6 <_flash_used+0xe6>
			    (gc_done_ate.id == 0xffff) &&
    9c9e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    9ca2:	2b00      	cmp	r3, #0
    9ca4:	d07f      	beq.n	9da6 <_flash_used+0x1e6>
			addr += ate_size;
    9ca6:	44b0      	add	r8, r6
    9ca8:	e7a0      	b.n	9bec <_flash_used+0x2c>
    9caa:	bf00      	nop
    9cac:	00010f1b 	.word	0x00010f1b
    9cb0:	00010994 	.word	0x00010994
    9cb4:	00010f3d 	.word	0x00010f3d
    9cb8:	00010f5a 	.word	0x00010f5a
    9cbc:	00010f72 	.word	0x00010f72
    9cc0:	00010f86 	.word	0x00010f86
    9cc4:	00010fe3 	.word	0x00010fe3
    9cc8:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    9ccc:	464a      	mov	r2, r9
    9cce:	4620      	mov	r0, r4
    9cd0:	1a5b      	subs	r3, r3, r1
    9cd2:	f005 fe1f 	bl	f914 <nvs_flash_cmp_const>
		if (rc < 0) {
    9cd6:	1e05      	subs	r5, r0, #0
    9cd8:	f6ff af51 	blt.w	9b7e <nvs_mount+0x136>
		if (!rc) {
    9cdc:	d008      	beq.n	9cf0 <_flash_used+0x130>
		fs->data_wra += fs->flash_parameters->write_block_size;
    9cde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    9ce0:	68a3      	ldr	r3, [r4, #8]
    9ce2:	6812      	ldr	r2, [r2, #0]
    9ce4:	4413      	add	r3, r2
    9ce6:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    9ce8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    9cec:	428b      	cmp	r3, r1
    9cee:	d8ed      	bhi.n	9ccc <_flash_used+0x10c>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    9cf0:	6861      	ldr	r1, [r4, #4]
    9cf2:	89a3      	ldrh	r3, [r4, #12]
    9cf4:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    9cf8:	429a      	cmp	r2, r3
    9cfa:	d19e      	bne.n	9c3a <_flash_used+0x7a>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    9cfc:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 9dd4 <_flash_used+0x214>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    9d00:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    9d02:	ea01 0308 	and.w	r3, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    9d06:	429a      	cmp	r2, r3
    9d08:	d097      	beq.n	9c3a <_flash_used+0x7a>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    9d0a:	4620      	mov	r0, r4
    9d0c:	f7ff fd0e 	bl	972c <nvs_flash_erase_sector>
		if (rc) {
    9d10:	4605      	mov	r5, r0
    9d12:	2800      	cmp	r0, #0
    9d14:	f47f af33 	bne.w	9b7e <nvs_mount+0x136>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    9d18:	6863      	ldr	r3, [r4, #4]
    9d1a:	ea03 0308 	and.w	r3, r3, r8
    9d1e:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    9d20:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    9d22:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    9d24:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    9d28:	429a      	cmp	r2, r3
    9d2a:	d032      	beq.n	9d92 <_flash_used+0x1d2>
    9d2c:	4638      	mov	r0, r7
    9d2e:	f004 fe9f 	bl	ea70 <z_impl_k_mutex_unlock>
	fs->ready = true;
    9d32:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    9d34:	2500      	movs	r5, #0
	fs->ready = true;
    9d36:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    9d38:	89a3      	ldrh	r3, [r4, #12]
    9d3a:	4628      	mov	r0, r5
    9d3c:	9304      	str	r3, [sp, #16]
    9d3e:	89e3      	ldrh	r3, [r4, #14]
    9d40:	2203      	movs	r2, #3
    9d42:	9303      	str	r3, [sp, #12]
    9d44:	4b24      	ldr	r3, [pc, #144]	; (9dd8 <_flash_used+0x218>)
    9d46:	e9cd 5500 	strd	r5, r5, [sp]
    9d4a:	9302      	str	r3, [sp, #8]
    9d4c:	4923      	ldr	r1, [pc, #140]	; (9ddc <_flash_used+0x21c>)
    9d4e:	462b      	mov	r3, r5
    9d50:	f005 fe0e 	bl	f970 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("alloc wra: %d, %x",
    9d54:	6863      	ldr	r3, [r4, #4]
    9d56:	4628      	mov	r0, r5
    9d58:	b29a      	uxth	r2, r3
    9d5a:	0c1b      	lsrs	r3, r3, #16
    9d5c:	9303      	str	r3, [sp, #12]
    9d5e:	4b20      	ldr	r3, [pc, #128]	; (9de0 <_flash_used+0x220>)
    9d60:	9204      	str	r2, [sp, #16]
    9d62:	e9cd 5301 	strd	r5, r3, [sp, #4]
    9d66:	2203      	movs	r2, #3
    9d68:	462b      	mov	r3, r5
    9d6a:	491c      	ldr	r1, [pc, #112]	; (9ddc <_flash_used+0x21c>)
    9d6c:	9500      	str	r5, [sp, #0]
    9d6e:	f005 fdff 	bl	f970 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("data wra: %d, %x",
    9d72:	68a3      	ldr	r3, [r4, #8]
    9d74:	4628      	mov	r0, r5
    9d76:	b29a      	uxth	r2, r3
    9d78:	0c1b      	lsrs	r3, r3, #16
    9d7a:	9303      	str	r3, [sp, #12]
    9d7c:	4b19      	ldr	r3, [pc, #100]	; (9de4 <_flash_used+0x224>)
    9d7e:	9204      	str	r2, [sp, #16]
    9d80:	e9cd 5301 	strd	r5, r3, [sp, #4]
    9d84:	2203      	movs	r2, #3
    9d86:	462b      	mov	r3, r5
    9d88:	4914      	ldr	r1, [pc, #80]	; (9ddc <_flash_used+0x21c>)
    9d8a:	9500      	str	r5, [sp, #0]
    9d8c:	f005 fdf0 	bl	f970 <z_log_msg_runtime_create.constprop.0>
	return 0;
    9d90:	e685      	b.n	9a9e <nvs_mount+0x56>
		rc = nvs_add_gc_done_ate(fs);
    9d92:	4620      	mov	r0, r4
    9d94:	f7ff fd46 	bl	9824 <nvs_add_gc_done_ate>
    9d98:	4605      	mov	r5, r0
    9d9a:	4638      	mov	r0, r7
    9d9c:	f004 fe68 	bl	ea70 <z_impl_k_mutex_unlock>
	if (rc) {
    9da0:	2d00      	cmp	r5, #0
    9da2:	d0c6      	beq.n	9d32 <_flash_used+0x172>
    9da4:	e67b      	b.n	9a9e <nvs_mount+0x56>
			LOG_INF("GC Done marker found");
    9da6:	4b10      	ldr	r3, [pc, #64]	; (9de8 <_flash_used+0x228>)
    9da8:	2203      	movs	r2, #3
    9daa:	4628      	mov	r0, r5
    9dac:	e9cd 5301 	strd	r5, r3, [sp, #4]
    9db0:	490a      	ldr	r1, [pc, #40]	; (9ddc <_flash_used+0x21c>)
    9db2:	462b      	mov	r3, r5
    9db4:	9500      	str	r5, [sp, #0]
    9db6:	f005 fddb 	bl	f970 <z_log_msg_runtime_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    9dba:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
    9dbc:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
    9dbe:	0c1b      	lsrs	r3, r3, #16
    9dc0:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    9dc2:	a906      	add	r1, sp, #24
			addr = fs->ate_wra & ADDR_SECT_MASK;
    9dc4:	9306      	str	r3, [sp, #24]
			nvs_sector_advance(fs, &addr);
    9dc6:	f005 fd6e 	bl	f8a6 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
    9dca:	4620      	mov	r0, r4
    9dcc:	9906      	ldr	r1, [sp, #24]
    9dce:	f7ff fcad 	bl	972c <nvs_flash_erase_sector>
    9dd2:	e731      	b.n	9c38 <_flash_used+0x78>
    9dd4:	ffff0000 	.word	0xffff0000
    9dd8:	00010fa9 	.word	0x00010fa9
    9ddc:	00010994 	.word	0x00010994
    9de0:	00010fc0 	.word	0x00010fc0
    9de4:	00010fd2 	.word	0x00010fd2
    9de8:	0001100a 	.word	0x0001100a

00009dec <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    9dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9df0:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    9df2:	7c03      	ldrb	r3, [r0, #16]
{
    9df4:	4604      	mov	r4, r0
    9df6:	4689      	mov	r9, r1
    9df8:	4690      	mov	r8, r2
    9dfa:	b08d      	sub	sp, #52	; 0x34
	if (!fs->ready) {
    9dfc:	b973      	cbnz	r3, 9e1c <nvs_write+0x30>
		LOG_ERR("NVS not initialized");
    9dfe:	4a66      	ldr	r2, [pc, #408]	; (9f98 <nvs_write+0x1ac>)
    9e00:	4618      	mov	r0, r3
    9e02:	e9cd 3201 	strd	r3, r2, [sp, #4]
    9e06:	4965      	ldr	r1, [pc, #404]	; (9f9c <nvs_write+0x1b0>)
    9e08:	2201      	movs	r2, #1
    9e0a:	9300      	str	r3, [sp, #0]
    9e0c:	f005 fdb0 	bl	f970 <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
    9e10:	f06f 060c 	mvn.w	r6, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    9e14:	4630      	mov	r0, r6
    9e16:	b00d      	add	sp, #52	; 0x34
    9e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    9e1c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    9e1e:	2108      	movs	r1, #8
    9e20:	4610      	mov	r0, r2
    9e22:	f005 fdb5 	bl	f990 <nvs_al_size.isra.0>
    9e26:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    9e28:	4629      	mov	r1, r5
    9e2a:	4610      	mov	r0, r2
    9e2c:	f005 fdb0 	bl	f990 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    9e30:	89a3      	ldrh	r3, [r4, #12]
	data_size = nvs_al_size(fs, len);
    9e32:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    9e34:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    9e38:	42ab      	cmp	r3, r5
    9e3a:	f0c0 80a9 	bcc.w	9f90 <nvs_write+0x1a4>
    9e3e:	b11d      	cbz	r5, 9e48 <nvs_write+0x5c>
	    ((len > 0) && (data == NULL))) {
    9e40:	f1b8 0f00 	cmp.w	r8, #0
    9e44:	f000 80a4 	beq.w	9f90 <nvs_write+0x1a4>
	wlk_addr = fs->ate_wra;
    9e48:	6863      	ldr	r3, [r4, #4]
    9e4a:	9307      	str	r3, [sp, #28]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    9e4c:	4620      	mov	r0, r4
    9e4e:	aa08      	add	r2, sp, #32
    9e50:	a907      	add	r1, sp, #28
		rd_addr = wlk_addr;
    9e52:	f8dd b01c 	ldr.w	fp, [sp, #28]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    9e56:	f005 fddd 	bl	fa14 <nvs_prev_ate>
		if (rc) {
    9e5a:	4606      	mov	r6, r0
    9e5c:	2800      	cmp	r0, #0
    9e5e:	d1d9      	bne.n	9e14 <nvs_write+0x28>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    9e60:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    9e64:	454b      	cmp	r3, r9
    9e66:	d005      	beq.n	9e74 <nvs_write+0x88>
		if (wlk_addr == fs->ate_wra) {
    9e68:	6862      	ldr	r2, [r4, #4]
    9e6a:	9b07      	ldr	r3, [sp, #28]
    9e6c:	429a      	cmp	r2, r3
    9e6e:	d1ed      	bne.n	9e4c <nvs_write+0x60>
		if (len == 0) {
    9e70:	b9e5      	cbnz	r5, 9eac <nvs_write+0xc0>
    9e72:	e7cf      	b.n	9e14 <nvs_write+0x28>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    9e74:	4620      	mov	r0, r4
    9e76:	a908      	add	r1, sp, #32
    9e78:	f005 fd94 	bl	f9a4 <nvs_ate_valid>
    9e7c:	2800      	cmp	r0, #0
    9e7e:	d0f3      	beq.n	9e68 <nvs_write+0x7c>
		rd_addr += wlk_ate.offset;
    9e80:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
			if (wlk_ate.len == 0U) {
    9e84:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
		if (len == 0) {
    9e88:	b175      	cbz	r5, 9ea8 <nvs_write+0xbc>
		} else if (len == wlk_ate.len) {
    9e8a:	42ab      	cmp	r3, r5
    9e8c:	d10e      	bne.n	9eac <nvs_write+0xc0>
		rd_addr &= ADDR_SECT_MASK;
    9e8e:	ea4f 411b 	mov.w	r1, fp, lsr #16
    9e92:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    9e94:	4401      	add	r1, r0
    9e96:	462b      	mov	r3, r5
    9e98:	4642      	mov	r2, r8
    9e9a:	4620      	mov	r0, r4
    9e9c:	f005 fd10 	bl	f8c0 <nvs_flash_block_cmp>
			if (rc <= 0) {
    9ea0:	2800      	cmp	r0, #0
    9ea2:	dc03      	bgt.n	9eac <nvs_write+0xc0>
    9ea4:	4606      	mov	r6, r0
    9ea6:	e7b5      	b.n	9e14 <nvs_write+0x28>
			if (wlk_ate.len == 0U) {
    9ea8:	2b00      	cmp	r3, #0
    9eaa:	d0b3      	beq.n	9e14 <nvs_write+0x28>
	if (data_size) {
    9eac:	2f00      	cmp	r7, #0
    9eae:	d13e      	bne.n	9f2e <nvs_write+0x142>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    9eb0:	f104 0314 	add.w	r3, r4, #20
    9eb4:	9305      	str	r3, [sp, #20]
	return z_impl_k_mutex_lock(mutex, timeout);
    9eb6:	f04f 32ff 	mov.w	r2, #4294967295
    9eba:	f04f 33ff 	mov.w	r3, #4294967295
    9ebe:	f104 0014 	add.w	r0, r4, #20
    9ec2:	f004 fd5b 	bl	e97c <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    9ec6:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 9fa0 <nvs_write+0x1b4>
		if (gc_count == fs->sector_count) {
    9eca:	89e3      	ldrh	r3, [r4, #14]
    9ecc:	429e      	cmp	r6, r3
    9ece:	d05c      	beq.n	9f8a <nvs_write+0x19e>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
    9ed0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    9ed4:	18f9      	adds	r1, r7, r3
    9ed6:	428a      	cmp	r2, r1
    9ed8:	d32c      	bcc.n	9f34 <nvs_write+0x148>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    9eda:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	entry.part = 0xff;
    9ede:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    9ee0:	a80a      	add	r0, sp, #40	; 0x28
	entry.part = 0xff;
    9ee2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	entry.id = id;
    9ee6:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
	entry.len = (uint16_t)len;
    9eea:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	nvs_ate_crc8_update(&entry);
    9eee:	f005 fd36 	bl	f95e <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    9ef2:	462b      	mov	r3, r5
    9ef4:	4642      	mov	r2, r8
    9ef6:	68a1      	ldr	r1, [r4, #8]
    9ef8:	4620      	mov	r0, r4
    9efa:	f005 fdd5 	bl	faa8 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    9efe:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    9f00:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
    9f02:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9f04:	f005 fd44 	bl	f990 <nvs_al_size.isra.0>
    9f08:	68a2      	ldr	r2, [r4, #8]
    9f0a:	4402      	add	r2, r0
    9f0c:	60a2      	str	r2, [r4, #8]
	if (rc) {
    9f0e:	f1ba 0f00 	cmp.w	sl, #0
    9f12:	d107      	bne.n	9f24 <nvs_write+0x138>
	rc = nvs_flash_ate_wrt(fs, &entry);
    9f14:	4620      	mov	r0, r4
    9f16:	a90a      	add	r1, sp, #40	; 0x28
    9f18:	f005 fe00 	bl	fb1c <nvs_flash_ate_wrt>
	rc = len;
    9f1c:	2800      	cmp	r0, #0
    9f1e:	bf14      	ite	ne
    9f20:	4682      	movne	sl, r0
    9f22:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
    9f24:	9805      	ldr	r0, [sp, #20]
    9f26:	f004 fda3 	bl	ea70 <z_impl_k_mutex_unlock>
	return rc;
    9f2a:	4656      	mov	r6, sl
    9f2c:	e772      	b.n	9e14 <nvs_write+0x28>
		required_space = data_size + ate_size;
    9f2e:	4457      	add	r7, sl
    9f30:	b2bf      	uxth	r7, r7
    9f32:	e7bd      	b.n	9eb0 <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    9f34:	2108      	movs	r1, #8
    9f36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9f38:	f005 fd2a 	bl	f990 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    9f3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9f40:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	close_ate.len = 0U;
    9f44:	2300      	movs	r3, #0
    9f46:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    9f4a:	1813      	adds	r3, r2, r0
    9f4c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	fs->ate_wra += (fs->sector_size - ate_size);
    9f50:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    9f52:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    9f56:	441a      	add	r2, r3
    9f58:	1a10      	subs	r0, r2, r0
    9f5a:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    9f5c:	a80a      	add	r0, sp, #40	; 0x28
    9f5e:	f005 fcfe 	bl	f95e <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    9f62:	a90a      	add	r1, sp, #40	; 0x28
    9f64:	4620      	mov	r0, r4
    9f66:	f005 fdd9 	bl	fb1c <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    9f6a:	4620      	mov	r0, r4
    9f6c:	1d21      	adds	r1, r4, #4
    9f6e:	f005 fc9a 	bl	f8a6 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    9f72:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
    9f74:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    9f76:	ea03 030b 	and.w	r3, r3, fp
    9f7a:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    9f7c:	f7ff fc7e 	bl	987c <nvs_gc>
		if (rc) {
    9f80:	4682      	mov	sl, r0
    9f82:	2800      	cmp	r0, #0
    9f84:	d1ce      	bne.n	9f24 <nvs_write+0x138>
		gc_count++;
    9f86:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
    9f88:	e79f      	b.n	9eca <nvs_write+0xde>
			rc = -ENOSPC;
    9f8a:	f06f 0a1b 	mvn.w	sl, #27
    9f8e:	e7c9      	b.n	9f24 <nvs_write+0x138>
		return -EINVAL;
    9f90:	f06f 0615 	mvn.w	r6, #21
    9f94:	e73e      	b.n	9e14 <nvs_write+0x28>
    9f96:	bf00      	nop
    9f98:	00010f07 	.word	0x00010f07
    9f9c:	00010994 	.word	0x00010994
    9fa0:	ffff0000 	.word	0xffff0000

00009fa4 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    9fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9fa8:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    9faa:	7c03      	ldrb	r3, [r0, #16]
{
    9fac:	b088      	sub	sp, #32
    9fae:	4604      	mov	r4, r0
    9fb0:	460f      	mov	r7, r1
    9fb2:	4690      	mov	r8, r2
    9fb4:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
	if (!fs->ready) {
    9fb8:	b96b      	cbnz	r3, 9fd6 <nvs_read_hist+0x32>
		LOG_ERR("NVS not initialized");
    9fba:	4a2f      	ldr	r2, [pc, #188]	; (a078 <nvs_read_hist+0xd4>)
    9fbc:	4618      	mov	r0, r3
    9fbe:	e9cd 3201 	strd	r3, r2, [sp, #4]
    9fc2:	492e      	ldr	r1, [pc, #184]	; (a07c <nvs_read_hist+0xd8>)
    9fc4:	2201      	movs	r2, #1
    9fc6:	9300      	str	r3, [sp, #0]
    9fc8:	f005 fcd2 	bl	f970 <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
    9fcc:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    9fd0:	b008      	add	sp, #32
    9fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    9fd6:	2108      	movs	r1, #8
    9fd8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    9fda:	f005 fcd9 	bl	f990 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    9fde:	89a3      	ldrh	r3, [r4, #12]
    9fe0:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    9fe4:	42b3      	cmp	r3, r6
    9fe6:	d343      	bcc.n	a070 <nvs_read_hist+0xcc>
	cnt_his = 0U;
    9fe8:	2500      	movs	r5, #0
	wlk_addr = fs->ate_wra;
    9fea:	f8d4 a004 	ldr.w	sl, [r4, #4]
    9fee:	f8cd a014 	str.w	sl, [sp, #20]
	while (cnt_his <= cnt) {
    9ff2:	454d      	cmp	r5, r9
    9ff4:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
    9ff6:	f8dd a014 	ldr.w	sl, [sp, #20]
	while (cnt_his <= cnt) {
    9ffa:	d909      	bls.n	a010 <nvs_read_hist+0x6c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    9ffc:	6863      	ldr	r3, [r4, #4]
    9ffe:	4553      	cmp	r3, sl
    a000:	d11e      	bne.n	a040 <nvs_read_hist+0x9c>
    a002:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    a006:	42bb      	cmp	r3, r7
    a008:	d01a      	beq.n	a040 <nvs_read_hist+0x9c>
		return -ENOENT;
    a00a:	f06f 0001 	mvn.w	r0, #1
    a00e:	e7df      	b.n	9fd0 <nvs_read_hist+0x2c>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    a010:	4620      	mov	r0, r4
    a012:	aa06      	add	r2, sp, #24
    a014:	a905      	add	r1, sp, #20
    a016:	f005 fcfd 	bl	fa14 <nvs_prev_ate>
		if (rc) {
    a01a:	2800      	cmp	r0, #0
    a01c:	d1d8      	bne.n	9fd0 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
    a01e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    a022:	42bb      	cmp	r3, r7
    a024:	d106      	bne.n	a034 <nvs_read_hist+0x90>
    a026:	4620      	mov	r0, r4
    a028:	a906      	add	r1, sp, #24
    a02a:	f005 fcbb 	bl	f9a4 <nvs_ate_valid>
    a02e:	b108      	cbz	r0, a034 <nvs_read_hist+0x90>
			cnt_his++;
    a030:	3501      	adds	r5, #1
    a032:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
    a034:	6862      	ldr	r2, [r4, #4]
    a036:	9b05      	ldr	r3, [sp, #20]
    a038:	429a      	cmp	r2, r3
    a03a:	d1da      	bne.n	9ff2 <nvs_read_hist+0x4e>
		rd_addr = wlk_addr;
    a03c:	4651      	mov	r1, sl
    a03e:	e7e0      	b.n	a002 <nvs_read_hist+0x5e>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    a040:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    a044:	2b00      	cmp	r3, #0
    a046:	d0e0      	beq.n	a00a <nvs_read_hist+0x66>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    a048:	45a9      	cmp	r9, r5
    a04a:	d8de      	bhi.n	a00a <nvs_read_hist+0x66>
	rd_addr += wlk_ate.offset;
    a04c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
	rd_addr &= ADDR_SECT_MASK;
    a050:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    a052:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    a054:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    a058:	bf28      	it	cs
    a05a:	4633      	movcs	r3, r6
    a05c:	4401      	add	r1, r0
    a05e:	4642      	mov	r2, r8
    a060:	4620      	mov	r0, r4
    a062:	f005 fc12 	bl	f88a <nvs_flash_rd>
	if (rc) {
    a066:	2800      	cmp	r0, #0
    a068:	d1b2      	bne.n	9fd0 <nvs_read_hist+0x2c>
	return wlk_ate.len;
    a06a:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    a06e:	e7af      	b.n	9fd0 <nvs_read_hist+0x2c>
		return -EINVAL;
    a070:	f06f 0015 	mvn.w	r0, #21
    a074:	e7ac      	b.n	9fd0 <nvs_read_hist+0x2c>
    a076:	bf00      	nop
    a078:	00010f07 	.word	0x00010f07
    a07c:	00010994 	.word	0x00010994

0000a080 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
    a080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a084:	4681      	mov	r9, r0
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);

	if (atomic_inc(&initialized) != 0) {
    a086:	482f      	ldr	r0, [pc, #188]	; (a144 <z_log_init.isra.0+0xc4>)
static uint32_t z_log_init(bool blocking, bool can_sleep)
    a088:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    a08a:	f005 fd63 	bl	fb54 <atomic_inc>
    a08e:	4606      	mov	r6, r0
    a090:	b970      	cbnz	r0, a0b0 <z_log_init.isra.0+0x30>
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a092:	4c2d      	ldr	r4, [pc, #180]	; (a148 <z_log_init.isra.0+0xc8>)
	uint32_t mask = 0;
    a094:	4605      	mov	r5, r0
    a096:	46a0      	mov	r8, r4
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
    a098:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a09c:	f8df a0ac 	ldr.w	sl, [pc, #172]	; a14c <z_log_init.isra.0+0xcc>
    a0a0:	4554      	cmp	r4, sl
    a0a2:	d307      	bcc.n	a0b4 <z_log_init.isra.0+0x34>
			i++;
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
    a0a4:	f1b9 0f00 	cmp.w	r9, #0
    a0a8:	d002      	beq.n	a0b0 <z_log_init.isra.0+0x30>
		mask_cpy &= ~BIT(i);
    a0aa:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
    a0ae:	b9e5      	cbnz	r5, a0ea <z_log_init.isra.0+0x6a>
			}
		}
	}

	return mask;
}
    a0b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (backend->autostart) {
    a0b4:	7b23      	ldrb	r3, [r4, #12]
    a0b6:	b173      	cbz	r3, a0d6 <z_log_init.isra.0+0x56>
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_init(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->init) {
    a0b8:	6823      	ldr	r3, [r4, #0]
    a0ba:	68db      	ldr	r3, [r3, #12]
    a0bc:	b10b      	cbz	r3, a0c2 <z_log_init.isra.0+0x42>
		backend->api->init(backend);
    a0be:	4620      	mov	r0, r4
    a0c0:	4798      	blx	r3
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    a0c2:	6823      	ldr	r3, [r4, #0]
    a0c4:	691b      	ldr	r3, [r3, #16]
    a0c6:	b943      	cbnz	r3, a0da <z_log_init.isra.0+0x5a>
				log_backend_enable(backend,
    a0c8:	6863      	ldr	r3, [r4, #4]
    a0ca:	2204      	movs	r2, #4
    a0cc:	4620      	mov	r0, r4
    a0ce:	6819      	ldr	r1, [r3, #0]
    a0d0:	f000 f8c4 	bl	a25c <log_backend_enable>
			i++;
    a0d4:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a0d6:	3410      	adds	r4, #16
    a0d8:	e7e2      	b.n	a0a0 <z_log_init.isra.0+0x20>
		return backend->api->is_ready(backend);
    a0da:	4620      	mov	r0, r4
    a0dc:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    a0de:	2800      	cmp	r0, #0
    a0e0:	d0f2      	beq.n	a0c8 <z_log_init.isra.0+0x48>
				mask |= BIT(i);
    a0e2:	fa0b f306 	lsl.w	r3, fp, r6
    a0e6:	431d      	orrs	r5, r3
    a0e8:	e7f4      	b.n	a0d4 <z_log_init.isra.0+0x54>
    a0ea:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
    a0ec:	fa95 f4a5 	rbit	r4, r5
    a0f0:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
    a0f4:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a0f8:	0126      	lsls	r6, r4, #4
    a0fa:	eb08 1404 	add.w	r4, r8, r4, lsl #4
		mask_cpy &= ~BIT(i);
    a0fe:	ea6f 0b03 	mvn.w	fp, r3
    a102:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a106:	7b23      	ldrb	r3, [r4, #12]
    a108:	b163      	cbz	r3, a124 <z_log_init.isra.0+0xa4>
	if (backend->api->is_ready != NULL) {
    a10a:	f858 3006 	ldr.w	r3, [r8, r6]
    a10e:	691b      	ldr	r3, [r3, #16]
    a110:	b993      	cbnz	r3, a138 <z_log_init.isra.0+0xb8>
					   backend->cb->ctx,
    a112:	4446      	add	r6, r8
			log_backend_enable(backend,
    a114:	6873      	ldr	r3, [r6, #4]
    a116:	2204      	movs	r2, #4
    a118:	4620      	mov	r0, r4
    a11a:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    a11c:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
    a120:	f000 f89c 	bl	a25c <log_backend_enable>
	while (mask_cpy) {
    a124:	2d00      	cmp	r5, #0
    a126:	d1e1      	bne.n	a0ec <z_log_init.isra.0+0x6c>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    a128:	b127      	cbz	r7, a134 <z_log_init.isra.0+0xb4>
	return z_impl_k_sleep(timeout);
    a12a:	f44f 70a4 	mov.w	r0, #328	; 0x148
    a12e:	2100      	movs	r1, #0
    a130:	f004 ffe4 	bl	f0fc <z_impl_k_sleep>
    a134:	464d      	mov	r5, r9
    a136:	e7ba      	b.n	a0ae <z_log_init.isra.0+0x2e>
		return backend->api->is_ready(backend);
    a138:	4620      	mov	r0, r4
    a13a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a13c:	2800      	cmp	r0, #0
    a13e:	d1f1      	bne.n	a124 <z_log_init.isra.0+0xa4>
    a140:	e7e7      	b.n	a112 <z_log_init.isra.0+0x92>
    a142:	bf00      	nop
    a144:	200082f4 	.word	0x200082f4
    a148:	00010a04 	.word	0x00010a04
    a14c:	00010a14 	.word	0x00010a14

0000a150 <log_format_func_t_get>:
}
    a150:	4b01      	ldr	r3, [pc, #4]	; (a158 <log_format_func_t_get+0x8>)
    a152:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    a156:	4770      	bx	lr
    a158:	00010a38 	.word	0x00010a38

0000a15c <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
    a15c:	b508      	push	{r3, lr}
    a15e:	4603      	mov	r3, r0
    a160:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    a162:	b12b      	cbz	r3, a170 <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
    a164:	4a04      	ldr	r2, [pc, #16]	; (a178 <log_set_timestamp_func+0x1c>)
    a166:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
    a168:	f000 fa7a 	bl	a660 <log_output_timestamp_freq_set>
	}

	return 0;
    a16c:	2000      	movs	r0, #0
}
    a16e:	bd08      	pop	{r3, pc}
		return -EINVAL;
    a170:	f06f 0015 	mvn.w	r0, #21
    a174:	e7fb      	b.n	a16e <log_set_timestamp_func+0x12>
    a176:	bf00      	nop
    a178:	2000802c 	.word	0x2000802c

0000a17c <log_core_init>:
	panic_mode = false;
    a17c:	2300      	movs	r3, #0
    a17e:	4a05      	ldr	r2, [pc, #20]	; (a194 <log_core_init+0x18>)
		log_set_timestamp_func(default_get_timestamp,
    a180:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    a184:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    a186:	4a04      	ldr	r2, [pc, #16]	; (a198 <log_core_init+0x1c>)
		log_set_timestamp_func(default_get_timestamp,
    a188:	4804      	ldr	r0, [pc, #16]	; (a19c <log_core_init+0x20>)
	dropped_cnt = 0;
    a18a:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    a18c:	4a04      	ldr	r2, [pc, #16]	; (a1a0 <log_core_init+0x24>)
    a18e:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    a190:	f7ff bfe4 	b.w	a15c <log_set_timestamp_func>
    a194:	2000854f 	.word	0x2000854f
    a198:	200082ec 	.word	0x200082ec
    a19c:	0000fb51 	.word	0x0000fb51
    a1a0:	200082f0 	.word	0x200082f0

0000a1a4 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
    a1a4:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    a1a6:	4d0b      	ldr	r5, [pc, #44]	; (a1d4 <z_impl_log_panic+0x30>)
    a1a8:	7829      	ldrb	r1, [r5, #0]
    a1aa:	b941      	cbnz	r1, a1be <z_impl_log_panic+0x1a>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
    a1ac:	2001      	movs	r0, #1
    a1ae:	f7ff ff67 	bl	a080 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a1b2:	4c09      	ldr	r4, [pc, #36]	; (a1d8 <z_impl_log_panic+0x34>)
    a1b4:	4e09      	ldr	r6, [pc, #36]	; (a1dc <z_impl_log_panic+0x38>)
    a1b6:	42b4      	cmp	r4, r6
    a1b8:	d302      	bcc.n	a1c0 <z_impl_log_panic+0x1c>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
    a1ba:	2301      	movs	r3, #1
    a1bc:	702b      	strb	r3, [r5, #0]
}
    a1be:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    a1c0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    a1c2:	795b      	ldrb	r3, [r3, #5]
    a1c4:	b11b      	cbz	r3, a1ce <z_impl_log_panic+0x2a>
	backend->api->panic(backend);
    a1c6:	6823      	ldr	r3, [r4, #0]
    a1c8:	4620      	mov	r0, r4
    a1ca:	689b      	ldr	r3, [r3, #8]
    a1cc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a1ce:	3410      	adds	r4, #16
    a1d0:	e7f1      	b.n	a1b6 <z_impl_log_panic+0x12>
    a1d2:	bf00      	nop
    a1d4:	2000854f 	.word	0x2000854f
    a1d8:	00010a04 	.word	0x00010a04
    a1dc:	00010a14 	.word	0x00010a14

0000a1e0 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
    a1e0:	b510      	push	{r4, lr}
    a1e2:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    a1e4:	4806      	ldr	r0, [pc, #24]	; (a200 <z_log_dropped+0x20>)
    a1e6:	f005 fcb5 	bl	fb54 <atomic_inc>
	if (buffered) {
    a1ea:	b13c      	cbz	r4, a1fc <z_log_dropped+0x1c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    a1ec:	4b05      	ldr	r3, [pc, #20]	; (a204 <z_log_dropped+0x24>)
    a1ee:	e8d3 1fef 	ldaex	r1, [r3]
    a1f2:	3901      	subs	r1, #1
    a1f4:	e8c3 1fe2 	stlex	r2, r1, [r3]
    a1f8:	2a00      	cmp	r2, #0
    a1fa:	d1f8      	bne.n	a1ee <z_log_dropped+0xe>
		atomic_dec(&buffered_cnt);
	}
}
    a1fc:	bd10      	pop	{r4, pc}
    a1fe:	bf00      	nop
    a200:	200082ec 	.word	0x200082ec
    a204:	200082f0 	.word	0x200082f0

0000a208 <z_log_msg_commit>:
#endif
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
    a208:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    a20a:	4b0a      	ldr	r3, [pc, #40]	; (a234 <z_log_msg_commit+0x2c>)
{
    a20c:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    a20e:	681b      	ldr	r3, [r3, #0]
    a210:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a212:	4c09      	ldr	r4, [pc, #36]	; (a238 <z_log_msg_commit+0x30>)
    a214:	4e09      	ldr	r6, [pc, #36]	; (a23c <z_log_msg_commit+0x34>)
	msg->hdr.timestamp = timestamp_func();
    a216:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a218:	42b4      	cmp	r4, r6
    a21a:	d300      	bcc.n	a21e <z_log_msg_commit+0x16>
	msg_commit(&log_buffer, msg);
}
    a21c:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    a21e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    a220:	795b      	ldrb	r3, [r3, #5]
    a222:	b123      	cbz	r3, a22e <z_log_msg_commit+0x26>
	backend->api->process(backend, msg);
    a224:	6823      	ldr	r3, [r4, #0]
    a226:	4629      	mov	r1, r5
    a228:	4620      	mov	r0, r4
    a22a:	681b      	ldr	r3, [r3, #0]
    a22c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a22e:	3410      	adds	r4, #16
    a230:	e7f2      	b.n	a218 <z_log_msg_commit+0x10>
    a232:	bf00      	nop
    a234:	2000802c 	.word	0x2000802c
    a238:	00010a04 	.word	0x00010a04
    a23c:	00010a14 	.word	0x00010a14

0000a240 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    a240:	4a04      	ldr	r2, [pc, #16]	; (a254 <log_source_name_get+0x14>)
    a242:	4b05      	ldr	r3, [pc, #20]	; (a258 <log_source_name_get+0x18>)
    a244:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    a246:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    a24a:	bf34      	ite	cc
    a24c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    a250:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    a252:	4770      	bx	lr
    a254:	0001095c 	.word	0x0001095c
    a258:	00010a04 	.word	0x00010a04

0000a25c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    a25c:	4b08      	ldr	r3, [pc, #32]	; (a280 <log_backend_enable+0x24>)
{
    a25e:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    a260:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
    a262:	6844      	ldr	r4, [r0, #4]
    a264:	111b      	asrs	r3, r3, #4
    a266:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    a268:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    a26a:	6843      	ldr	r3, [r0, #4]
    a26c:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    a26e:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    a270:	6843      	ldr	r3, [r0, #4]
    a272:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    a274:	6843      	ldr	r3, [r0, #4]
    a276:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    a278:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    a27a:	f005 bc89 	b.w	fb90 <z_log_notify_backend_enabled>
    a27e:	bf00      	nop
    a280:	00010a04 	.word	0x00010a04

0000a284 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    a284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a288:	b085      	sub	sp, #20
    a28a:	af02      	add	r7, sp, #8
    a28c:	4604      	mov	r4, r0
    a28e:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
    a292:	460e      	mov	r6, r1
    a294:	4693      	mov	fp, r2
    a296:	4698      	mov	r8, r3
    a298:	6b3d      	ldr	r5, [r7, #48]	; 0x30
	int plen;

	if (fmt) {
    a29a:	f1ba 0f00 	cmp.w	sl, #0
    a29e:	d033      	beq.n	a308 <z_impl_z_log_msg_runtime_vcreate+0x84>
		va_list ap2;

		va_copy(ap2, ap);
    a2a0:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    a2a4:	f8cd 9000 	str.w	r9, [sp]
    a2a8:	2110      	movs	r1, #16
    a2aa:	4653      	mov	r3, sl
    a2ac:	2000      	movs	r0, #0
    a2ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    a2b0:	f7fe fa74 	bl	879c <cbvprintf_package>
    a2b4:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    a2b6:	4a15      	ldr	r2, [pc, #84]	; (a30c <z_impl_z_log_msg_runtime_vcreate+0x88>)
    a2b8:	f004 0407 	and.w	r4, r4, #7
    a2bc:	f00b 0b07 	and.w	fp, fp, #7
    a2c0:	00e4      	lsls	r4, r4, #3
    a2c2:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    a2c6:	ea02 2241 	and.w	r2, r2, r1, lsl #9
    a2ca:	4314      	orrs	r4, r2
    a2cc:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    a2d0:	3517      	adds	r5, #23
    a2d2:	440d      	add	r5, r1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    a2d4:	f025 0507 	bic.w	r5, r5, #7
    a2d8:	ebad 0d05 	sub.w	sp, sp, r5
    a2dc:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    a2de:	f1ba 0f00 	cmp.w	sl, #0
    a2e2:	d007      	beq.n	a2f4 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    a2e4:	f8cd 9000 	str.w	r9, [sp]
    a2e8:	4653      	mov	r3, sl
    a2ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    a2ec:	f105 0010 	add.w	r0, r5, #16
    a2f0:	f7fe fa54 	bl	879c <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    a2f4:	4643      	mov	r3, r8
    a2f6:	4622      	mov	r2, r4
    a2f8:	4631      	mov	r1, r6
    a2fa:	4628      	mov	r0, r5
    a2fc:	f005 fc4b 	bl	fb96 <z_log_msg_finalize>
	}
}
    a300:	370c      	adds	r7, #12
    a302:	46bd      	mov	sp, r7
    a304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    a308:	4651      	mov	r1, sl
    a30a:	e7d4      	b.n	a2b6 <z_impl_z_log_msg_runtime_vcreate+0x32>
    a30c:	000ffe00 	.word	0x000ffe00

0000a310 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    a310:	b40e      	push	{r1, r2, r3}
    a312:	b503      	push	{r0, r1, lr}
    a314:	ab03      	add	r3, sp, #12
    a316:	f853 2b04 	ldr.w	r2, [r3], #4
    a31a:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    a31c:	4804      	ldr	r0, [pc, #16]	; (a330 <print_formatted+0x20>)
	va_start(args, fmt);
    a31e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    a320:	f005 fc7b 	bl	fc1a <cbvprintf>
	va_end(args);

	return length;
}
    a324:	b002      	add	sp, #8
    a326:	f85d eb04 	ldr.w	lr, [sp], #4
    a32a:	b003      	add	sp, #12
    a32c:	4770      	bx	lr
    a32e:	bf00      	nop
    a330:	0000fbc9 	.word	0x0000fbc9

0000a334 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    a334:	06ca      	lsls	r2, r1, #27
    a336:	d405      	bmi.n	a344 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    a338:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    a33a:	bf4c      	ite	mi
    a33c:	4902      	ldrmi	r1, [pc, #8]	; (a348 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    a33e:	4903      	ldrpl	r1, [pc, #12]	; (a34c <newline_print+0x18>)
    a340:	f7ff bfe6 	b.w	a310 <print_formatted>
	}
}
    a344:	4770      	bx	lr
    a346:	bf00      	nop
    a348:	0001107b 	.word	0x0001107b
    a34c:	0001107a 	.word	0x0001107a

0000a350 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a354:	b089      	sub	sp, #36	; 0x24
    a356:	469b      	mov	fp, r3
    a358:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    a35c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    a360:	4604      	mov	r4, r0
    a362:	9304      	str	r3, [sp, #16]
    a364:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    a368:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    a36a:	9b04      	ldr	r3, [sp, #16]
{
    a36c:	460d      	mov	r5, r1
    a36e:	9206      	str	r2, [sp, #24]
	if (!raw_string) {
    a370:	2b00      	cmp	r3, #0
    a372:	f000 8087 	beq.w	a484 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    a376:	f006 0308 	and.w	r3, r6, #8
    a37a:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    a37c:	f005 fc09 	bl	fb92 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    a380:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    a384:	4602      	mov	r2, r0
    a386:	2800      	cmp	r0, #0
    a388:	d04b      	beq.n	a422 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    a38a:	4620      	mov	r0, r4
    a38c:	4985      	ldr	r1, [pc, #532]	; (a5a4 <log_output_process+0x254>)
    a38e:	f7ff ffbf 	bl	a310 <print_formatted>
    a392:	4680      	mov	r8, r0
	if (stamp) {
    a394:	f1ba 0f00 	cmp.w	sl, #0
    a398:	d008      	beq.n	a3ac <log_output_process+0x5c>
	if (!format) {
    a39a:	f016 0f44 	tst.w	r6, #68	; 0x44
    a39e:	d142      	bne.n	a426 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    a3a0:	462a      	mov	r2, r5
    a3a2:	4620      	mov	r0, r4
    a3a4:	4980      	ldr	r1, [pc, #512]	; (a5a8 <log_output_process+0x258>)
    a3a6:	f7ff ffb3 	bl	a310 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    a3aa:	4480      	add	r8, r0
	if (color) {
    a3ac:	f006 0301 	and.w	r3, r6, #1
    a3b0:	b15b      	cbz	r3, a3ca <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    a3b2:	4b7e      	ldr	r3, [pc, #504]	; (a5ac <log_output_process+0x25c>)
    a3b4:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    a3b6:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    a3b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    a3bc:	4b7c      	ldr	r3, [pc, #496]	; (a5b0 <log_output_process+0x260>)
    a3be:	497d      	ldr	r1, [pc, #500]	; (a5b4 <log_output_process+0x264>)
    a3c0:	2a00      	cmp	r2, #0
    a3c2:	bf08      	it	eq
    a3c4:	461a      	moveq	r2, r3
    a3c6:	f7ff ffa3 	bl	a310 <print_formatted>
	if (level_on) {
    a3ca:	f006 0308 	and.w	r3, r6, #8
    a3ce:	2b00      	cmp	r3, #0
    a3d0:	d055      	beq.n	a47e <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    a3d2:	4b79      	ldr	r3, [pc, #484]	; (a5b8 <log_output_process+0x268>)
    a3d4:	9a04      	ldr	r2, [sp, #16]
    a3d6:	4620      	mov	r0, r4
    a3d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    a3dc:	4977      	ldr	r1, [pc, #476]	; (a5bc <log_output_process+0x26c>)
    a3de:	f7ff ff97 	bl	a310 <print_formatted>
    a3e2:	4605      	mov	r5, r0
	if (domain) {
    a3e4:	9b06      	ldr	r3, [sp, #24]
    a3e6:	b12b      	cbz	r3, a3f4 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    a3e8:	461a      	mov	r2, r3
    a3ea:	4620      	mov	r0, r4
    a3ec:	4974      	ldr	r1, [pc, #464]	; (a5c0 <log_output_process+0x270>)
    a3ee:	f7ff ff8f 	bl	a310 <print_formatted>
    a3f2:	4405      	add	r5, r0
	if (source) {
    a3f4:	f1bb 0f00 	cmp.w	fp, #0
    a3f8:	d005      	beq.n	a406 <log_output_process+0xb6>
		total += print_formatted(output,
    a3fa:	465a      	mov	r2, fp
    a3fc:	4620      	mov	r0, r4
    a3fe:	4971      	ldr	r1, [pc, #452]	; (a5c4 <log_output_process+0x274>)
    a400:	f7ff ff86 	bl	a310 <print_formatted>
    a404:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    a406:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    a408:	f1b9 0f00 	cmp.w	r9, #0
    a40c:	d149      	bne.n	a4a2 <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    a40e:	2f00      	cmp	r7, #0
    a410:	d14f      	bne.n	a4b2 <log_output_process+0x162>
	if (color) {
    a412:	07f3      	lsls	r3, r6, #31
    a414:	f100 80c0 	bmi.w	a598 <log_output_process+0x248>
	newline_print(output, flags);
    a418:	4631      	mov	r1, r6
    a41a:	4620      	mov	r0, r4
    a41c:	f7ff ff8a 	bl	a334 <newline_print>
}
    a420:	e0b4      	b.n	a58c <log_output_process+0x23c>
	uint32_t length = 0U;
    a422:	4680      	mov	r8, r0
    a424:	e7b6      	b.n	a394 <log_output_process+0x44>
	} else if (freq != 0U) {
    a426:	4b68      	ldr	r3, [pc, #416]	; (a5c8 <log_output_process+0x278>)
    a428:	6818      	ldr	r0, [r3, #0]
    a42a:	2800      	cmp	r0, #0
    a42c:	d0bd      	beq.n	a3aa <log_output_process+0x5a>
		timestamp /= timestamp_div;
    a42e:	4b67      	ldr	r3, [pc, #412]	; (a5cc <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    a430:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    a434:	681b      	ldr	r3, [r3, #0]
    a436:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    a43a:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    a43e:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    a442:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    a446:	fb0e f505 	mul.w	r5, lr, r5
    a44a:	fbb3 faf2 	udiv	sl, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    a44e:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    a452:	213c      	movs	r1, #60	; 0x3c
    a454:	fb02 321a 	mls	r2, r2, sl, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    a458:	fb00 551c 	mls	r5, r0, ip, r5
		mins = seconds / 60U;
    a45c:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    a460:	fb0e f505 	mul.w	r5, lr, r5
    a464:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    a468:	fb01 2213 	mls	r2, r1, r3, r2
    a46c:	4620      	mov	r0, r4
    a46e:	9200      	str	r2, [sp, #0]
    a470:	e9cd c501 	strd	ip, r5, [sp, #4]
    a474:	4652      	mov	r2, sl
    a476:	4956      	ldr	r1, [pc, #344]	; (a5d0 <log_output_process+0x280>)
    a478:	f7ff ff4a 	bl	a310 <print_formatted>
    a47c:	e795      	b.n	a3aa <log_output_process+0x5a>
	int total = 0;
    a47e:	f006 0508 	and.w	r5, r6, #8
    a482:	e7af      	b.n	a3e4 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    a484:	f1bb 0f01 	cmp.w	fp, #1
    a488:	d106      	bne.n	a498 <log_output_process+0x148>
	if (package) {
    a48a:	f1b9 0f00 	cmp.w	r9, #0
    a48e:	d164      	bne.n	a55a <log_output_process+0x20a>
	if (data_len) {
    a490:	2f00      	cmp	r7, #0
    a492:	d07b      	beq.n	a58c <log_output_process+0x23c>
		prefix_offset = 0;
    a494:	2500      	movs	r5, #0
    a496:	e00c      	b.n	a4b2 <log_output_process+0x162>
	if (package) {
    a498:	f1b9 0f00 	cmp.w	r9, #0
    a49c:	d0f8      	beq.n	a490 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    a49e:	484d      	ldr	r0, [pc, #308]	; (a5d4 <log_output_process+0x284>)
    a4a0:	e05c      	b.n	a55c <log_output_process+0x20c>
		cb = out_func;
    a4a2:	484d      	ldr	r0, [pc, #308]	; (a5d8 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    a4a4:	464b      	mov	r3, r9
    a4a6:	4622      	mov	r2, r4
    a4a8:	494c      	ldr	r1, [pc, #304]	; (a5dc <log_output_process+0x28c>)
    a4aa:	f005 f827 	bl	f4fc <cbpprintf_external>
	if (data_len) {
    a4ae:	2f00      	cmp	r7, #0
    a4b0:	d068      	beq.n	a584 <log_output_process+0x234>
		print_formatted(output, " ");
    a4b2:	f8df 912c 	ldr.w	r9, [pc, #300]	; a5e0 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    a4b6:	f8df a12c 	ldr.w	sl, [pc, #300]	; a5e4 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    a4ba:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    a4bc:	4631      	mov	r1, r6
    a4be:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    a4c0:	46b8      	mov	r8, r7
	for (int i = 0; i < prefix_offset; i++) {
    a4c2:	f04f 0b00 	mov.w	fp, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    a4c6:	bf28      	it	cs
    a4c8:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    a4cc:	f7ff ff32 	bl	a334 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    a4d0:	455d      	cmp	r5, fp
    a4d2:	dc45      	bgt.n	a560 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    a4d4:	9b05      	ldr	r3, [sp, #20]
    a4d6:	4651      	mov	r1, sl
    a4d8:	4620      	mov	r0, r4
    a4da:	781a      	ldrb	r2, [r3, #0]
    a4dc:	f7ff ff18 	bl	a310 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    a4e0:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    a4e4:	f01b 0f07 	tst.w	fp, #7
    a4e8:	d103      	bne.n	a4f2 <log_output_process+0x1a2>
			print_formatted(output, " ");
    a4ea:	4649      	mov	r1, r9
    a4ec:	4620      	mov	r0, r4
    a4ee:	f7ff ff0f 	bl	a310 <print_formatted>
		if (i < length) {
    a4f2:	45d8      	cmp	r8, fp
    a4f4:	d93b      	bls.n	a56e <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    a4f6:	9b05      	ldr	r3, [sp, #20]
    a4f8:	4651      	mov	r1, sl
    a4fa:	4620      	mov	r0, r4
    a4fc:	f813 200b 	ldrb.w	r2, [r3, fp]
    a500:	f7ff ff06 	bl	a310 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    a504:	f10b 0b01 	add.w	fp, fp, #1
    a508:	f1bb 0f10 	cmp.w	fp, #16
    a50c:	d1ea      	bne.n	a4e4 <log_output_process+0x194>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    a50e:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    a512:	4620      	mov	r0, r4
    a514:	4934      	ldr	r1, [pc, #208]	; (a5e8 <log_output_process+0x298>)
    a516:	f7ff fefb 	bl	a310 <print_formatted>
		if (i < length) {
    a51a:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    a51c:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    a51e:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    a520:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    a522:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    a526:	295f      	cmp	r1, #95	; 0x5f
    a528:	bf28      	it	cs
    a52a:	222e      	movcs	r2, #46	; 0x2e
    a52c:	492f      	ldr	r1, [pc, #188]	; (a5ec <log_output_process+0x29c>)
    a52e:	f7ff feef 	bl	a310 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    a532:	f10b 0b01 	add.w	fp, fp, #1
    a536:	f1bb 0f10 	cmp.w	fp, #16
    a53a:	d01d      	beq.n	a578 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    a53c:	f01b 0f07 	tst.w	fp, #7
    a540:	d103      	bne.n	a54a <log_output_process+0x1fa>
			print_formatted(output, " ");
    a542:	4649      	mov	r1, r9
    a544:	4620      	mov	r0, r4
    a546:	f7ff fee3 	bl	a310 <print_formatted>
		if (i < length) {
    a54a:	45d8      	cmp	r8, fp
    a54c:	465a      	mov	r2, fp
    a54e:	d8e5      	bhi.n	a51c <log_output_process+0x1cc>
			print_formatted(output, " ");
    a550:	4649      	mov	r1, r9
    a552:	4620      	mov	r0, r4
    a554:	f7ff fedc 	bl	a310 <print_formatted>
    a558:	e7eb      	b.n	a532 <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    a55a:	481f      	ldr	r0, [pc, #124]	; (a5d8 <log_output_process+0x288>)
		prefix_offset = 0;
    a55c:	9d04      	ldr	r5, [sp, #16]
    a55e:	e7a1      	b.n	a4a4 <log_output_process+0x154>
		print_formatted(output, " ");
    a560:	4649      	mov	r1, r9
    a562:	4620      	mov	r0, r4
    a564:	f7ff fed4 	bl	a310 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    a568:	f10b 0b01 	add.w	fp, fp, #1
    a56c:	e7b0      	b.n	a4d0 <log_output_process+0x180>
			print_formatted(output, "   ");
    a56e:	4620      	mov	r0, r4
    a570:	491f      	ldr	r1, [pc, #124]	; (a5f0 <log_output_process+0x2a0>)
    a572:	f7ff fecd 	bl	a310 <print_formatted>
    a576:	e7c5      	b.n	a504 <log_output_process+0x1b4>
		data += length;
    a578:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    a57a:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    a57e:	4443      	add	r3, r8
    a580:	9305      	str	r3, [sp, #20]
	} while (len);
    a582:	d19a      	bne.n	a4ba <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    a584:	9b04      	ldr	r3, [sp, #16]
    a586:	2b00      	cmp	r3, #0
    a588:	f47f af43 	bne.w	a412 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    a58c:	4620      	mov	r0, r4
}
    a58e:	b009      	add	sp, #36	; 0x24
    a590:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    a594:	f005 bb48 	b.w	fc28 <log_output_flush>
		print_formatted(output, "%s", log_color);
    a598:	4620      	mov	r0, r4
    a59a:	4a05      	ldr	r2, [pc, #20]	; (a5b0 <log_output_process+0x260>)
    a59c:	4905      	ldr	r1, [pc, #20]	; (a5b4 <log_output_process+0x264>)
    a59e:	f7ff feb7 	bl	a310 <print_formatted>
}
    a5a2:	e739      	b.n	a418 <log_output_process+0xc8>
    a5a4:	00011082 	.word	0x00011082
    a5a8:	00011086 	.word	0x00011086
    a5ac:	00010a48 	.word	0x00010a48
    a5b0:	0001107d 	.word	0x0001107d
    a5b4:	000110ab 	.word	0x000110ab
    a5b8:	00010a5c 	.word	0x00010a5c
    a5bc:	000110ae 	.word	0x000110ae
    a5c0:	000110b4 	.word	0x000110b4
    a5c4:	000110b8 	.word	0x000110b8
    a5c8:	200082fc 	.word	0x200082fc
    a5cc:	200082f8 	.word	0x200082f8
    a5d0:	0001108f 	.word	0x0001108f
    a5d4:	0000fbe5 	.word	0x0000fbe5
    a5d8:	0000fbc9 	.word	0x0000fbc9
    a5dc:	0000fc1b 	.word	0x0000fc1b
    a5e0:	000110c5 	.word	0x000110c5
    a5e4:	000110bd 	.word	0x000110bd
    a5e8:	000110c7 	.word	0x000110c7
    a5ec:	000110c9 	.word	0x000110c9
    a5f0:	000110c3 	.word	0x000110c3

0000a5f4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    a5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    a5f8:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    a5fa:	684b      	ldr	r3, [r1, #4]
    a5fc:	4605      	mov	r5, r0
    a5fe:	460c      	mov	r4, r1
    a600:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    a602:	688e      	ldr	r6, [r1, #8]
    a604:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    a606:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    a60a:	b15b      	cbz	r3, a624 <log_output_msg_process+0x30>
    a60c:	4a13      	ldr	r2, [pc, #76]	; (a65c <log_output_msg_process+0x68>)
    a60e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    a610:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    a614:	2900      	cmp	r1, #0
    a616:	db1f      	blt.n	a658 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    a618:	7820      	ldrb	r0, [r4, #0]
    a61a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    a61e:	f7ff fe0f 	bl	a240 <log_source_name_get>
    a622:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    a624:	4621      	mov	r1, r4
    a626:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    a62a:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    a62c:	f3c2 224a 	ubfx	r2, r2, #9, #11
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    a630:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    a632:	eb01 0402 	add.w	r4, r1, r2
    a636:	bf08      	it	eq
    a638:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    a63a:	f3c0 100b 	ubfx	r0, r0, #4, #12
    a63e:	e9cd 0803 	strd	r0, r8, [sp, #12]
    a642:	e9cd 1401 	strd	r1, r4, [sp, #4]
    a646:	2200      	movs	r2, #0
    a648:	4631      	mov	r1, r6
    a64a:	4628      	mov	r0, r5
    a64c:	9700      	str	r7, [sp, #0]
    a64e:	f7ff fe7f 	bl	a350 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    a652:	b006      	add	sp, #24
    a654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    a658:	2300      	movs	r3, #0
    a65a:	e7e3      	b.n	a624 <log_output_msg_process+0x30>
    a65c:	0001095c 	.word	0x0001095c

0000a660 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    a660:	2100      	movs	r1, #0
    a662:	2301      	movs	r3, #1
    a664:	4a06      	ldr	r2, [pc, #24]	; (a680 <log_output_timestamp_freq_set+0x20>)
    a666:	4290      	cmp	r0, r2
    a668:	d806      	bhi.n	a678 <log_output_timestamp_freq_set+0x18>
    a66a:	4a06      	ldr	r2, [pc, #24]	; (a684 <log_output_timestamp_freq_set+0x24>)
    a66c:	b901      	cbnz	r1, a670 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    a66e:	2301      	movs	r3, #1
    a670:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    a672:	4b05      	ldr	r3, [pc, #20]	; (a688 <log_output_timestamp_freq_set+0x28>)
    a674:	6018      	str	r0, [r3, #0]
}
    a676:	4770      	bx	lr
		timestamp_div *= 2U;
    a678:	2101      	movs	r1, #1
		frequency /= 2U;
    a67a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    a67c:	005b      	lsls	r3, r3, #1
    a67e:	e7f2      	b.n	a666 <log_output_timestamp_freq_set+0x6>
    a680:	000f4240 	.word	0x000f4240
    a684:	200082f8 	.word	0x200082f8
    a688:	200082fc 	.word	0x200082fc

0000a68c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    a68c:	4b01      	ldr	r3, [pc, #4]	; (a694 <format_set+0x8>)
	return 0;
}
    a68e:	2000      	movs	r0, #0
	log_format_current = log_type;
    a690:	6019      	str	r1, [r3, #0]
}
    a692:	4770      	bx	lr
    a694:	20008314 	.word	0x20008314

0000a698 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    a698:	2201      	movs	r2, #1
    a69a:	4b02      	ldr	r3, [pc, #8]	; (a6a4 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    a69c:	4802      	ldr	r0, [pc, #8]	; (a6a8 <panic+0x10>)
    a69e:	701a      	strb	r2, [r3, #0]
    a6a0:	f005 bac2 	b.w	fc28 <log_output_flush>
    a6a4:	20008551 	.word	0x20008551
    a6a8:	00010a8c 	.word	0x00010a8c

0000a6ac <process>:
{
    a6ac:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    a6ae:	4b06      	ldr	r3, [pc, #24]	; (a6c8 <process+0x1c>)
{
    a6b0:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    a6b2:	6818      	ldr	r0, [r3, #0]
    a6b4:	f7ff fd4c 	bl	a150 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    a6b8:	4621      	mov	r1, r4
}
    a6ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    a6be:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    a6c0:	220f      	movs	r2, #15
    a6c2:	4802      	ldr	r0, [pc, #8]	; (a6cc <process+0x20>)
    a6c4:	4718      	bx	r3
    a6c6:	bf00      	nop
    a6c8:	20008314 	.word	0x20008314
    a6cc:	00010a8c 	.word	0x00010a8c

0000a6d0 <char_out>:
{
    a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6d2:	460d      	mov	r5, r1
    a6d4:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    a6d6:	4f06      	ldr	r7, [pc, #24]	; (a6f0 <char_out+0x20>)
    a6d8:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    a6da:	42b4      	cmp	r4, r6
    a6dc:	d101      	bne.n	a6e2 <char_out+0x12>
}
    a6de:	4628      	mov	r0, r5
    a6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    a6e2:	f814 1b01 	ldrb.w	r1, [r4], #1
    a6e6:	68bb      	ldr	r3, [r7, #8]
    a6e8:	4801      	ldr	r0, [pc, #4]	; (a6f0 <char_out+0x20>)
    a6ea:	685b      	ldr	r3, [r3, #4]
    a6ec:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    a6ee:	e7f4      	b.n	a6da <char_out+0xa>
    a6f0:	000106a4 	.word	0x000106a4

0000a6f4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    a6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a6f8:	4605      	mov	r5, r0
	__asm__ volatile(
    a6fa:	f04f 0320 	mov.w	r3, #32
    a6fe:	f3ef 8611 	mrs	r6, BASEPRI
    a702:	f383 8812 	msr	BASEPRI_MAX, r3
    a706:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    a70a:	f04f 090c 	mov.w	r9, #12
	return list->head;
    a70e:	4b0d      	ldr	r3, [pc, #52]	; (a744 <pm_state_notify+0x50>)
    a710:	4f0d      	ldr	r7, [pc, #52]	; (a748 <pm_state_notify+0x54>)
    a712:	681c      	ldr	r4, [r3, #0]
    a714:	f8df 8034 	ldr.w	r8, [pc, #52]	; a74c <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    a718:	b92c      	cbnz	r4, a726 <pm_state_notify+0x32>
	__asm__ volatile(
    a71a:	f386 8811 	msr	BASEPRI, r6
    a71e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    a722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    a726:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    a72a:	2d00      	cmp	r5, #0
    a72c:	bf18      	it	ne
    a72e:	4613      	movne	r3, r2
		if (callback) {
    a730:	b12b      	cbz	r3, a73e <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    a732:	f898 2010 	ldrb.w	r2, [r8, #16]
    a736:	fb09 f202 	mul.w	r2, r9, r2
    a73a:	5cb8      	ldrb	r0, [r7, r2]
    a73c:	4798      	blx	r3
	return node->next;
    a73e:	6824      	ldr	r4, [r4, #0]
    a740:	e7ea      	b.n	a718 <pm_state_notify+0x24>
    a742:	bf00      	nop
    a744:	20008330 	.word	0x20008330
    a748:	20008324 	.word	0x20008324
    a74c:	20008518 	.word	0x20008518

0000a750 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    a750:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    a752:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    a754:	4b16      	ldr	r3, [pc, #88]	; (a7b0 <pm_system_resume+0x60>)
    a756:	7c1c      	ldrb	r4, [r3, #16]
    a758:	f004 031f 	and.w	r3, r4, #31
    a75c:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a75e:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a760:	4b14      	ldr	r3, [pc, #80]	; (a7b4 <pm_system_resume+0x64>)
    a762:	0961      	lsrs	r1, r4, #5
    a764:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    a768:	e8d3 1fef 	ldaex	r1, [r3]
    a76c:	ea01 0500 	and.w	r5, r1, r0
    a770:	e8c3 5fe6 	stlex	r6, r5, [r3]
    a774:	2e00      	cmp	r6, #0
    a776:	d1f7      	bne.n	a768 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    a778:	420a      	tst	r2, r1
    a77a:	d013      	beq.n	a7a4 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    a77c:	4b0e      	ldr	r3, [pc, #56]	; (a7b8 <pm_system_resume+0x68>)
    a77e:	4d0f      	ldr	r5, [pc, #60]	; (a7bc <pm_system_resume+0x6c>)
    a780:	b18b      	cbz	r3, a7a6 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    a782:	230c      	movs	r3, #12
    a784:	4363      	muls	r3, r4
    a786:	18ea      	adds	r2, r5, r3
    a788:	7851      	ldrb	r1, [r2, #1]
    a78a:	5ce8      	ldrb	r0, [r5, r3]
    a78c:	f005 f85d 	bl	f84a <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    a790:	2000      	movs	r0, #0
    a792:	f7ff ffaf 	bl	a6f4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    a796:	230c      	movs	r3, #12
    a798:	435c      	muls	r4, r3
    a79a:	2300      	movs	r3, #0
    a79c:	192a      	adds	r2, r5, r4
    a79e:	512b      	str	r3, [r5, r4]
    a7a0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    a7a4:	bd70      	pop	{r4, r5, r6, pc}
    a7a6:	f383 8811 	msr	BASEPRI, r3
    a7aa:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    a7ae:	e7ef      	b.n	a790 <pm_system_resume+0x40>
    a7b0:	20008518 	.word	0x20008518
    a7b4:	20008338 	.word	0x20008338
    a7b8:	0000f84b 	.word	0x0000f84b
    a7bc:	20008324 	.word	0x20008324

0000a7c0 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    a7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    a7c4:	4b32      	ldr	r3, [pc, #200]	; (a890 <pm_system_suspend+0xd0>)
{
    a7c6:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    a7c8:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    a7ca:	f04f 0320 	mov.w	r3, #32
    a7ce:	f3ef 8811 	mrs	r8, BASEPRI
    a7d2:	f383 8812 	msr	BASEPRI_MAX, r3
    a7d6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    a7da:	240c      	movs	r4, #12
    a7dc:	436c      	muls	r4, r5
    a7de:	4b2d      	ldr	r3, [pc, #180]	; (a894 <pm_system_suspend+0xd4>)
    a7e0:	4e2d      	ldr	r6, [pc, #180]	; (a898 <pm_system_suspend+0xd8>)
    a7e2:	5d19      	ldrb	r1, [r3, r4]
    a7e4:	191a      	adds	r2, r3, r4
    a7e6:	2900      	cmp	r1, #0
    a7e8:	d047      	beq.n	a87a <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    a7ea:	ca07      	ldmia	r2, {r0, r1, r2}
    a7ec:	eb06 0c04 	add.w	ip, r6, r4
    a7f0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    a7f4:	2200      	movs	r2, #0
    a7f6:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    a7f8:	f388 8811 	msr	BASEPRI, r8
    a7fc:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    a800:	230c      	movs	r3, #12
    a802:	436b      	muls	r3, r5
    a804:	5cf0      	ldrb	r0, [r6, r3]
    a806:	18f2      	adds	r2, r6, r3
    a808:	b3a8      	cbz	r0, a876 <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    a80a:	1c7b      	adds	r3, r7, #1
    a80c:	d010      	beq.n	a830 <pm_system_suspend+0x70>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    a80e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    a812:	2100      	movs	r1, #0
    a814:	f8d2 c008 	ldr.w	ip, [r2, #8]
    a818:	4c20      	ldr	r4, [pc, #128]	; (a89c <pm_system_suspend+0xdc>)
    a81a:	2300      	movs	r3, #0
    a81c:	fbec 4100 	umlal	r4, r1, ip, r0
    a820:	4a1f      	ldr	r2, [pc, #124]	; (a8a0 <pm_system_suspend+0xe0>)
    a822:	4620      	mov	r0, r4
    a824:	f7fd fc96 	bl	8154 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    a828:	2101      	movs	r1, #1
    a82a:	1a38      	subs	r0, r7, r0
    a82c:	f002 fcac 	bl	d188 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    a830:	f004 fbaa 	bl	ef88 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    a834:	2001      	movs	r0, #1
    a836:	f7ff ff5d 	bl	a6f4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a83a:	4b1a      	ldr	r3, [pc, #104]	; (a8a4 <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a83c:	096a      	lsrs	r2, r5, #5
    a83e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    a842:	2201      	movs	r2, #1
    a844:	f005 011f 	and.w	r1, r5, #31
    a848:	408a      	lsls	r2, r1
    a84a:	e8d3 0fef 	ldaex	r0, [r3]
    a84e:	4310      	orrs	r0, r2
    a850:	e8c3 0fe1 	stlex	r1, r0, [r3]
    a854:	2900      	cmp	r1, #0
    a856:	d1f8      	bne.n	a84a <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    a858:	4b13      	ldr	r3, [pc, #76]	; (a8a8 <pm_system_suspend+0xe8>)
    a85a:	b13b      	cbz	r3, a86c <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    a85c:	230c      	movs	r3, #12
    a85e:	fb03 f005 	mul.w	r0, r3, r5
    a862:	1833      	adds	r3, r6, r0
    a864:	7859      	ldrb	r1, [r3, #1]
    a866:	5c30      	ldrb	r0, [r6, r0]
    a868:	f004 ffe3 	bl	f832 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    a86c:	f7ff ff70 	bl	a750 <pm_system_resume>
	k_sched_unlock();
    a870:	f004 fb9e 	bl	efb0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    a874:	2001      	movs	r0, #1
}
    a876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    a87a:	4601      	mov	r1, r0
    a87c:	4628      	mov	r0, r5
    a87e:	f000 f815 	bl	a8ac <pm_policy_next_state>
		if (info != NULL) {
    a882:	2800      	cmp	r0, #0
    a884:	d0b8      	beq.n	a7f8 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    a886:	c807      	ldmia	r0, {r0, r1, r2}
    a888:	4434      	add	r4, r6
    a88a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    a88e:	e7b3      	b.n	a7f8 <pm_system_suspend+0x38>
    a890:	20008518 	.word	0x20008518
    a894:	20008318 	.word	0x20008318
    a898:	20008324 	.word	0x20008324
    a89c:	000f423f 	.word	0x000f423f
    a8a0:	000f4240 	.word	0x000f4240
    a8a4:	20008338 	.word	0x20008338
    a8a8:	0000f833 	.word	0x0000f833

0000a8ac <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    a8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8b0:	b085      	sub	sp, #20
    a8b2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    a8b4:	a903      	add	r1, sp, #12
    a8b6:	f000 f843 	bl	a940 <pm_state_cpu_get_all>
    a8ba:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    a8be:	4604      	mov	r4, r0
    a8c0:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    a8c4:	4b1b      	ldr	r3, [pc, #108]	; (a934 <pm_policy_next_state+0x88>)
    a8c6:	9d03      	ldr	r5, [sp, #12]
    a8c8:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    a8cc:	1e43      	subs	r3, r0, #1
    a8ce:	b21b      	sxth	r3, r3
    a8d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a8d4:	f8df 8060 	ldr.w	r8, [pc, #96]	; a938 <pm_policy_next_state+0x8c>
    a8d8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    a8dc:	b924      	cbnz	r4, a8e8 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    a8de:	46a1      	mov	r9, r4
}
    a8e0:	4648      	mov	r0, r9
    a8e2:	b005      	add	sp, #20
    a8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8e8:	46c4      	mov	ip, r8
    a8ea:	4659      	mov	r1, fp
    a8ec:	6868      	ldr	r0, [r5, #4]
    a8ee:	2300      	movs	r3, #0
    a8f0:	fbe0 c107 	umlal	ip, r1, r0, r7
    a8f4:	4a11      	ldr	r2, [pc, #68]	; (a93c <pm_policy_next_state+0x90>)
    a8f6:	4660      	mov	r0, ip
    a8f8:	f7fd fc2c 	bl	8154 <__aeabi_uldivmod>
    a8fc:	46c4      	mov	ip, r8
    a8fe:	4659      	mov	r1, fp
    a900:	9001      	str	r0, [sp, #4]
    a902:	68a8      	ldr	r0, [r5, #8]
    a904:	2300      	movs	r3, #0
    a906:	fbe0 c107 	umlal	ip, r1, r0, r7
    a90a:	4a0c      	ldr	r2, [pc, #48]	; (a93c <pm_policy_next_state+0x90>)
    a90c:	4660      	mov	r0, ip
    a90e:	f7fd fc21 	bl	8154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    a912:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    a916:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    a918:	d001      	beq.n	a91e <pm_policy_next_state+0x72>
    a91a:	4582      	cmp	sl, r0
    a91c:	d905      	bls.n	a92a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    a91e:	1c73      	adds	r3, r6, #1
    a920:	d0de      	beq.n	a8e0 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    a922:	9b01      	ldr	r3, [sp, #4]
    a924:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    a926:	42b0      	cmp	r0, r6
    a928:	d9da      	bls.n	a8e0 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    a92a:	3c01      	subs	r4, #1
    a92c:	b2a4      	uxth	r4, r4
    a92e:	3d0c      	subs	r5, #12
    a930:	e7d4      	b.n	a8dc <pm_policy_next_state+0x30>
    a932:	bf00      	nop
    a934:	20008030 	.word	0x20008030
    a938:	000f423f 	.word	0x000f423f
    a93c:	000f4240 	.word	0x000f4240

0000a940 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    a940:	b908      	cbnz	r0, a946 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    a942:	4b02      	ldr	r3, [pc, #8]	; (a94c <pm_state_cpu_get_all+0xc>)
    a944:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    a946:	2000      	movs	r0, #0
    a948:	4770      	bx	lr
    a94a:	bf00      	nop
    a94c:	00010a9c 	.word	0x00010a9c

0000a950 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    a950:	4901      	ldr	r1, [pc, #4]	; (a958 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    a952:	2210      	movs	r2, #16
	str	r2, [r1]
    a954:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    a956:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    a958:	e000ed10 	.word	0xe000ed10

0000a95c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    a95c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    a95e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    a960:	f380 8811 	msr	BASEPRI, r0
	isb
    a964:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    a968:	b501      	push	{r0, lr}
    a96a:	f7fe fdc7 	bl	94fc <z_arm_on_enter_cpu_idle>
    a96e:	2800      	cmp	r0, #0
    a970:	d002      	beq.n	a978 <_skip_0>
    a972:	f3bf 8f4f 	dsb	sy
    a976:	bf30      	wfi

0000a978 <_skip_0>:
    a978:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    a97c:	b662      	cpsie	i
	isb
    a97e:	f3bf 8f6f 	isb	sy

	bx	lr
    a982:	4770      	bx	lr

0000a984 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    a984:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    a986:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    a988:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    a98c:	b501      	push	{r0, lr}
    a98e:	f7fe fdb5 	bl	94fc <z_arm_on_enter_cpu_idle>
    a992:	2800      	cmp	r0, #0
    a994:	d002      	beq.n	a99c <_skip_1>
    a996:	f3bf 8f4f 	dsb	sy
    a99a:	bf20      	wfe

0000a99c <_skip_1>:
    a99c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	msr	BASEPRI, r0
    a9a0:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    a9a4:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    a9a6:	4770      	bx	lr

0000a9a8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a9a8:	b570      	push	{r4, r5, r6, lr}
    a9aa:	4606      	mov	r6, r0

	if (esf != NULL) {
    a9ac:	460d      	mov	r5, r1
{
    a9ae:	b086      	sub	sp, #24
	if (esf != NULL) {
    a9b0:	2900      	cmp	r1, #0
    a9b2:	d038      	beq.n	aa26 <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    a9b4:	2400      	movs	r4, #0
    a9b6:	688b      	ldr	r3, [r1, #8]
    a9b8:	2201      	movs	r2, #1
    a9ba:	9305      	str	r3, [sp, #20]
    a9bc:	684b      	ldr	r3, [r1, #4]
    a9be:	4620      	mov	r0, r4
    a9c0:	9304      	str	r3, [sp, #16]
    a9c2:	680b      	ldr	r3, [r1, #0]
    a9c4:	491b      	ldr	r1, [pc, #108]	; (aa34 <z_arm_fatal_error+0x8c>)
    a9c6:	9303      	str	r3, [sp, #12]
    a9c8:	4b1b      	ldr	r3, [pc, #108]	; (aa38 <z_arm_fatal_error+0x90>)
    a9ca:	e9cd 4400 	strd	r4, r4, [sp]
    a9ce:	9302      	str	r3, [sp, #8]
    a9d0:	4623      	mov	r3, r4
    a9d2:	f005 f937 	bl	fc44 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    a9d6:	696b      	ldr	r3, [r5, #20]
    a9d8:	2201      	movs	r2, #1
    a9da:	9305      	str	r3, [sp, #20]
    a9dc:	692b      	ldr	r3, [r5, #16]
    a9de:	4620      	mov	r0, r4
    a9e0:	9304      	str	r3, [sp, #16]
    a9e2:	68eb      	ldr	r3, [r5, #12]
    a9e4:	4913      	ldr	r1, [pc, #76]	; (aa34 <z_arm_fatal_error+0x8c>)
    a9e6:	9303      	str	r3, [sp, #12]
    a9e8:	4b14      	ldr	r3, [pc, #80]	; (aa3c <z_arm_fatal_error+0x94>)
    a9ea:	9400      	str	r4, [sp, #0]
    a9ec:	e9cd 4301 	strd	r4, r3, [sp, #4]
    a9f0:	4623      	mov	r3, r4
    a9f2:	f005 f927 	bl	fc44 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    a9f6:	69eb      	ldr	r3, [r5, #28]
    a9f8:	2201      	movs	r2, #1
    a9fa:	9303      	str	r3, [sp, #12]
    a9fc:	4b10      	ldr	r3, [pc, #64]	; (aa40 <z_arm_fatal_error+0x98>)
    a9fe:	4620      	mov	r0, r4
    aa00:	e9cd 4301 	strd	r4, r3, [sp, #4]
    aa04:	490b      	ldr	r1, [pc, #44]	; (aa34 <z_arm_fatal_error+0x8c>)
    aa06:	4623      	mov	r3, r4
    aa08:	9400      	str	r4, [sp, #0]
    aa0a:	f005 f91b 	bl	fc44 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    aa0e:	69ab      	ldr	r3, [r5, #24]
    aa10:	2201      	movs	r2, #1
    aa12:	9303      	str	r3, [sp, #12]
    aa14:	4b0b      	ldr	r3, [pc, #44]	; (aa44 <z_arm_fatal_error+0x9c>)
    aa16:	4620      	mov	r0, r4
    aa18:	e9cd 4301 	strd	r4, r3, [sp, #4]
    aa1c:	4905      	ldr	r1, [pc, #20]	; (aa34 <z_arm_fatal_error+0x8c>)
    aa1e:	4623      	mov	r3, r4
    aa20:	9400      	str	r4, [sp, #0]
    aa22:	f005 f90f 	bl	fc44 <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    aa26:	4629      	mov	r1, r5
    aa28:	4630      	mov	r0, r6
}
    aa2a:	b006      	add	sp, #24
    aa2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    aa30:	f003 bdaa 	b.w	e588 <z_fatal_error>
    aa34:	000109d4 	.word	0x000109d4
    aa38:	00011109 	.word	0x00011109
    aa3c:	00011138 	.word	0x00011138
    aa40:	00011167 	.word	0x00011167
    aa44:	00011176 	.word	0x00011176

0000aa48 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    aa48:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    aa4a:	2800      	cmp	r0, #0
    aa4c:	db07      	blt.n	aa5e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    aa4e:	2301      	movs	r3, #1
    aa50:	0941      	lsrs	r1, r0, #5
    aa52:	4a03      	ldr	r2, [pc, #12]	; (aa60 <arch_irq_enable+0x18>)
    aa54:	f000 001f 	and.w	r0, r0, #31
    aa58:	4083      	lsls	r3, r0
    aa5a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    aa5e:	4770      	bx	lr
    aa60:	e000e100 	.word	0xe000e100

0000aa64 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    aa64:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    aa66:	2800      	cmp	r0, #0
    aa68:	db0c      	blt.n	aa84 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    aa6a:	2201      	movs	r2, #1
    aa6c:	4906      	ldr	r1, [pc, #24]	; (aa88 <arch_irq_disable+0x24>)
    aa6e:	0943      	lsrs	r3, r0, #5
    aa70:	f000 001f 	and.w	r0, r0, #31
    aa74:	4082      	lsls	r2, r0
    aa76:	3320      	adds	r3, #32
    aa78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    aa7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    aa80:	f3bf 8f6f 	isb	sy
}
    aa84:	4770      	bx	lr
    aa86:	bf00      	nop
    aa88:	e000e100 	.word	0xe000e100

0000aa8c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    aa8c:	4b05      	ldr	r3, [pc, #20]	; (aaa4 <arch_irq_is_enabled+0x18>)
    aa8e:	0942      	lsrs	r2, r0, #5
    aa90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    aa94:	2301      	movs	r3, #1
    aa96:	f000 001f 	and.w	r0, r0, #31
    aa9a:	fa03 f000 	lsl.w	r0, r3, r0
}
    aa9e:	4010      	ands	r0, r2
    aaa0:	4770      	bx	lr
    aaa2:	bf00      	nop
    aaa4:	e000e100 	.word	0xe000e100

0000aaa8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    aaa8:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    aaaa:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    aaac:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    aab0:	bfac      	ite	ge
    aab2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    aab6:	4b06      	ldrlt	r3, [pc, #24]	; (aad0 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    aab8:	ea4f 1141 	mov.w	r1, r1, lsl #5
    aabc:	b2c9      	uxtb	r1, r1
    aabe:	bfab      	itete	ge
    aac0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    aac4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    aac8:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    aacc:	5419      	strblt	r1, [r3, r0]
}
    aace:	4770      	bx	lr
    aad0:	e000ed14 	.word	0xe000ed14

0000aad4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    aad4:	bf30      	wfi
    b z_SysNmiOnReset
    aad6:	f7ff bffd 	b.w	aad4 <z_SysNmiOnReset>
    aada:	bf00      	nop

0000aadc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    aadc:	4a0b      	ldr	r2, [pc, #44]	; (ab0c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    aade:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    aae0:	4b0b      	ldr	r3, [pc, #44]	; (ab10 <z_arm_prep_c+0x34>)
    aae2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    aae6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    aae8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    aaec:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    aaf0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    aaf4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    aaf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    aafc:	f003 fde6 	bl	e6cc <z_bss_zero>
	z_data_copy();
    ab00:	f004 fb7c 	bl	f1fc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    ab04:	f000 fba6 	bl	b254 <z_arm_interrupt_init>
	z_cstart();
    ab08:	f003 fe20 	bl	e74c <z_cstart>
    ab0c:	00008000 	.word	0x00008000
    ab10:	e000ed00 	.word	0xe000ed00

0000ab14 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    ab14:	4a09      	ldr	r2, [pc, #36]	; (ab3c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    ab16:	490a      	ldr	r1, [pc, #40]	; (ab40 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    ab18:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    ab1a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    ab1c:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    ab1e:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    ab20:	4908      	ldr	r1, [pc, #32]	; (ab44 <arch_swap+0x30>)
    ab22:	684b      	ldr	r3, [r1, #4]
    ab24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    ab28:	604b      	str	r3, [r1, #4]
    ab2a:	2300      	movs	r3, #0
    ab2c:	f383 8811 	msr	BASEPRI, r3
    ab30:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    ab34:	6893      	ldr	r3, [r2, #8]
}
    ab36:	6f98      	ldr	r0, [r3, #120]	; 0x78
    ab38:	4770      	bx	lr
    ab3a:	bf00      	nop
    ab3c:	20008518 	.word	0x20008518
    ab40:	00010c60 	.word	0x00010c60
    ab44:	e000ed00 	.word	0xe000ed00

0000ab48 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    ab48:	4915      	ldr	r1, [pc, #84]	; (aba0 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    ab4a:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    ab4c:	f882 e07d 	strb.w	lr, [r2, #125]	; 0x7d
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    ab50:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    ab54:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    ab56:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    ab5a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    ab5e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    ab60:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    ab64:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    ab68:	4f0e      	ldr	r7, [pc, #56]	; (aba4 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    ab6a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    ab6e:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    ab70:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    ab72:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    ab74:	f992 e07d 	ldrsb.w	lr, [r2, #125]	; 0x7d

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    ab78:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    ab7a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    ab7c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    ab7e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    ab82:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    ab86:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    ab8a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    ab8e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    ab92:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    ab94:	f005 f875 	bl	fc82 <configure_builtin_stack_guard>
    pop {r2, lr}
    ab98:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    ab9c:	4770      	bx	lr
    ab9e:	0000      	.short	0x0000
    ldr r1, =_kernel
    aba0:	20008518 	.word	0x20008518
    ldr v4, =_SCS_ICSR
    aba4:	e000ed04 	.word	0xe000ed04

0000aba8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    aba8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    abac:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    abae:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    abb2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    abb6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    abb8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    abbc:	2902      	cmp	r1, #2
    beq _oops
    abbe:	d0ff      	beq.n	abc0 <_oops>

0000abc0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    abc0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    abc2:	f005 f84f 	bl	fc64 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    abc6:	bd01      	pop	{r0, pc}

0000abc8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    abc8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    abcc:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    abce:	490c      	ldr	r1, [pc, #48]	; (ac00 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
    abd0:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    abd4:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    abd6:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    abda:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    abde:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    abe0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    abe4:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    abe8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    abec:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    abf0:	2300      	movs	r3, #0
    abf2:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    abf4:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    abf8:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    abfa:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    abfc:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    abfe:	4770      	bx	lr
    ac00:	0000f57d 	.word	0x0000f57d

0000ac04 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    ac04:	4b08      	ldr	r3, [pc, #32]	; (ac28 <arch_switch_to_main_thread+0x24>)
    ac06:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    ac08:	6e43      	ldr	r3, [r0, #100]	; 0x64
    ac0a:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    ac0e:	4610      	mov	r0, r2
    ac10:	f381 8809 	msr	PSP, r1
    ac14:	2100      	movs	r1, #0
    ac16:	b663      	cpsie	if
    ac18:	f381 8811 	msr	BASEPRI, r1
    ac1c:	f3bf 8f6f 	isb	sy
    ac20:	2200      	movs	r2, #0
    ac22:	2300      	movs	r3, #0
    ac24:	f004 fcaa 	bl	f57c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    ac28:	20008518 	.word	0x20008518

0000ac2c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    ac2c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    ac2e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    ac30:	4a0b      	ldr	r2, [pc, #44]	; (ac60 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    ac32:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    ac34:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    ac36:	bf1e      	ittt	ne
	movne	r1, #0
    ac38:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    ac3a:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    ac3c:	f005 fbd3 	blne	103e6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    ac40:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    ac42:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    ac46:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    ac4a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    ac4e:	4905      	ldr	r1, [pc, #20]	; (ac64 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    ac50:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    ac52:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    ac54:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    ac56:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    ac5a:	4903      	ldr	r1, [pc, #12]	; (ac68 <_isr_wrapper+0x3c>)
	bx r1
    ac5c:	4708      	bx	r1
    ac5e:	0000      	.short	0x0000
	ldr r2, =_kernel
    ac60:	20008518 	.word	0x20008518
	ldr r1, =_sw_isr_table
    ac64:	00010704 	.word	0x00010704
	ldr r1, =z_arm_int_exit
    ac68:	0000ac6d 	.word	0x0000ac6d

0000ac6c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    ac6c:	4b04      	ldr	r3, [pc, #16]	; (ac80 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    ac6e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    ac70:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    ac72:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    ac74:	d003      	beq.n	ac7e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    ac76:	4903      	ldr	r1, [pc, #12]	; (ac84 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    ac78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    ac7c:	600a      	str	r2, [r1, #0]

0000ac7e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    ac7e:	4770      	bx	lr
	ldr r3, =_kernel
    ac80:	20008518 	.word	0x20008518
	ldr r1, =_SCS_ICSR
    ac84:	e000ed04 	.word	0xe000ed04

0000ac88 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    ac88:	b5f0      	push	{r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    ac8a:	2400      	movs	r4, #0
    ac8c:	4b41      	ldr	r3, [pc, #260]	; (ad94 <mem_manage_fault.constprop.0+0x10c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    ac8e:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    ac90:	9302      	str	r3, [sp, #8]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    ac92:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    ac94:	4623      	mov	r3, r4
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    ac96:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    ac98:	2201      	movs	r2, #1
    ac9a:	4620      	mov	r0, r4
    ac9c:	e9cd 4400 	strd	r4, r4, [sp]
    aca0:	493d      	ldr	r1, [pc, #244]	; (ad98 <mem_manage_fault.constprop.0+0x110>)
    aca2:	f004 fff2 	bl	fc8a <z_log_msg_runtime_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    aca6:	4b3d      	ldr	r3, [pc, #244]	; (ad9c <mem_manage_fault.constprop.0+0x114>)
    aca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    acaa:	06dd      	lsls	r5, r3, #27
    acac:	d56f      	bpl.n	ad8e <mem_manage_fault.constprop.0+0x106>
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
    acae:	4b3c      	ldr	r3, [pc, #240]	; (ada0 <mem_manage_fault.constprop.0+0x118>)
    acb0:	4620      	mov	r0, r4
    acb2:	e9cd 4301 	strd	r4, r3, [sp, #4]
    acb6:	2201      	movs	r2, #1
    acb8:	4623      	mov	r3, r4
    acba:	4937      	ldr	r1, [pc, #220]	; (ad98 <mem_manage_fault.constprop.0+0x110>)
    acbc:	9400      	str	r4, [sp, #0]
    acbe:	f004 ffe4 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_STACKING;
    acc2:	2011      	movs	r0, #17
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    acc4:	4b35      	ldr	r3, [pc, #212]	; (ad9c <mem_manage_fault.constprop.0+0x114>)
    acc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    acc8:	071c      	lsls	r4, r3, #28
    acca:	d50a      	bpl.n	ace2 <mem_manage_fault.constprop.0+0x5a>
		reason = K_ERR_ARM_MEM_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    accc:	4b35      	ldr	r3, [pc, #212]	; (ada4 <mem_manage_fault.constprop.0+0x11c>)
    acce:	2201      	movs	r2, #1
    acd0:	9302      	str	r3, [sp, #8]
    acd2:	2300      	movs	r3, #0
    acd4:	4930      	ldr	r1, [pc, #192]	; (ad98 <mem_manage_fault.constprop.0+0x110>)
    acd6:	4618      	mov	r0, r3
    acd8:	e9cd 3300 	strd	r3, r3, [sp]
    acdc:	f004 ffd5 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    ace0:	2012      	movs	r0, #18
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    ace2:	4d2e      	ldr	r5, [pc, #184]	; (ad9c <mem_manage_fault.constprop.0+0x114>)
    ace4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ace6:	0799      	lsls	r1, r3, #30
    ace8:	d51f      	bpl.n	ad2a <mem_manage_fault.constprop.0+0xa2>
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
		PR_FAULT_INFO("  Data Access Violation");
    acea:	2400      	movs	r4, #0
    acec:	4b2e      	ldr	r3, [pc, #184]	; (ada8 <mem_manage_fault.constprop.0+0x120>)
    acee:	2201      	movs	r2, #1
    acf0:	9302      	str	r3, [sp, #8]
    acf2:	4620      	mov	r0, r4
    acf4:	4623      	mov	r3, r4
    acf6:	e9cd 4400 	strd	r4, r4, [sp]
    acfa:	4927      	ldr	r1, [pc, #156]	; (ad98 <mem_manage_fault.constprop.0+0x110>)
    acfc:	f004 ffc5 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    ad00:	6b6b      	ldr	r3, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    ad02:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    ad04:	0612      	lsls	r2, r2, #24
    ad06:	d50f      	bpl.n	ad28 <mem_manage_fault.constprop.0+0xa0>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    ad08:	9303      	str	r3, [sp, #12]
    ad0a:	4b28      	ldr	r3, [pc, #160]	; (adac <mem_manage_fault.constprop.0+0x124>)
    ad0c:	2201      	movs	r2, #1
    ad0e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    ad12:	4620      	mov	r0, r4
    ad14:	4623      	mov	r3, r4
    ad16:	4920      	ldr	r1, [pc, #128]	; (ad98 <mem_manage_fault.constprop.0+0x110>)
    ad18:	9400      	str	r4, [sp, #0]
    ad1a:	f004 ffb6 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    ad1e:	b11f      	cbz	r7, ad28 <mem_manage_fault.constprop.0+0xa0>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    ad20:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ad22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    ad26:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    ad28:	2013      	movs	r0, #19
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    ad2a:	4b1c      	ldr	r3, [pc, #112]	; (ad9c <mem_manage_fault.constprop.0+0x114>)
    ad2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ad2e:	07dd      	lsls	r5, r3, #31
    ad30:	d50a      	bpl.n	ad48 <mem_manage_fault.constprop.0+0xc0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
		PR_FAULT_INFO("  Instruction Access Violation");
    ad32:	4b1f      	ldr	r3, [pc, #124]	; (adb0 <mem_manage_fault.constprop.0+0x128>)
    ad34:	2201      	movs	r2, #1
    ad36:	9302      	str	r3, [sp, #8]
    ad38:	2300      	movs	r3, #0
    ad3a:	4917      	ldr	r1, [pc, #92]	; (ad98 <mem_manage_fault.constprop.0+0x110>)
    ad3c:	4618      	mov	r0, r3
    ad3e:	e9cd 3300 	strd	r3, r3, [sp]
    ad42:	f004 ffa2 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    ad46:	2014      	movs	r0, #20
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    ad48:	4b14      	ldr	r3, [pc, #80]	; (ad9c <mem_manage_fault.constprop.0+0x114>)
    ad4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ad4c:	069c      	lsls	r4, r3, #26
    ad4e:	d50a      	bpl.n	ad66 <mem_manage_fault.constprop.0+0xde>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
		PR_FAULT_INFO(
    ad50:	4b18      	ldr	r3, [pc, #96]	; (adb4 <mem_manage_fault.constprop.0+0x12c>)
    ad52:	2201      	movs	r2, #1
    ad54:	9302      	str	r3, [sp, #8]
    ad56:	2300      	movs	r3, #0
    ad58:	490f      	ldr	r1, [pc, #60]	; (ad98 <mem_manage_fault.constprop.0+0x110>)
    ad5a:	4618      	mov	r0, r3
    ad5c:	e9cd 3300 	strd	r3, r3, [sp]
    ad60:	f004 ff93 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    ad64:	2015      	movs	r0, #21
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    ad66:	4b0d      	ldr	r3, [pc, #52]	; (ad9c <mem_manage_fault.constprop.0+0x114>)
    ad68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ad6a:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    ad6c:	bf58      	it	pl
    ad6e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    ad70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ad72:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    ad74:	bf42      	ittt	mi
    ad76:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    ad78:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    ad7c:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    ad7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ad80:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    ad84:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    ad86:	2300      	movs	r3, #0
    ad88:	7033      	strb	r3, [r6, #0]

	return reason;
}
    ad8a:	b005      	add	sp, #20
    ad8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    ad8e:	2010      	movs	r0, #16
    ad90:	e798      	b.n	acc4 <mem_manage_fault.constprop.0+0x3c>
    ad92:	bf00      	nop
    ad94:	000111a4 	.word	0x000111a4
    ad98:	000109d4 	.word	0x000109d4
    ad9c:	e000ed00 	.word	0xe000ed00
    ada0:	000111ba 	.word	0x000111ba
    ada4:	000111ed 	.word	0x000111ed
    ada8:	00011200 	.word	0x00011200
    adac:	00011218 	.word	0x00011218
    adb0:	0001122e 	.word	0x0001122e
    adb4:	0001124d 	.word	0x0001124d

0000adb8 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    adb8:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    adba:	2400      	movs	r4, #0
    adbc:	4b43      	ldr	r3, [pc, #268]	; (aecc <bus_fault.constprop.0+0x114>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    adbe:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** BUS FAULT *****");
    adc0:	9302      	str	r3, [sp, #8]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    adc2:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    adc4:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    adc6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    adc8:	2201      	movs	r2, #1
    adca:	4620      	mov	r0, r4
    adcc:	e9cd 4400 	strd	r4, r4, [sp]
    add0:	493f      	ldr	r1, [pc, #252]	; (aed0 <bus_fault.constprop.0+0x118>)
    add2:	f004 ff5a 	bl	fc8a <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    add6:	4b3f      	ldr	r3, [pc, #252]	; (aed4 <bus_fault.constprop.0+0x11c>)
    add8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    adda:	04db      	lsls	r3, r3, #19
    addc:	d565      	bpl.n	aeaa <bus_fault.constprop.0+0xf2>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    adde:	4b3e      	ldr	r3, [pc, #248]	; (aed8 <bus_fault.constprop.0+0x120>)
    ade0:	4620      	mov	r0, r4
    ade2:	e9cd 4301 	strd	r4, r3, [sp, #4]
    ade6:	2201      	movs	r2, #1
    ade8:	4623      	mov	r3, r4
    adea:	4939      	ldr	r1, [pc, #228]	; (aed0 <bus_fault.constprop.0+0x118>)
    adec:	9400      	str	r4, [sp, #0]
    adee:	f004 ff4c 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    adf2:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    adf4:	4b37      	ldr	r3, [pc, #220]	; (aed4 <bus_fault.constprop.0+0x11c>)
    adf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    adf8:	051d      	lsls	r5, r3, #20
    adfa:	d50a      	bpl.n	ae12 <bus_fault.constprop.0+0x5a>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    adfc:	4b37      	ldr	r3, [pc, #220]	; (aedc <bus_fault.constprop.0+0x124>)
    adfe:	2201      	movs	r2, #1
    ae00:	9302      	str	r3, [sp, #8]
    ae02:	2300      	movs	r3, #0
    ae04:	4932      	ldr	r1, [pc, #200]	; (aed0 <bus_fault.constprop.0+0x118>)
    ae06:	4618      	mov	r0, r3
    ae08:	e9cd 3300 	strd	r3, r3, [sp]
    ae0c:	f004 ff3d 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    ae10:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    ae12:	4d30      	ldr	r5, [pc, #192]	; (aed4 <bus_fault.constprop.0+0x11c>)
    ae14:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ae16:	059c      	lsls	r4, r3, #22
    ae18:	d51f      	bpl.n	ae5a <bus_fault.constprop.0+0xa2>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    ae1a:	2400      	movs	r4, #0
    ae1c:	4b30      	ldr	r3, [pc, #192]	; (aee0 <bus_fault.constprop.0+0x128>)
    ae1e:	2201      	movs	r2, #1
    ae20:	4620      	mov	r0, r4
    ae22:	9302      	str	r3, [sp, #8]
    ae24:	e9cd 4400 	strd	r4, r4, [sp]
    ae28:	4623      	mov	r3, r4
    ae2a:	4929      	ldr	r1, [pc, #164]	; (aed0 <bus_fault.constprop.0+0x118>)
    ae2c:	f004 ff2d 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    ae30:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    ae32:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    ae34:	0410      	lsls	r0, r2, #16
    ae36:	d50f      	bpl.n	ae58 <bus_fault.constprop.0+0xa0>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    ae38:	9303      	str	r3, [sp, #12]
    ae3a:	4b2a      	ldr	r3, [pc, #168]	; (aee4 <bus_fault.constprop.0+0x12c>)
    ae3c:	2201      	movs	r2, #1
    ae3e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    ae42:	4620      	mov	r0, r4
    ae44:	4623      	mov	r3, r4
    ae46:	4922      	ldr	r1, [pc, #136]	; (aed0 <bus_fault.constprop.0+0x118>)
    ae48:	9400      	str	r4, [sp, #0]
    ae4a:	f004 ff1e 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    ae4e:	b11f      	cbz	r7, ae58 <bus_fault.constprop.0+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    ae50:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ae52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    ae56:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    ae58:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    ae5a:	4b1e      	ldr	r3, [pc, #120]	; (aed4 <bus_fault.constprop.0+0x11c>)
    ae5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ae5e:	0559      	lsls	r1, r3, #21
    ae60:	d50a      	bpl.n	ae78 <bus_fault.constprop.0+0xc0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    ae62:	4b21      	ldr	r3, [pc, #132]	; (aee8 <bus_fault.constprop.0+0x130>)
    ae64:	2201      	movs	r2, #1
    ae66:	9302      	str	r3, [sp, #8]
    ae68:	2300      	movs	r3, #0
    ae6a:	4919      	ldr	r1, [pc, #100]	; (aed0 <bus_fault.constprop.0+0x118>)
    ae6c:	4618      	mov	r0, r3
    ae6e:	e9cd 3300 	strd	r3, r3, [sp]
    ae72:	f004 ff0a 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    ae76:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    ae78:	4a16      	ldr	r2, [pc, #88]	; (aed4 <bus_fault.constprop.0+0x11c>)
    ae7a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ae7c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    ae80:	d015      	beq.n	aeae <bus_fault.constprop.0+0xf6>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    ae82:	4b1a      	ldr	r3, [pc, #104]	; (aeec <bus_fault.constprop.0+0x134>)
    ae84:	2201      	movs	r2, #1
    ae86:	9302      	str	r3, [sp, #8]
    ae88:	2300      	movs	r3, #0
    ae8a:	4911      	ldr	r1, [pc, #68]	; (aed0 <bus_fault.constprop.0+0x118>)
    ae8c:	4618      	mov	r0, r3
    ae8e:	e9cd 3300 	strd	r3, r3, [sp]
    ae92:	f004 fefa 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    ae96:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    ae98:	4a0e      	ldr	r2, [pc, #56]	; (aed4 <bus_fault.constprop.0+0x11c>)
    ae9a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ae9c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    aea0:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    aea2:	2300      	movs	r3, #0
    aea4:	7033      	strb	r3, [r6, #0]

	return reason;
}
    aea6:	b005      	add	sp, #20
    aea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    aeaa:	2016      	movs	r0, #22
    aeac:	e7a2      	b.n	adf4 <bus_fault.constprop.0+0x3c>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    aeae:	6a92      	ldr	r2, [r2, #40]	; 0x28
    aeb0:	0492      	lsls	r2, r2, #18
    aeb2:	d5f1      	bpl.n	ae98 <bus_fault.constprop.0+0xe0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    aeb4:	4a0e      	ldr	r2, [pc, #56]	; (aef0 <bus_fault.constprop.0+0x138>)
    aeb6:	4618      	mov	r0, r3
    aeb8:	e9cd 3201 	strd	r3, r2, [sp, #4]
    aebc:	4904      	ldr	r1, [pc, #16]	; (aed0 <bus_fault.constprop.0+0x118>)
    aebe:	2201      	movs	r2, #1
    aec0:	9300      	str	r3, [sp, #0]
    aec2:	f004 fee2 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    aec6:	201c      	movs	r0, #28
    aec8:	e7e6      	b.n	ae98 <bus_fault.constprop.0+0xe0>
    aeca:	bf00      	nop
    aecc:	0001127c 	.word	0x0001127c
    aed0:	000109d4 	.word	0x000109d4
    aed4:	e000ed00 	.word	0xe000ed00
    aed8:	00011292 	.word	0x00011292
    aedc:	000111ed 	.word	0x000111ed
    aee0:	000112a3 	.word	0x000112a3
    aee4:	000112bc 	.word	0x000112bc
    aee8:	000112d1 	.word	0x000112d1
    aeec:	000112ec 	.word	0x000112ec
    aef0:	0001124d 	.word	0x0001124d

0000aef4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    aef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    aef6:	2400      	movs	r4, #0
    aef8:	4b3e      	ldr	r3, [pc, #248]	; (aff4 <usage_fault.constprop.0+0x100>)
    aefa:	493f      	ldr	r1, [pc, #252]	; (aff8 <usage_fault.constprop.0+0x104>)
    aefc:	9302      	str	r3, [sp, #8]
    aefe:	2201      	movs	r2, #1
    af00:	4623      	mov	r3, r4
    af02:	4620      	mov	r0, r4
    af04:	e9cd 4400 	strd	r4, r4, [sp]
    af08:	f004 febf 	bl	fc8a <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    af0c:	4b3b      	ldr	r3, [pc, #236]	; (affc <usage_fault.constprop.0+0x108>)
    af0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    af10:	0199      	lsls	r1, r3, #6
    af12:	d56d      	bpl.n	aff0 <usage_fault.constprop.0+0xfc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    af14:	4b3a      	ldr	r3, [pc, #232]	; (b000 <usage_fault.constprop.0+0x10c>)
    af16:	4620      	mov	r0, r4
    af18:	e9cd 4301 	strd	r4, r3, [sp, #4]
    af1c:	2201      	movs	r2, #1
    af1e:	4623      	mov	r3, r4
    af20:	4935      	ldr	r1, [pc, #212]	; (aff8 <usage_fault.constprop.0+0x104>)
    af22:	9400      	str	r4, [sp, #0]
    af24:	f004 feb1 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    af28:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    af2a:	4b34      	ldr	r3, [pc, #208]	; (affc <usage_fault.constprop.0+0x108>)
    af2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    af2e:	01da      	lsls	r2, r3, #7
    af30:	d50a      	bpl.n	af48 <usage_fault.constprop.0+0x54>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    af32:	4b34      	ldr	r3, [pc, #208]	; (b004 <usage_fault.constprop.0+0x110>)
    af34:	2201      	movs	r2, #1
    af36:	9302      	str	r3, [sp, #8]
    af38:	2300      	movs	r3, #0
    af3a:	492f      	ldr	r1, [pc, #188]	; (aff8 <usage_fault.constprop.0+0x104>)
    af3c:	4618      	mov	r0, r3
    af3e:	e9cd 3300 	strd	r3, r3, [sp]
    af42:	f004 fea2 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    af46:	201f      	movs	r0, #31
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    af48:	4b2c      	ldr	r3, [pc, #176]	; (affc <usage_fault.constprop.0+0x108>)
    af4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    af4c:	02db      	lsls	r3, r3, #11
    af4e:	d50a      	bpl.n	af66 <usage_fault.constprop.0+0x72>
		reason = K_ERR_ARM_USAGE_STACK_OVERFLOW;
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    af50:	4b2d      	ldr	r3, [pc, #180]	; (b008 <usage_fault.constprop.0+0x114>)
    af52:	2201      	movs	r2, #1
    af54:	9302      	str	r3, [sp, #8]
    af56:	2300      	movs	r3, #0
    af58:	4927      	ldr	r1, [pc, #156]	; (aff8 <usage_fault.constprop.0+0x104>)
    af5a:	4618      	mov	r0, r3
    af5c:	e9cd 3300 	strd	r3, r3, [sp]
    af60:	f004 fe93 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    af64:	2002      	movs	r0, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    af66:	4b25      	ldr	r3, [pc, #148]	; (affc <usage_fault.constprop.0+0x108>)
    af68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    af6a:	031c      	lsls	r4, r3, #12
    af6c:	d50a      	bpl.n	af84 <usage_fault.constprop.0+0x90>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    af6e:	4b27      	ldr	r3, [pc, #156]	; (b00c <usage_fault.constprop.0+0x118>)
    af70:	2201      	movs	r2, #1
    af72:	9302      	str	r3, [sp, #8]
    af74:	2300      	movs	r3, #0
    af76:	4920      	ldr	r1, [pc, #128]	; (aff8 <usage_fault.constprop.0+0x104>)
    af78:	4618      	mov	r0, r3
    af7a:	e9cd 3300 	strd	r3, r3, [sp]
    af7e:	f004 fe84 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    af82:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    af84:	4b1d      	ldr	r3, [pc, #116]	; (affc <usage_fault.constprop.0+0x108>)
    af86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    af88:	0359      	lsls	r1, r3, #13
    af8a:	d50a      	bpl.n	afa2 <usage_fault.constprop.0+0xae>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    af8c:	4b20      	ldr	r3, [pc, #128]	; (b010 <usage_fault.constprop.0+0x11c>)
    af8e:	2201      	movs	r2, #1
    af90:	9302      	str	r3, [sp, #8]
    af92:	2300      	movs	r3, #0
    af94:	4918      	ldr	r1, [pc, #96]	; (aff8 <usage_fault.constprop.0+0x104>)
    af96:	4618      	mov	r0, r3
    af98:	e9cd 3300 	strd	r3, r3, [sp]
    af9c:	f004 fe75 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    afa0:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    afa2:	4b16      	ldr	r3, [pc, #88]	; (affc <usage_fault.constprop.0+0x108>)
    afa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    afa6:	039a      	lsls	r2, r3, #14
    afa8:	d50a      	bpl.n	afc0 <usage_fault.constprop.0+0xcc>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    afaa:	4b1a      	ldr	r3, [pc, #104]	; (b014 <usage_fault.constprop.0+0x120>)
    afac:	2201      	movs	r2, #1
    afae:	9302      	str	r3, [sp, #8]
    afb0:	2300      	movs	r3, #0
    afb2:	4911      	ldr	r1, [pc, #68]	; (aff8 <usage_fault.constprop.0+0x104>)
    afb4:	4618      	mov	r0, r3
    afb6:	e9cd 3300 	strd	r3, r3, [sp]
    afba:	f004 fe66 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    afbe:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    afc0:	4b0e      	ldr	r3, [pc, #56]	; (affc <usage_fault.constprop.0+0x108>)
    afc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    afc4:	03db      	lsls	r3, r3, #15
    afc6:	d50a      	bpl.n	afde <usage_fault.constprop.0+0xea>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    afc8:	4b13      	ldr	r3, [pc, #76]	; (b018 <usage_fault.constprop.0+0x124>)
    afca:	2201      	movs	r2, #1
    afcc:	9302      	str	r3, [sp, #8]
    afce:	2300      	movs	r3, #0
    afd0:	4909      	ldr	r1, [pc, #36]	; (aff8 <usage_fault.constprop.0+0x104>)
    afd2:	4618      	mov	r0, r3
    afd4:	e9cd 3300 	strd	r3, r3, [sp]
    afd8:	f004 fe57 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    afdc:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    afde:	4a07      	ldr	r2, [pc, #28]	; (affc <usage_fault.constprop.0+0x108>)
    afe0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    afe2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    afe6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    afea:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    afec:	b004      	add	sp, #16
    afee:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    aff0:	201d      	movs	r0, #29
    aff2:	e79a      	b.n	af2a <usage_fault.constprop.0+0x36>
    aff4:	00011304 	.word	0x00011304
    aff8:	000109d4 	.word	0x000109d4
    affc:	e000ed00 	.word	0xe000ed00
    b000:	0001131c 	.word	0x0001131c
    b004:	0001132f 	.word	0x0001132f
    b008:	00011349 	.word	0x00011349
    b00c:	00011373 	.word	0x00011373
    b010:	00011391 	.word	0x00011391
    b014:	000113b6 	.word	0x000113b6
    b018:	000113d0 	.word	0x000113d0

0000b01c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    b01c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    b020:	4b75      	ldr	r3, [pc, #468]	; (b1f8 <z_arm_fault+0x1dc>)
{
    b022:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    b024:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    b028:	4689      	mov	r9, r1
    b02a:	4614      	mov	r4, r2
    b02c:	2600      	movs	r6, #0
    b02e:	b091      	sub	sp, #68	; 0x44
    b030:	f3c8 0708 	ubfx	r7, r8, #0, #9
    b034:	f386 8811 	msr	BASEPRI, r6
    b038:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    b03c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    b040:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    b044:	d125      	bne.n	b092 <z_arm_fault+0x76>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    b046:	f012 0301 	ands.w	r3, r2, #1
    b04a:	d122      	bne.n	b092 <z_arm_fault+0x76>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    b04c:	0651      	lsls	r1, r2, #25
    b04e:	d403      	bmi.n	b058 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    b050:	0722      	lsls	r2, r4, #28
    b052:	d40d      	bmi.n	b070 <z_arm_fault+0x54>
			*nested_exc = true;
    b054:	2601      	movs	r6, #1
    b056:	e00d      	b.n	b074 <z_arm_fault+0x58>
		PR_FAULT_INFO("Exception occurred in Secure State");
    b058:	4a68      	ldr	r2, [pc, #416]	; (b1fc <z_arm_fault+0x1e0>)
    b05a:	4618      	mov	r0, r3
    b05c:	e9cd 3201 	strd	r3, r2, [sp, #4]
    b060:	4967      	ldr	r1, [pc, #412]	; (b200 <z_arm_fault+0x1e4>)
    b062:	2201      	movs	r2, #1
    b064:	9300      	str	r3, [sp, #0]
    b066:	f004 fe10 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    b06a:	f014 0404 	ands.w	r4, r4, #4
    b06e:	d000      	beq.n	b072 <z_arm_fault+0x56>
			ptr_esf = (z_arch_esf_t *)psp;
    b070:	464d      	mov	r5, r9
	*nested_exc = false;
    b072:	2600      	movs	r6, #0
	*recoverable = false;
    b074:	f04f 0900 	mov.w	r9, #0
	switch (fault) {
    b078:	1efb      	subs	r3, r7, #3
	*recoverable = false;
    b07a:	f88d 901f 	strb.w	r9, [sp, #31]
	switch (fault) {
    b07e:	2b09      	cmp	r3, #9
    b080:	f200 80a1 	bhi.w	b1c6 <z_arm_fault+0x1aa>
    b084:	e8df f003 	tbb	[pc, r3]
    b088:	91999507 	.word	0x91999507
    b08c:	9f9f9f9f 	.word	0x9f9f9f9f
    b090:	9d9f      	.short	0x9d9f
		return NULL;
    b092:	4635      	mov	r5, r6
    b094:	e7ee      	b.n	b074 <z_arm_fault+0x58>
	PR_FAULT_INFO("***** HARD FAULT *****");
    b096:	4b5b      	ldr	r3, [pc, #364]	; (b204 <z_arm_fault+0x1e8>)
    b098:	2201      	movs	r2, #1
    b09a:	e9cd 9301 	strd	r9, r3, [sp, #4]
    b09e:	2300      	movs	r3, #0
    b0a0:	4957      	ldr	r1, [pc, #348]	; (b200 <z_arm_fault+0x1e4>)
    b0a2:	4618      	mov	r0, r3
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    b0a4:	4f54      	ldr	r7, [pc, #336]	; (b1f8 <z_arm_fault+0x1dc>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    b0a6:	f8cd 9000 	str.w	r9, [sp]
    b0aa:	f004 fdee 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
    b0ae:	f88d 901f 	strb.w	r9, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    b0b2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    b0b4:	f014 0402 	ands.w	r4, r4, #2
    b0b8:	d005      	beq.n	b0c6 <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
    b0ba:	4b53      	ldr	r3, [pc, #332]	; (b208 <z_arm_fault+0x1ec>)
	PR_FAULT_INFO(
    b0bc:	e9cd 9301 	strd	r9, r3, [sp, #4]
    b0c0:	f8cd 9000 	str.w	r9, [sp]
    b0c4:	e006      	b.n	b0d4 <z_arm_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    b0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b0c8:	2b00      	cmp	r3, #0
    b0ca:	da0b      	bge.n	b0e4 <z_arm_fault+0xc8>
		PR_EXC("  Debug event");
    b0cc:	4b4f      	ldr	r3, [pc, #316]	; (b20c <z_arm_fault+0x1f0>)
    b0ce:	9400      	str	r4, [sp, #0]
    b0d0:	e9cd 4301 	strd	r4, r3, [sp, #4]
	PR_FAULT_INFO(
    b0d4:	2300      	movs	r3, #0
    b0d6:	2201      	movs	r2, #1
    b0d8:	4618      	mov	r0, r3
    b0da:	4949      	ldr	r1, [pc, #292]	; (b200 <z_arm_fault+0x1e4>)
    b0dc:	f004 fdd5 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    b0e0:	2400      	movs	r4, #0
    b0e2:	e030      	b.n	b146 <z_arm_fault+0x12a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    b0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b0e6:	005b      	lsls	r3, r3, #1
    b0e8:	d5fa      	bpl.n	b0e0 <z_arm_fault+0xc4>
		PR_EXC("  Fault escalation (see below)");
    b0ea:	4b49      	ldr	r3, [pc, #292]	; (b210 <z_arm_fault+0x1f4>)
    b0ec:	2201      	movs	r2, #1
    b0ee:	e9cd 4301 	strd	r4, r3, [sp, #4]
    b0f2:	4620      	mov	r0, r4
    b0f4:	4623      	mov	r3, r4
    b0f6:	4942      	ldr	r1, [pc, #264]	; (b200 <z_arm_fault+0x1e4>)
    b0f8:	9400      	str	r4, [sp, #0]
    b0fa:	f004 fdc6 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    b0fe:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    b100:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    b102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b106:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    b108:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b10c:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    b110:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    b112:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    b116:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b11a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    b11c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b120:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    b124:	f64d 7302 	movw	r3, #57090	; 0xdf02
    b128:	429a      	cmp	r2, r3
    b12a:	d127      	bne.n	b17c <z_arm_fault+0x160>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    b12c:	682b      	ldr	r3, [r5, #0]
    b12e:	4620      	mov	r0, r4
    b130:	9303      	str	r3, [sp, #12]
    b132:	4b38      	ldr	r3, [pc, #224]	; (b214 <z_arm_fault+0x1f8>)
    b134:	9400      	str	r4, [sp, #0]
    b136:	e9cd 4301 	strd	r4, r3, [sp, #4]
    b13a:	2201      	movs	r2, #1
    b13c:	4623      	mov	r3, r4
    b13e:	4930      	ldr	r1, [pc, #192]	; (b200 <z_arm_fault+0x1e4>)
    b140:	f004 fda3 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
    b144:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    b146:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b14a:	b9a3      	cbnz	r3, b176 <z_arm_fault+0x15a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    b14c:	2220      	movs	r2, #32
    b14e:	4629      	mov	r1, r5
    b150:	eb0d 0002 	add.w	r0, sp, r2
    b154:	f004 fe20 	bl	fd98 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    b158:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b15a:	2e00      	cmp	r6, #0
    b15c:	d047      	beq.n	b1ee <z_arm_fault+0x1d2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    b15e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    b162:	b922      	cbnz	r2, b16e <z_arm_fault+0x152>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    b164:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    b168:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    b16c:	930f      	str	r3, [sp, #60]	; 0x3c

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    b16e:	4620      	mov	r0, r4
    b170:	a908      	add	r1, sp, #32
    b172:	f7ff fc19 	bl	a9a8 <z_arm_fatal_error>
}
    b176:	b011      	add	sp, #68	; 0x44
    b178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b17e:	b2db      	uxtb	r3, r3
    b180:	b12b      	cbz	r3, b18e <z_arm_fault+0x172>
			reason = mem_manage_fault(esf, 1, recoverable);
    b182:	2001      	movs	r0, #1
    b184:	f10d 011f 	add.w	r1, sp, #31
		reason = mem_manage_fault(esf, 0, recoverable);
    b188:	f7ff fd7e 	bl	ac88 <mem_manage_fault.constprop.0>
    b18c:	e00f      	b.n	b1ae <z_arm_fault+0x192>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    b18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b190:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    b194:	d005      	beq.n	b1a2 <z_arm_fault+0x186>
			reason = bus_fault(esf, 1, recoverable);
    b196:	2001      	movs	r0, #1
    b198:	f10d 011f 	add.w	r1, sp, #31
		reason = bus_fault(esf, 0, recoverable);
    b19c:	f7ff fe0c 	bl	adb8 <bus_fault.constprop.0>
    b1a0:	e005      	b.n	b1ae <z_arm_fault+0x192>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    b1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b1a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b1a8:	d39a      	bcc.n	b0e0 <z_arm_fault+0xc4>
			reason = usage_fault(esf);
    b1aa:	f7ff fea3 	bl	aef4 <usage_fault.constprop.0>
    b1ae:	4604      	mov	r4, r0
    b1b0:	e7c9      	b.n	b146 <z_arm_fault+0x12a>
		reason = mem_manage_fault(esf, 0, recoverable);
    b1b2:	2000      	movs	r0, #0
    b1b4:	f10d 011f 	add.w	r1, sp, #31
    b1b8:	e7e6      	b.n	b188 <z_arm_fault+0x16c>
		reason = bus_fault(esf, 0, recoverable);
    b1ba:	2000      	movs	r0, #0
    b1bc:	f10d 011f 	add.w	r1, sp, #31
    b1c0:	e7ec      	b.n	b19c <z_arm_fault+0x180>
	PR_FAULT_INFO(
    b1c2:	4b15      	ldr	r3, [pc, #84]	; (b218 <z_arm_fault+0x1fc>)
    b1c4:	e77a      	b.n	b0bc <z_arm_fault+0xa0>
	PR_FAULT_INFO("***** %s %d) *****",
    b1c6:	4a15      	ldr	r2, [pc, #84]	; (b21c <z_arm_fault+0x200>)
    b1c8:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    b1cc:	4b14      	ldr	r3, [pc, #80]	; (b220 <z_arm_fault+0x204>)
    b1ce:	bf18      	it	ne
    b1d0:	4613      	movne	r3, r2
    b1d2:	3f10      	subs	r7, #16
    b1d4:	e9cd 3703 	strd	r3, r7, [sp, #12]
    b1d8:	4b12      	ldr	r3, [pc, #72]	; (b224 <z_arm_fault+0x208>)
    b1da:	2201      	movs	r2, #1
    b1dc:	9302      	str	r3, [sp, #8]
    b1de:	2300      	movs	r3, #0
    b1e0:	4907      	ldr	r1, [pc, #28]	; (b200 <z_arm_fault+0x1e4>)
    b1e2:	4618      	mov	r0, r3
    b1e4:	e9cd 3300 	strd	r3, r3, [sp]
    b1e8:	f004 fd4f 	bl	fc8a <z_log_msg_runtime_create.constprop.0>
}
    b1ec:	e778      	b.n	b0e0 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    b1ee:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    b1f2:	f023 0301 	bic.w	r3, r3, #1
    b1f6:	e7b9      	b.n	b16c <z_arm_fault+0x150>
    b1f8:	e000ed00 	.word	0xe000ed00
    b1fc:	00011429 	.word	0x00011429
    b200:	000109d4 	.word	0x000109d4
    b204:	0001144c 	.word	0x0001144c
    b208:	00011463 	.word	0x00011463
    b20c:	00011484 	.word	0x00011484
    b210:	00011492 	.word	0x00011492
    b214:	000114b1 	.word	0x000114b1
    b218:	000114cd 	.word	0x000114cd
    b21c:	00011410 	.word	0x00011410
    b220:	000113fb 	.word	0x000113fb
    b224:	000114f1 	.word	0x000114f1

0000b228 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    b228:	4b04      	ldr	r3, [pc, #16]	; (b23c <z_arm_fault_init+0x14>)
    b22a:	695a      	ldr	r2, [r3, #20]
    b22c:	f042 0210 	orr.w	r2, r2, #16
    b230:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    b232:	695a      	ldr	r2, [r3, #20]
    b234:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    b238:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    b23a:	4770      	bx	lr
    b23c:	e000ed00 	.word	0xe000ed00

0000b240 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    b240:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    b244:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    b248:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    b24a:	4672      	mov	r2, lr
	bl z_arm_fault
    b24c:	f7ff fee6 	bl	b01c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    b250:	bd01      	pop	{r0, pc}
    b252:	bf00      	nop

0000b254 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    b254:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b256:	2120      	movs	r1, #32
    b258:	4803      	ldr	r0, [pc, #12]	; (b268 <z_arm_interrupt_init+0x14>)
    b25a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    b25c:	3301      	adds	r3, #1
    b25e:	2b45      	cmp	r3, #69	; 0x45
    b260:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    b264:	d1f9      	bne.n	b25a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    b266:	4770      	bx	lr
    b268:	e000e100 	.word	0xe000e100

0000b26c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    b26c:	2000      	movs	r0, #0
    msr CONTROL, r0
    b26e:	f380 8814 	msr	CONTROL, r0
    isb
    b272:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    b276:	2000      	movs	r0, #0
    msr MSPLIM, r0
    b278:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    b27c:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    b280:	f7fe fa52 	bl	9728 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    b284:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    b286:	490e      	ldr	r1, [pc, #56]	; (b2c0 <__start+0x54>)
    str r0, [r1]
    b288:	6008      	str	r0, [r1, #0]
    dsb
    b28a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    b28e:	480d      	ldr	r0, [pc, #52]	; (b2c4 <__start+0x58>)
    msr msp, r0
    b290:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    b294:	f000 f83e 	bl	b314 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    b298:	2020      	movs	r0, #32
    msr BASEPRI, r0
    b29a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    b29e:	480a      	ldr	r0, [pc, #40]	; (b2c8 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    b2a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    b2a4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    b2a6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    b2aa:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    b2ae:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    b2b0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    b2b2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    b2b6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    b2ba:	f7ff fc0f 	bl	aadc <z_arm_prep_c>
    b2be:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    b2c0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    b2c4:	20009298 	.word	0x20009298
    ldr r0, =z_interrupt_stacks
    b2c8:	20008558 	.word	0x20008558

0000b2cc <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    b2cc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    b2d0:	4905      	ldr	r1, [pc, #20]	; (b2e8 <sys_arch_reboot+0x1c>)
    b2d2:	4b06      	ldr	r3, [pc, #24]	; (b2ec <sys_arch_reboot+0x20>)
    b2d4:	68ca      	ldr	r2, [r1, #12]
    b2d6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    b2da:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    b2dc:	60cb      	str	r3, [r1, #12]
    b2de:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    b2e2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    b2e4:	e7fd      	b.n	b2e2 <sys_arch_reboot+0x16>
    b2e6:	bf00      	nop
    b2e8:	e000ed00 	.word	0xe000ed00
    b2ec:	05fa0004 	.word	0x05fa0004

0000b2f0 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    b2f0:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    b2f2:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    b2f4:	4906      	ldr	r1, [pc, #24]	; (b310 <z_arm_clear_arm_mpu_config+0x20>)
    b2f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    b2fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    b2fe:	4293      	cmp	r3, r2
    b300:	db00      	blt.n	b304 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    b302:	4770      	bx	lr
  mpu->RNR = rnr;
    b304:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    b308:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    b30c:	3301      	adds	r3, #1
    b30e:	e7f6      	b.n	b2fe <z_arm_clear_arm_mpu_config+0xe>
    b310:	e000ed00 	.word	0xe000ed00

0000b314 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    b314:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    b316:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    b318:	2400      	movs	r4, #0
    b31a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    b31e:	f7ff ffe7 	bl	b2f0 <z_arm_clear_arm_mpu_config>
    b322:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    b324:	f04f 30ff 	mov.w	r0, #4294967295
    b328:	4a0c      	ldr	r2, [pc, #48]	; (b35c <z_arm_init_arch_hw_at_boot+0x48>)
    b32a:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    b32e:	3301      	adds	r3, #1
    b330:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    b332:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    b336:	d1f8      	bne.n	b32a <z_arm_init_arch_hw_at_boot+0x16>
    b338:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    b33a:	f04f 30ff 	mov.w	r0, #4294967295
    b33e:	4a07      	ldr	r2, [pc, #28]	; (b35c <z_arm_init_arch_hw_at_boot+0x48>)
    b340:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    b344:	3301      	adds	r3, #1
    b346:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    b348:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    b34c:	d1f8      	bne.n	b340 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    b34e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    b350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b354:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    b358:	bd10      	pop	{r4, pc}
    b35a:	bf00      	nop
    b35c:	e000e100 	.word	0xe000e100

0000b360 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    b360:	4b08      	ldr	r3, [pc, #32]	; (b384 <z_impl_k_thread_abort+0x24>)
    b362:	689b      	ldr	r3, [r3, #8]
    b364:	4283      	cmp	r3, r0
    b366:	d10b      	bne.n	b380 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b368:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    b36c:	b143      	cbz	r3, b380 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    b36e:	4b06      	ldr	r3, [pc, #24]	; (b388 <z_impl_k_thread_abort+0x28>)
    b370:	685a      	ldr	r2, [r3, #4]
    b372:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    b376:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    b378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b37a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    b37e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    b380:	f003 bedc 	b.w	f13c <z_thread_abort>
    b384:	20008518 	.word	0x20008518
    b388:	e000ed00 	.word	0xe000ed00

0000b38c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    b38c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    b38e:	4c09      	ldr	r4, [pc, #36]	; (b3b4 <z_arm_configure_static_mpu_regions+0x28>)
    b390:	4a09      	ldr	r2, [pc, #36]	; (b3b8 <z_arm_configure_static_mpu_regions+0x2c>)
    b392:	4623      	mov	r3, r4
    b394:	2101      	movs	r1, #1
    b396:	4809      	ldr	r0, [pc, #36]	; (b3bc <z_arm_configure_static_mpu_regions+0x30>)
    b398:	f000 f918 	bl	b5cc <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    b39c:	2300      	movs	r3, #0
    b39e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    b3a0:	4b07      	ldr	r3, [pc, #28]	; (b3c0 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    b3a2:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    b3a4:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    b3a6:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    b3a8:	9301      	str	r3, [sp, #4]
    b3aa:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    b3ac:	f000 f918 	bl	b5e0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    b3b0:	b004      	add	sp, #16
    b3b2:	bd10      	pop	{r4, pc}
    b3b4:	20080000 	.word	0x20080000
    b3b8:	20008000 	.word	0x20008000
    b3bc:	00010a9c 	.word	0x00010a9c
    b3c0:	20008158 	.word	0x20008158

0000b3c4 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    b3c4:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    b3c6:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    b3c8:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    b3ca:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    b3ce:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    b3d2:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    b3d4:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    b3d6:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    b3d8:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    b3dc:	4905      	ldr	r1, [pc, #20]	; (b3f4 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    b3de:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    b3e2:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    b3e6:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    b3ea:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    b3ee:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    b3f2:	bd10      	pop	{r4, pc}
    b3f4:	e000ed00 	.word	0xe000ed00

0000b3f8 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    b3f8:	2807      	cmp	r0, #7
{
    b3fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    b3fc:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1U)) {
    b3fe:	d90f      	bls.n	b420 <region_allocate_and_init+0x28>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    b400:	4b09      	ldr	r3, [pc, #36]	; (b428 <region_allocate_and_init+0x30>)
    b402:	9003      	str	r0, [sp, #12]
    b404:	9302      	str	r3, [sp, #8]
    b406:	2300      	movs	r3, #0
    b408:	2201      	movs	r2, #1
    b40a:	4618      	mov	r0, r3
    b40c:	e9cd 3300 	strd	r3, r3, [sp]
    b410:	4906      	ldr	r1, [pc, #24]	; (b42c <region_allocate_and_init+0x34>)
    b412:	f004 fc55 	bl	fcc0 <z_log_msg_runtime_create.constprop.0>
    b416:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    b41a:	4620      	mov	r0, r4
    b41c:	b004      	add	sp, #16
    b41e:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
    b420:	f7ff ffd0 	bl	b3c4 <region_init>
	return index;
    b424:	e7f9      	b.n	b41a <region_allocate_and_init+0x22>
    b426:	bf00      	nop
    b428:	00011508 	.word	0x00011508
    b42c:	000109cc 	.word	0x000109cc

0000b430 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    b430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b434:	4689      	mov	r9, r1
    b436:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    b438:	4606      	mov	r6, r0
    b43a:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    b43e:	4d54      	ldr	r5, [pc, #336]	; (b590 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    b440:	b089      	sub	sp, #36	; 0x24
	for (i = 0; i < regions_num; i++) {
    b442:	45c8      	cmp	r8, r9
    b444:	da2d      	bge.n	b4a2 <mpu_configure_regions_and_partition.constprop.0+0x72>
		if (regions[i].size == 0U) {
    b446:	f8d6 a004 	ldr.w	sl, [r6, #4]
    b44a:	f1ba 0f00 	cmp.w	sl, #0
    b44e:	d04a      	beq.n	b4e6 <mpu_configure_regions_and_partition.constprop.0+0xb6>
		&&
    b450:	f1ba 0f1f 	cmp.w	sl, #31
    b454:	d917      	bls.n	b486 <mpu_configure_regions_and_partition.constprop.0+0x56>
		&&
    b456:	f01a 0f1f 	tst.w	sl, #31
    b45a:	d114      	bne.n	b486 <mpu_configure_regions_and_partition.constprop.0+0x56>
		((part->start &
    b45c:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    b460:	f01b 0f1f 	tst.w	fp, #31
    b464:	d10f      	bne.n	b486 <mpu_configure_regions_and_partition.constprop.0+0x56>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    b466:	4658      	mov	r0, fp
    b468:	f004 fc21 	bl	fcae <arm_cmse_mpu_region_get>
    b46c:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    b46e:	eb0a 000b 	add.w	r0, sl, fp
    b472:	3801      	subs	r0, #1
    b474:	f004 fc1b 	bl	fcae <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    b478:	4287      	cmp	r7, r0
    b47a:	d016      	beq.n	b4aa <mpu_configure_regions_and_partition.constprop.0+0x7a>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    b47c:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    b480:	4b44      	ldr	r3, [pc, #272]	; (b594 <mpu_configure_regions_and_partition.constprop.0+0x164>)
    b482:	9703      	str	r7, [sp, #12]
    b484:	e002      	b.n	b48c <mpu_configure_regions_and_partition.constprop.0+0x5c>
			LOG_ERR("Partition %u: sanity check failed.", i);
    b486:	4b44      	ldr	r3, [pc, #272]	; (b598 <mpu_configure_regions_and_partition.constprop.0+0x168>)
    b488:	f8cd 800c 	str.w	r8, [sp, #12]
			LOG_ERR("Invalid underlying region index %u",
    b48c:	9302      	str	r3, [sp, #8]
    b48e:	2300      	movs	r3, #0
    b490:	2201      	movs	r2, #1
    b492:	4618      	mov	r0, r3
    b494:	e9cd 3300 	strd	r3, r3, [sp]
    b498:	4940      	ldr	r1, [pc, #256]	; (b59c <mpu_configure_regions_and_partition.constprop.0+0x16c>)
    b49a:	f004 fc11 	bl	fcc0 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
    b49e:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    b4a2:	4620      	mov	r0, r4
    b4a4:	b009      	add	sp, #36	; 0x24
    b4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    b4aa:	f117 0f16 	cmn.w	r7, #22
    b4ae:	d0e7      	beq.n	b480 <mpu_configure_regions_and_partition.constprop.0+0x50>
    b4b0:	42bc      	cmp	r4, r7
    b4b2:	dde5      	ble.n	b480 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = rnr;
    b4b4:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
    b4b8:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    b4bc:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
    b4c0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    b4c4:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    b4c8:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    b4cc:	e9d6 3200 	ldrd	r3, r2, [r6]
    b4d0:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    b4d2:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    b4d4:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    b4d8:	d11d      	bne.n	b516 <mpu_configure_regions_and_partition.constprop.0+0xe6>
    b4da:	45d3      	cmp	fp, sl
    b4dc:	d107      	bne.n	b4ee <mpu_configure_regions_and_partition.constprop.0+0xbe>
			mpu_configure_region(u_reg_index, &regions[i]);
    b4de:	4631      	mov	r1, r6
    b4e0:	b2f8      	uxtb	r0, r7
    b4e2:	f004 fbfd 	bl	fce0 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    b4e6:	f108 0801 	add.w	r8, r8, #1
    b4ea:	360c      	adds	r6, #12
    b4ec:	e7a9      	b.n	b442 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    b4ee:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    b4f0:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
    b4f4:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    b4f8:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    b4fc:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    b500:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    b502:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    b506:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    b508:	f004 fbea 	bl	fce0 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    b50c:	f110 0f16 	cmn.w	r0, #22
    b510:	d0c5      	beq.n	b49e <mpu_configure_regions_and_partition.constprop.0+0x6e>
			reg_index++;
    b512:	1c44      	adds	r4, r0, #1
    b514:	e7e7      	b.n	b4e6 <mpu_configure_regions_and_partition.constprop.0+0xb6>
	MPU->RNR = rnr;
    b516:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
    b51a:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    b51e:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    b520:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    b524:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    b528:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    b52a:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    b52c:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    b52e:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    b530:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    b534:	d0e8      	beq.n	b508 <mpu_configure_regions_and_partition.constprop.0+0xd8>
				mpu_configure_region(reg_index, &regions[i]);
    b536:	f004 fbd3 	bl	fce0 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    b53a:	f110 0f16 	cmn.w	r0, #22
    b53e:	d0ae      	beq.n	b49e <mpu_configure_regions_and_partition.constprop.0+0x6e>
	MPU->RNR = rnr;
    b540:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
    b544:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    b548:	f89d 3018 	ldrb.w	r3, [sp, #24]
			REGION_LIMIT_ADDR((regions[i].start +
    b54c:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = mpu_get_rbar() &
    b550:	f362 0304 	bfi	r3, r2, #0, #5
    b554:	f88d 3018 	strb.w	r3, [sp, #24]
	return MPU->RLAR;
    b558:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    b55c:	f89d 2018 	ldrb.w	r2, [sp, #24]
    b560:	085b      	lsrs	r3, r3, #1
    b562:	f363 1247 	bfi	r2, r3, #5, #3
    b566:	f88d 2018 	strb.w	r2, [sp, #24]
			fill_region.base = regions[i].start +
    b56a:	e9d6 3200 	ldrd	r3, r2, [r6]
    b56e:	4413      	add	r3, r2
    b570:	9304      	str	r3, [sp, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    b572:	f023 031f 	bic.w	r3, r3, #31
    b576:	445b      	add	r3, fp
    b578:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
    b57c:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    b57e:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
    b582:	a904      	add	r1, sp, #16
    b584:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
    b586:	9307      	str	r3, [sp, #28]
				region_allocate_and_init(reg_index,
    b588:	f7ff ff36 	bl	b3f8 <region_allocate_and_init>
    b58c:	e7be      	b.n	b50c <mpu_configure_regions_and_partition.constprop.0+0xdc>
    b58e:	bf00      	nop
    b590:	e000ed00 	.word	0xe000ed00
    b594:	00011551 	.word	0x00011551
    b598:	0001152e 	.word	0x0001152e
    b59c:	000109cc 	.word	0x000109cc

0000b5a0 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    b5a0:	2205      	movs	r2, #5
    b5a2:	4b04      	ldr	r3, [pc, #16]	; (b5b4 <arm_core_mpu_enable+0x14>)
    b5a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    b5a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b5ac:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    b5b0:	4770      	bx	lr
    b5b2:	bf00      	nop
    b5b4:	e000ed00 	.word	0xe000ed00

0000b5b8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    b5b8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    b5bc:	2200      	movs	r2, #0
    b5be:	4b02      	ldr	r3, [pc, #8]	; (b5c8 <arm_core_mpu_disable+0x10>)
    b5c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    b5c4:	4770      	bx	lr
    b5c6:	bf00      	nop
    b5c8:	e000ed00 	.word	0xe000ed00

0000b5cc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    b5cc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    b5ce:	4c03      	ldr	r4, [pc, #12]	; (b5dc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    b5d0:	7822      	ldrb	r2, [r4, #0]
    b5d2:	f7ff ff2d 	bl	b430 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    b5d6:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    b5d8:	bd10      	pop	{r4, pc}
    b5da:	bf00      	nop
    b5dc:	20008552 	.word	0x20008552

0000b5e0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    b5e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b5e4:	4d29      	ldr	r5, [pc, #164]	; (b68c <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    b5e6:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    b5e8:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    b5ea:	f04f 0800 	mov.w	r8, #0
    b5ee:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    b5f0:	4f27      	ldr	r7, [pc, #156]	; (b690 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    b5f2:	45d0      	cmp	r8, sl
    b5f4:	da1b      	bge.n	b62e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    b5f6:	f8d6 9004 	ldr.w	r9, [r6, #4]
    b5fa:	f1b9 0f00 	cmp.w	r9, #0
    b5fe:	d03f      	beq.n	b680 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    b600:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    b602:	4608      	mov	r0, r1
    b604:	9101      	str	r1, [sp, #4]
    b606:	f004 fb52 	bl	fcae <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    b60a:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    b60c:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    b60e:	eb09 0001 	add.w	r0, r9, r1
    b612:	3801      	subs	r0, #1
    b614:	f004 fb4b 	bl	fcae <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    b618:	4284      	cmp	r4, r0
    b61a:	f04f 0214 	mov.w	r2, #20
    b61e:	4b1d      	ldr	r3, [pc, #116]	; (b694 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    b620:	d008      	beq.n	b634 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    b622:	fb02 f308 	mul.w	r3, r2, r8
    b626:	f06f 0215 	mvn.w	r2, #21
    b62a:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    b62e:	b003      	add	sp, #12
    b630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    b634:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    b638:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    b63a:	d0f8      	beq.n	b62e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    b63c:	7819      	ldrb	r1, [r3, #0]
    b63e:	42a1      	cmp	r1, r4
    b640:	ddf5      	ble.n	b62e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    b642:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    b646:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    b64a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    b64e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    b652:	f100 0108 	add.w	r1, r0, #8
    b656:	7b00      	ldrb	r0, [r0, #12]
    b658:	f364 0004 	bfi	r0, r4, #0, #5
    b65c:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    b65e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    b662:	790c      	ldrb	r4, [r1, #4]
    b664:	0840      	lsrs	r0, r0, #1
    b666:	f360 1447 	bfi	r4, r0, #5, #3
    b66a:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    b66c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    b670:	f021 011f 	bic.w	r1, r1, #31
    b674:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    b676:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    b67a:	f021 011f 	bic.w	r1, r1, #31
    b67e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    b680:	f108 0801 	add.w	r8, r8, #1
    b684:	3514      	adds	r5, #20
    b686:	360c      	adds	r6, #12
    b688:	e7b3      	b.n	b5f2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    b68a:	bf00      	nop
    b68c:	2000833c 	.word	0x2000833c
    b690:	e000ed00 	.word	0xe000ed00
    b694:	20008552 	.word	0x20008552

0000b698 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    b698:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    b69a:	4d0e      	ldr	r5, [pc, #56]	; (b6d4 <z_arm_mpu_init+0x3c>)
    b69c:	682c      	ldr	r4, [r5, #0]
    b69e:	2c08      	cmp	r4, #8
    b6a0:	d815      	bhi.n	b6ce <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    b6a2:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    b6a4:	f7ff ff88 	bl	b5b8 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    b6a8:	4b0b      	ldr	r3, [pc, #44]	; (b6d8 <z_arm_mpu_init+0x40>)
    b6aa:	4a0c      	ldr	r2, [pc, #48]	; (b6dc <z_arm_mpu_init+0x44>)
    b6ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    b6b0:	4284      	cmp	r4, r0
    b6b2:	d105      	bne.n	b6c0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    b6b4:	4b0a      	ldr	r3, [pc, #40]	; (b6e0 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    b6b6:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    b6b8:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    b6ba:	f7ff ff71 	bl	b5a0 <arm_core_mpu_enable>
}
    b6be:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    b6c0:	6869      	ldr	r1, [r5, #4]
    b6c2:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    b6c6:	f7ff fe7d 	bl	b3c4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    b6ca:	3001      	adds	r0, #1
    b6cc:	e7f0      	b.n	b6b0 <z_arm_mpu_init+0x18>
		return -1;
    b6ce:	f04f 30ff 	mov.w	r0, #4294967295
    b6d2:	e7f4      	b.n	b6be <z_arm_mpu_init+0x26>
    b6d4:	00010aa8 	.word	0x00010aa8
    b6d8:	e000ed00 	.word	0xe000ed00
    b6dc:	0044ffaa 	.word	0x0044ffaa
    b6e0:	20008552 	.word	0x20008552

0000b6e4 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    b6e4:	4b01      	ldr	r3, [pc, #4]	; (b6ec <__stdout_hook_install+0x8>)
    b6e6:	6018      	str	r0, [r3, #0]
}
    b6e8:	4770      	bx	lr
    b6ea:	bf00      	nop
    b6ec:	20008034 	.word	0x20008034

0000b6f0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    b6f0:	4b08      	ldr	r3, [pc, #32]	; (b714 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    b6f2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    b6f4:	1ac3      	subs	r3, r0, r3
{
    b6f6:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    b6f8:	4907      	ldr	r1, [pc, #28]	; (b718 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    b6fa:	109b      	asrs	r3, r3, #2
{
    b6fc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    b6fe:	4359      	muls	r1, r3
    b700:	2240      	movs	r2, #64	; 0x40
    b702:	4806      	ldr	r0, [pc, #24]	; (b71c <onoff_stop+0x2c>)
    b704:	f004 fb7b 	bl	fdfe <stop>
	notify(mgr, res);
    b708:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    b70a:	4601      	mov	r1, r0
	notify(mgr, res);
    b70c:	4620      	mov	r0, r4
}
    b70e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    b712:	4718      	bx	r3
    b714:	20008364 	.word	0x20008364
    b718:	b6db6db7 	.word	0xb6db6db7
    b71c:	00010644 	.word	0x00010644

0000b720 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b720:	2340      	movs	r3, #64	; 0x40
{
    b722:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    b724:	4c0b      	ldr	r4, [pc, #44]	; (b754 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b726:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    b728:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b72a:	460b      	mov	r3, r1
{
    b72c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b72e:	490a      	ldr	r1, [pc, #40]	; (b758 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    b730:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b732:	4361      	muls	r1, r4
{
    b734:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b736:	4a09      	ldr	r2, [pc, #36]	; (b75c <onoff_start+0x3c>)
    b738:	4809      	ldr	r0, [pc, #36]	; (b760 <onoff_start+0x40>)
    b73a:	f004 fb8c 	bl	fe56 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    b73e:	1e01      	subs	r1, r0, #0
    b740:	da05      	bge.n	b74e <onoff_start+0x2e>
		notify(mgr, err);
    b742:	4630      	mov	r0, r6
    b744:	462b      	mov	r3, r5
	}
}
    b746:	b002      	add	sp, #8
    b748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    b74c:	4718      	bx	r3
}
    b74e:	b002      	add	sp, #8
    b750:	bd70      	pop	{r4, r5, r6, pc}
    b752:	bf00      	nop
    b754:	20008364 	.word	0x20008364
    b758:	b6db6db7 	.word	0xb6db6db7
    b75c:	0000fec1 	.word	0x0000fec1
    b760:	00010644 	.word	0x00010644

0000b764 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    b764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    b768:	2200      	movs	r2, #0
    b76a:	2101      	movs	r1, #1
{
    b76c:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    b76e:	2005      	movs	r0, #5
    b770:	f7ff f99a 	bl	aaa8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    b774:	4811      	ldr	r0, [pc, #68]	; (b7bc <clk_init+0x58>)
    b776:	f001 fef5 	bl	d564 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    b77a:	4b11      	ldr	r3, [pc, #68]	; (b7c0 <clk_init+0x5c>)
    b77c:	4298      	cmp	r0, r3
    b77e:	d119      	bne.n	b7b4 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    b780:	f001 ff00 	bl	d584 <nrfx_clock_enable>
    b784:	2400      	movs	r4, #0
	return &data->mgr[type];
    b786:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    b78a:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    b78c:	f8df 8034 	ldr.w	r8, [pc, #52]	; b7c4 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    b790:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    b792:	4641      	mov	r1, r8
    b794:	fb09 5004 	mla	r0, r9, r4, r5
    b798:	f003 ff4a 	bl	f630 <onoff_manager_init>
		if (err < 0) {
    b79c:	2800      	cmp	r0, #0
    b79e:	db07      	blt.n	b7b0 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    b7a0:	2301      	movs	r3, #1
    b7a2:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    b7a6:	441c      	add	r4, r3
    b7a8:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    b7aa:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    b7ac:	d1f0      	bne.n	b790 <clk_init+0x2c>
	}

	return 0;
    b7ae:	2000      	movs	r0, #0
}
    b7b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    b7b4:	f06f 0004 	mvn.w	r0, #4
    b7b8:	e7fa      	b.n	b7b0 <clk_init+0x4c>
    b7ba:	bf00      	nop
    b7bc:	0000b7fd 	.word	0x0000b7fd
    b7c0:	0bad0000 	.word	0x0bad0000
    b7c4:	00010ad0 	.word	0x00010ad0

0000b7c8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    b7c8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    b7ca:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    b7cc:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    b7ce:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    b7d0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    b7d2:	4808      	ldr	r0, [pc, #32]	; (b7f4 <clkstarted_handle.constprop.0+0x2c>)
    b7d4:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    b7d6:	3378      	adds	r3, #120	; 0x78
    b7d8:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    b7da:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	sub_data->cb = NULL;
    b7de:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    b7e0:	f004 fafa 	bl	fdd8 <set_on_state>
	if (callback) {
    b7e4:	b12d      	cbz	r5, b7f2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    b7e6:	4632      	mov	r2, r6
    b7e8:	462b      	mov	r3, r5
}
    b7ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    b7ee:	4802      	ldr	r0, [pc, #8]	; (b7f8 <clkstarted_handle.constprop.0+0x30>)
    b7f0:	4718      	bx	r3
}
    b7f2:	bd70      	pop	{r4, r5, r6, pc}
    b7f4:	20008364 	.word	0x20008364
    b7f8:	00010644 	.word	0x00010644

0000b7fc <clock_event_handler>:
	switch (event) {
    b7fc:	2805      	cmp	r0, #5
    b7fe:	d811      	bhi.n	b824 <clock_event_handler+0x28>
    b800:	e8df f000 	tbb	[pc, r0]
    b804:	10100e03 	.word	0x10100e03
    b808:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    b80a:	4b07      	ldr	r3, [pc, #28]	; (b828 <clock_event_handler+0x2c>)
    b80c:	6f98      	ldr	r0, [r3, #120]	; 0x78
    b80e:	f010 0007 	ands.w	r0, r0, #7
    b812:	d107      	bne.n	b824 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    b814:	f7ff bfd8 	b.w	b7c8 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    b818:	2002      	movs	r0, #2
    b81a:	e7fb      	b.n	b814 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    b81c:	2003      	movs	r0, #3
    b81e:	e7f9      	b.n	b814 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    b820:	2001      	movs	r0, #1
    b822:	e7f7      	b.n	b814 <clock_event_handler+0x18>
}
    b824:	4770      	bx	lr
    b826:	bf00      	nop
    b828:	20008364 	.word	0x20008364

0000b82c <generic_hfclk_start>:
{
    b82c:	b508      	push	{r3, lr}
	__asm__ volatile(
    b82e:	f04f 0320 	mov.w	r3, #32
    b832:	f3ef 8111 	mrs	r1, BASEPRI
    b836:	f383 8812 	msr	BASEPRI_MAX, r3
    b83a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    b83e:	4a11      	ldr	r2, [pc, #68]	; (b884 <generic_hfclk_start+0x58>)
    b840:	6813      	ldr	r3, [r2, #0]
    b842:	f043 0002 	orr.w	r0, r3, #2
    b846:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    b848:	07da      	lsls	r2, r3, #31
    b84a:	d408      	bmi.n	b85e <generic_hfclk_start+0x32>
	__asm__ volatile(
    b84c:	f381 8811 	msr	BASEPRI, r1
    b850:	f3bf 8f6f 	isb	sy
}
    b854:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    b858:	2001      	movs	r0, #1
    b85a:	f001 bea7 	b.w	d5ac <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    b85e:	4b0a      	ldr	r3, [pc, #40]	; (b888 <generic_hfclk_start+0x5c>)
    b860:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    b864:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    b868:	07d3      	lsls	r3, r2, #31
    b86a:	d5ef      	bpl.n	b84c <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    b86c:	4807      	ldr	r0, [pc, #28]	; (b88c <generic_hfclk_start+0x60>)
    b86e:	f004 fab3 	bl	fdd8 <set_on_state>
    b872:	f381 8811 	msr	BASEPRI, r1
    b876:	f3bf 8f6f 	isb	sy
}
    b87a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    b87e:	2000      	movs	r0, #0
    b880:	f7ff bfa2 	b.w	b7c8 <clkstarted_handle.constprop.0>
    b884:	20008404 	.word	0x20008404
    b888:	40005000 	.word	0x40005000
    b88c:	200083dc 	.word	0x200083dc

0000b890 <api_blocking_start>:
{
    b890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    b892:	2200      	movs	r2, #0
    b894:	2301      	movs	r3, #1
    b896:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    b89a:	466b      	mov	r3, sp
    b89c:	4a08      	ldr	r2, [pc, #32]	; (b8c0 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    b89e:	f8cd d000 	str.w	sp, [sp]
    b8a2:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    b8a6:	f004 fb04 	bl	feb2 <api_start>
	if (err < 0) {
    b8aa:	2800      	cmp	r0, #0
    b8ac:	db05      	blt.n	b8ba <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    b8ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    b8b2:	2300      	movs	r3, #0
    b8b4:	4668      	mov	r0, sp
    b8b6:	f003 f937 	bl	eb28 <z_impl_k_sem_take>
}
    b8ba:	b005      	add	sp, #20
    b8bc:	f85d fb04 	ldr.w	pc, [sp], #4
    b8c0:	0000fef7 	.word	0x0000fef7

0000b8c4 <generic_hfclk_stop>:
{
    b8c4:	b510      	push	{r4, lr}
	__asm__ volatile(
    b8c6:	f04f 0320 	mov.w	r3, #32
    b8ca:	f3ef 8411 	mrs	r4, BASEPRI
    b8ce:	f383 8812 	msr	BASEPRI_MAX, r3
    b8d2:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    b8d6:	4a07      	ldr	r2, [pc, #28]	; (b8f4 <generic_hfclk_stop+0x30>)
    b8d8:	6813      	ldr	r3, [r2, #0]
    b8da:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    b8de:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    b8e0:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    b8e2:	d402      	bmi.n	b8ea <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    b8e4:	2001      	movs	r0, #1
    b8e6:	f004 fce6 	bl	102b6 <nrfx_clock_stop>
	__asm__ volatile(
    b8ea:	f384 8811 	msr	BASEPRI, r4
    b8ee:	f3bf 8f6f 	isb	sy
}
    b8f2:	bd10      	pop	{r4, pc}
    b8f4:	20008404 	.word	0x20008404

0000b8f8 <z_nrf_clock_control_lf_on>:
{
    b8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b8fc:	2201      	movs	r2, #1
    b8fe:	4607      	mov	r7, r0
    b900:	4935      	ldr	r1, [pc, #212]	; (b9d8 <z_nrf_clock_control_lf_on+0xe0>)
    b902:	e8d1 3fef 	ldaex	r3, [r1]
    b906:	e8c1 2fe0 	stlex	r0, r2, [r1]
    b90a:	2800      	cmp	r0, #0
    b90c:	d1f9      	bne.n	b902 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    b90e:	b933      	cbnz	r3, b91e <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    b910:	4932      	ldr	r1, [pc, #200]	; (b9dc <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
    b912:	4833      	ldr	r0, [pc, #204]	; (b9e0 <z_nrf_clock_control_lf_on+0xe8>)
    b914:	604b      	str	r3, [r1, #4]
    b916:	60cb      	str	r3, [r1, #12]
    b918:	608a      	str	r2, [r1, #8]
    b91a:	f003 fe9c 	bl	f656 <onoff_request>
	switch (start_mode) {
    b91e:	1e7b      	subs	r3, r7, #1
    b920:	2b01      	cmp	r3, #1
    b922:	d828      	bhi.n	b976 <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    b924:	2f01      	cmp	r7, #1
    b926:	d106      	bne.n	b936 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    b928:	4b2e      	ldr	r3, [pc, #184]	; (b9e4 <z_nrf_clock_control_lf_on+0xec>)
    b92a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    b92e:	f003 0303 	and.w	r3, r3, #3
    b932:	2b02      	cmp	r3, #2
    b934:	d01f      	beq.n	b976 <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    b936:	f004 fd4e 	bl	103d6 <k_is_in_isr>
    b93a:	4605      	mov	r5, r0
    b93c:	b9e8      	cbnz	r0, b97a <z_nrf_clock_control_lf_on+0x82>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    b93e:	4b2a      	ldr	r3, [pc, #168]	; (b9e8 <z_nrf_clock_control_lf_on+0xf0>)
    b940:	781b      	ldrb	r3, [r3, #0]
    b942:	b1d3      	cbz	r3, b97a <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
    b944:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    b946:	4606      	mov	r6, r0
    b948:	4b26      	ldr	r3, [pc, #152]	; (b9e4 <z_nrf_clock_control_lf_on+0xec>)
    b94a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b94e:	4c25      	ldr	r4, [pc, #148]	; (b9e4 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b950:	f8df 8098 	ldr.w	r8, [pc, #152]	; b9ec <z_nrf_clock_control_lf_on+0xf4>
    b954:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b958:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    b95c:	03d2      	lsls	r2, r2, #15
    b95e:	d516      	bpl.n	b98e <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    b960:	f003 0303 	and.w	r3, r3, #3
    b964:	2b02      	cmp	r3, #2
    b966:	d001      	beq.n	b96c <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    b968:	2f01      	cmp	r7, #1
    b96a:	d110      	bne.n	b98e <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    b96c:	b375      	cbz	r5, b9cc <z_nrf_clock_control_lf_on+0xd4>
    b96e:	f386 8811 	msr	BASEPRI, r6
    b972:	f3bf 8f6f 	isb	sy
}
    b976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    b97a:	f04f 0320 	mov.w	r3, #32
    b97e:	f3ef 8611 	mrs	r6, BASEPRI
    b982:	f383 8812 	msr	BASEPRI_MAX, r3
    b986:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    b98a:	2501      	movs	r5, #1
    b98c:	e7df      	b.n	b94e <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    b98e:	b1c5      	cbz	r5, b9c2 <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    b990:	4630      	mov	r0, r6
    b992:	f7fe fff7 	bl	a984 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    b996:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    b99a:	b2db      	uxtb	r3, r3
    b99c:	2b01      	cmp	r3, #1
    b99e:	d1d9      	bne.n	b954 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    b9a0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    b9a4:	2a00      	cmp	r2, #0
    b9a6:	d0d5      	beq.n	b954 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b9a8:	2200      	movs	r2, #0
    b9aa:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    b9ae:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    b9b2:	2202      	movs	r2, #2
    b9b4:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    b9b8:	2220      	movs	r2, #32
    b9ba:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b9be:	60a3      	str	r3, [r4, #8]
}
    b9c0:	e7c8      	b.n	b954 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
    b9c2:	2100      	movs	r1, #0
    b9c4:	2021      	movs	r0, #33	; 0x21
    b9c6:	f003 fb99 	bl	f0fc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    b9ca:	e7e4      	b.n	b996 <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
    b9cc:	2202      	movs	r2, #2
    b9ce:	4b05      	ldr	r3, [pc, #20]	; (b9e4 <z_nrf_clock_control_lf_on+0xec>)
    b9d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b9d4:	e7cf      	b.n	b976 <z_nrf_clock_control_lf_on+0x7e>
    b9d6:	bf00      	nop
    b9d8:	20008360 	.word	0x20008360
    b9dc:	20008350 	.word	0x20008350
    b9e0:	20008380 	.word	0x20008380
    b9e4:	40005000 	.word	0x40005000
    b9e8:	20008556 	.word	0x20008556
    b9ec:	e000e100 	.word	0xe000e100

0000b9f0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    b9f0:	b508      	push	{r3, lr}
    b9f2:	4807      	ldr	r0, [pc, #28]	; (ba10 <uart_console_init+0x20>)
    b9f4:	f004 fcd0 	bl	10398 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    b9f8:	b138      	cbz	r0, ba0a <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    b9fa:	4806      	ldr	r0, [pc, #24]	; (ba14 <uart_console_init+0x24>)
    b9fc:	f7ff fe72 	bl	b6e4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    ba00:	4804      	ldr	r0, [pc, #16]	; (ba14 <uart_console_init+0x24>)
    ba02:	f7fd f89f 	bl	8b44 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    ba06:	2000      	movs	r0, #0
}
    ba08:	bd08      	pop	{r3, pc}
		return -ENODEV;
    ba0a:	f06f 0012 	mvn.w	r0, #18
    ba0e:	e7fb      	b.n	ba08 <uart_console_init+0x18>
    ba10:	000106a4 	.word	0x000106a4
    ba14:	0000ba19 	.word	0x0000ba19

0000ba18 <console_out>:
	if ('\n' == c) {
    ba18:	280a      	cmp	r0, #10
{
    ba1a:	b538      	push	{r3, r4, r5, lr}
    ba1c:	4604      	mov	r4, r0
    ba1e:	4d07      	ldr	r5, [pc, #28]	; (ba3c <console_out+0x24>)
	if ('\n' == c) {
    ba20:	d104      	bne.n	ba2c <console_out+0x14>
    ba22:	68ab      	ldr	r3, [r5, #8]
    ba24:	210d      	movs	r1, #13
    ba26:	4628      	mov	r0, r5
    ba28:	685b      	ldr	r3, [r3, #4]
    ba2a:	4798      	blx	r3
    ba2c:	68ab      	ldr	r3, [r5, #8]
    ba2e:	4803      	ldr	r0, [pc, #12]	; (ba3c <console_out+0x24>)
    ba30:	685b      	ldr	r3, [r3, #4]
    ba32:	b2e1      	uxtb	r1, r4
    ba34:	4798      	blx	r3
}
    ba36:	4620      	mov	r0, r4
    ba38:	bd38      	pop	{r3, r4, r5, pc}
    ba3a:	bf00      	nop
    ba3c:	000106a4 	.word	0x000106a4

0000ba40 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
    ba40:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
    ba44:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
    ba48:	280a      	cmp	r0, #10
    ba4a:	bf9a      	itte	ls
    ba4c:	4b02      	ldrls	r3, [pc, #8]	; (ba58 <qspi_get_zephyr_ret_code+0x18>)
    ba4e:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
    ba52:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
    ba56:	4770      	bx	lr
    ba58:	00010c90 	.word	0x00010c90

0000ba5c <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
    ba5c:	4b02      	ldr	r3, [pc, #8]	; (ba68 <qspi_nor_pages_layout+0xc>)
    ba5e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    ba60:	2301      	movs	r3, #1
    ba62:	6013      	str	r3, [r2, #0]
}
    ba64:	4770      	bx	lr
    ba66:	bf00      	nop
    ba68:	00010b9c 	.word	0x00010b9c

0000ba6c <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
    ba6c:	4800      	ldr	r0, [pc, #0]	; (ba70 <qspi_flash_get_parameters+0x4>)
    ba6e:	4770      	bx	lr
    ba70:	00010b30 	.word	0x00010b30

0000ba74 <qspi_lock.isra.0>:
static inline void qspi_lock(const struct device *dev)
    ba74:	b510      	push	{r4, lr}
    ba76:	4604      	mov	r4, r0
	return z_impl_k_sem_take(sem, timeout);
    ba78:	f04f 33ff 	mov.w	r3, #4294967295
    ba7c:	f04f 32ff 	mov.w	r2, #4294967295
    ba80:	3010      	adds	r0, #16
    ba82:	f003 f851 	bl	eb28 <z_impl_k_sem_take>
	if (!dev_data->xip_enabled) {
    ba86:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    ba8a:	b91b      	cbnz	r3, ba94 <qspi_lock.isra.0+0x20>

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
    ba8c:	2201      	movs	r2, #1
    ba8e:	4b02      	ldr	r3, [pc, #8]	; (ba98 <qspi_lock.isra.0+0x24>)
    ba90:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
}
    ba94:	bd10      	pop	{r4, pc}
    ba96:	bf00      	nop
    ba98:	40005000 	.word	0x40005000

0000ba9c <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
    ba9c:	4b05      	ldr	r3, [pc, #20]	; (bab4 <qspi_wait_for_completion.isra.0+0x18>)
    ba9e:	4299      	cmp	r1, r3
    baa0:	d106      	bne.n	bab0 <qspi_wait_for_completion.isra.0+0x14>
    baa2:	f04f 32ff 	mov.w	r2, #4294967295
    baa6:	f04f 33ff 	mov.w	r3, #4294967295
    baaa:	3020      	adds	r0, #32
    baac:	f003 b83c 	b.w	eb28 <z_impl_k_sem_take>
}
    bab0:	4770      	bx	lr
    bab2:	bf00      	nop
    bab4:	0bad0000 	.word	0x0bad0000

0000bab8 <qspi_unlock.isra.0>:
	if (!dev_data->xip_enabled) {
    bab8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    babc:	b91b      	cbnz	r3, bac6 <qspi_unlock.isra.0+0xe>
    babe:	2202      	movs	r2, #2
    bac0:	4b02      	ldr	r3, [pc, #8]	; (bacc <qspi_unlock.isra.0+0x14>)
    bac2:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    bac6:	3010      	adds	r0, #16
    bac8:	f003 b80e 	b.w	eae8 <z_impl_k_sem_give>
    bacc:	40005000 	.word	0x40005000

0000bad0 <qspi_send_cmd>:
{
    bad0:	b570      	push	{r4, r5, r6, lr}
	if (cmd->tx_buf) {
    bad2:	684c      	ldr	r4, [r1, #4]
{
    bad4:	4605      	mov	r5, r0
    bad6:	b088      	sub	sp, #32
	if (cmd->tx_buf) {
    bad8:	b1ec      	cbz	r4, bb16 <qspi_send_cmd+0x46>
		tx_buf = cmd->tx_buf->buf;
    bada:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
    bade:	6888      	ldr	r0, [r1, #8]
    bae0:	b1d8      	cbz	r0, bb1a <qspi_send_cmd+0x4a>
		rx_len = cmd->rx_buf->len;
    bae2:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
    bae6:	b1c8      	cbz	r0, bb1c <qspi_send_cmd+0x4c>
    bae8:	b1c3      	cbz	r3, bb1c <qspi_send_cmd+0x4c>
		if (rx_len != tx_len) {
    baea:	4283      	cmp	r3, r0
    baec:	d10f      	bne.n	bb0e <qspi_send_cmd+0x3e>
		xfer_len += tx_len;
    baee:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
    baf0:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
    baf2:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
    baf4:	d915      	bls.n	bb22 <qspi_send_cmd+0x52>
		LOG_WRN("cinstr %02x transfer too long: %zu",
    baf6:	e9cd 1303 	strd	r1, r3, [sp, #12]
    bafa:	4b19      	ldr	r3, [pc, #100]	; (bb60 <qspi_send_cmd+0x90>)
    bafc:	2202      	movs	r2, #2
    bafe:	9302      	str	r3, [sp, #8]
    bb00:	2300      	movs	r3, #0
    bb02:	4918      	ldr	r1, [pc, #96]	; (bb64 <qspi_send_cmd+0x94>)
    bb04:	4618      	mov	r0, r3
    bb06:	e9cd 3300 	strd	r3, r3, [sp]
    bb0a:	f004 fa0f 	bl	ff2c <z_log_msg_runtime_create.constprop.0>
}
    bb0e:	f06f 0015 	mvn.w	r0, #21
    bb12:	b008      	add	sp, #32
    bb14:	bd70      	pop	{r4, r5, r6, pc}
	size_t tx_len = 0;
    bb16:	4623      	mov	r3, r4
    bb18:	e7e1      	b.n	bade <qspi_send_cmd+0xe>
	void *rx_buf = NULL;
    bb1a:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
    bb1c:	3301      	adds	r3, #1
    bb1e:	4403      	add	r3, r0
    bb20:	e7e6      	b.n	baf0 <qspi_send_cmd+0x20>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
    bb22:	f88d 3019 	strb.w	r3, [sp, #25]
    bb26:	f240 1301 	movw	r3, #257	; 0x101
    bb2a:	f8ad 301a 	strh.w	r3, [sp, #26]
    bb2e:	2300      	movs	r3, #0
	qspi_lock(dev);
    bb30:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
    bb32:	f88d 301c 	strb.w	r3, [sp, #28]
    bb36:	f88d 1018 	strb.w	r1, [sp, #24]
    bb3a:	f88d 201d 	strb.w	r2, [sp, #29]
	qspi_lock(dev);
    bb3e:	f7ff ff99 	bl	ba74 <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
    bb42:	4621      	mov	r1, r4
    bb44:	4632      	mov	r2, r6
    bb46:	a806      	add	r0, sp, #24
    bb48:	f002 fbfc 	bl	e344 <nrfx_qspi_cinstr_xfer>
    bb4c:	4604      	mov	r4, r0
	qspi_unlock(dev);
    bb4e:	6928      	ldr	r0, [r5, #16]
    bb50:	f7ff ffb2 	bl	bab8 <qspi_unlock.isra.0>
	return qspi_get_zephyr_ret_code(res);
    bb54:	4620      	mov	r0, r4
}
    bb56:	b008      	add	sp, #32
    bb58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return qspi_get_zephyr_ret_code(res);
    bb5c:	f7ff bf70 	b.w	ba40 <qspi_get_zephyr_ret_code>
    bb60:	000115c5 	.word	0x000115c5
    bb64:	000109e4 	.word	0x000109e4

0000bb68 <qspi_device_uninit>:
{
    bb68:	b538      	push	{r3, r4, r5, lr}
	struct qspi_nor_data *dev_data = dev->data;
    bb6a:	6905      	ldr	r5, [r0, #16]
{
    bb6c:	4604      	mov	r4, r0
	if (dev_data->xip_enabled) {
    bb6e:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    bb72:	b9fb      	cbnz	r3, bbb4 <qspi_device_uninit+0x4c>
	qspi_lock(dev);
    bb74:	4628      	mov	r0, r5
    bb76:	f7ff ff7d 	bl	ba74 <qspi_lock.isra.0>
	return z_impl_k_sem_take(sem, timeout);
    bb7a:	2200      	movs	r2, #0
    bb7c:	2300      	movs	r3, #0
    bb7e:	f105 0030 	add.w	r0, r5, #48	; 0x30
    bb82:	f002 ffd1 	bl	eb28 <z_impl_k_sem_take>
	if (last) {
    bb86:	6bab      	ldr	r3, [r5, #56]	; 0x38
    bb88:	b94b      	cbnz	r3, bb9e <qspi_device_uninit+0x36>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
    bb8a:	4d0b      	ldr	r5, [pc, #44]	; (bbb8 <qspi_device_uninit+0x50>)
    bb8c:	f002 fc26 	bl	e3dc <nrfx_qspi_mem_busy_check>
    bb90:	42a8      	cmp	r0, r5
    bb92:	d109      	bne.n	bba8 <qspi_device_uninit+0x40>
		nrfx_qspi_uninit();
    bb94:	f002 fc44 	bl	e420 <nrfx_qspi_uninit>
		qspi_initialized = false;
    bb98:	2200      	movs	r2, #0
    bb9a:	4b08      	ldr	r3, [pc, #32]	; (bbbc <qspi_device_uninit+0x54>)
    bb9c:	701a      	strb	r2, [r3, #0]
	qspi_unlock(dev);
    bb9e:	6920      	ldr	r0, [r4, #16]
}
    bba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	qspi_unlock(dev);
    bba4:	f7ff bf88 	b.w	bab8 <qspi_unlock.isra.0>
	return z_impl_k_sleep(timeout);
    bba8:	2100      	movs	r1, #0
    bbaa:	f240 6067 	movw	r0, #1639	; 0x667
    bbae:	f003 faa5 	bl	f0fc <z_impl_k_sleep>
    bbb2:	e7eb      	b.n	bb8c <qspi_device_uninit+0x24>
}
    bbb4:	bd38      	pop	{r3, r4, r5, pc}
    bbb6:	bf00      	nop
    bbb8:	0bad0000 	.word	0x0bad0000
    bbbc:	20008553 	.word	0x20008553

0000bbc0 <qspi_device_init>:
{
    bbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct qspi_nor_data *dev_data = dev->data;
    bbc2:	6906      	ldr	r6, [r0, #16]
{
    bbc4:	4605      	mov	r5, r0
	if (dev_data->xip_enabled) {
    bbc6:	f896 4040 	ldrb.w	r4, [r6, #64]	; 0x40
    bbca:	b9d4      	cbnz	r4, bc02 <qspi_device_init+0x42>
	qspi_lock(dev);
    bbcc:	4630      	mov	r0, r6
    bbce:	f7ff ff51 	bl	ba74 <qspi_lock.isra.0>
	if (!qspi_initialized) {
    bbd2:	4f0d      	ldr	r7, [pc, #52]	; (bc08 <qspi_device_init+0x48>)
	z_impl_k_sem_give(sem);
    bbd4:	f106 0030 	add.w	r0, r6, #48	; 0x30
    bbd8:	f002 ff86 	bl	eae8 <z_impl_k_sem_give>
    bbdc:	783b      	ldrb	r3, [r7, #0]
    bbde:	b95b      	cbnz	r3, bbf8 <qspi_device_init+0x38>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
    bbe0:	4632      	mov	r2, r6
    bbe2:	490a      	ldr	r1, [pc, #40]	; (bc0c <qspi_device_init+0x4c>)
    bbe4:	6868      	ldr	r0, [r5, #4]
    bbe6:	f002 fac3 	bl	e170 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
    bbea:	f7ff ff29 	bl	ba40 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
    bbee:	fab0 f380 	clz	r3, r0
    bbf2:	4604      	mov	r4, r0
    bbf4:	095b      	lsrs	r3, r3, #5
    bbf6:	703b      	strb	r3, [r7, #0]
	qspi_unlock(dev);
    bbf8:	6928      	ldr	r0, [r5, #16]
    bbfa:	f7ff ff5d 	bl	bab8 <qspi_unlock.isra.0>
}
    bbfe:	4620      	mov	r0, r4
    bc00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
    bc02:	2400      	movs	r4, #0
    bc04:	e7fb      	b.n	bbfe <qspi_device_init+0x3e>
    bc06:	bf00      	nop
    bc08:	20008553 	.word	0x20008553
    bc0c:	0000ff21 	.word	0x0000ff21

0000bc10 <qspi_nor_erase>:
{
    bc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
    bc14:	2900      	cmp	r1, #0
{
    bc16:	4606      	mov	r6, r0
    bc18:	4615      	mov	r5, r2
	const struct qspi_nor_config *params = dev->config;
    bc1a:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
    bc1e:	b087      	sub	sp, #28
	if (addr < 0 ||
    bc20:	db05      	blt.n	bc2e <qspi_nor_erase+0x1e>
    bc22:	f8da 3018 	ldr.w	r3, [sl, #24]
	    (addr + size) > params->size) {
    bc26:	188a      	adds	r2, r1, r2
	if (addr < 0 ||
    bc28:	429a      	cmp	r2, r3
	    (addr + size) > params->size) {
    bc2a:	4688      	mov	r8, r1
	if (addr < 0 ||
    bc2c:	d911      	bls.n	bc52 <qspi_nor_erase+0x42>
		LOG_ERR("erase error: address or size "
    bc2e:	4b46      	ldr	r3, [pc, #280]	; (bd48 <qspi_nor_erase+0x138>)
    bc30:	e9cd 1503 	strd	r1, r5, [sp, #12]
    bc34:	9302      	str	r3, [sp, #8]
    bc36:	2300      	movs	r3, #0
    bc38:	2201      	movs	r2, #1
    bc3a:	4618      	mov	r0, r3
    bc3c:	e9cd 3300 	strd	r3, r3, [sp]
    bc40:	4942      	ldr	r1, [pc, #264]	; (bd4c <qspi_nor_erase+0x13c>)
    bc42:	f004 f973 	bl	ff2c <z_log_msg_runtime_create.constprop.0>
	int rv2 = qspi_nor_write_protection_set(dev, true);
    bc46:	f06f 0415 	mvn.w	r4, #21
}
    bc4a:	4620      	mov	r0, r4
    bc4c:	b007      	add	sp, #28
    bc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
    bc52:	f3c1 020b 	ubfx	r2, r1, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
    bc56:	2d00      	cmp	r5, #0
    bc58:	d0f5      	beq.n	bc46 <qspi_nor_erase+0x36>
    bc5a:	f3c5 030b 	ubfx	r3, r5, #0, #12
    bc5e:	4313      	orrs	r3, r2
    bc60:	d1f1      	bne.n	bc46 <qspi_nor_erase+0x36>
	rv = qspi_device_init(dev);
    bc62:	f7ff ffad 	bl	bbc0 <qspi_device_init>
	if (rv != 0) {
    bc66:	4604      	mov	r4, r0
    bc68:	bb60      	cbnz	r0, bcc4 <qspi_nor_erase+0xb4>
	qspi_trans_lock(dev);
    bc6a:	6930      	ldr	r0, [r6, #16]
    bc6c:	f004 f96d 	bl	ff4a <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
    bc70:	4621      	mov	r1, r4
    bc72:	4630      	mov	r0, r6
    bc74:	f004 f96f 	bl	ff56 <qspi_nor_write_protection_set>
	if (rv != 0) {
    bc78:	4604      	mov	r4, r0
    bc7a:	bb00      	cbnz	r0, bcbe <qspi_nor_erase+0xae>
	qspi_lock(dev);
    bc7c:	6930      	ldr	r0, [r6, #16]
    bc7e:	f7ff fef9 	bl	ba74 <qspi_lock.isra.0>
		if (res == NRFX_SUCCESS) {
    bc82:	f8df b0cc 	ldr.w	fp, [pc, #204]	; bd50 <qspi_nor_erase+0x140>
		if (size == params->size) {
    bc86:	f8da 3018 	ldr.w	r3, [sl, #24]
    bc8a:	42ab      	cmp	r3, r5
    bc8c:	d11e      	bne.n	bccc <qspi_nor_erase+0xbc>
			res = nrfx_qspi_chip_erase();
    bc8e:	f004 fb7e 	bl	1038e <nrfx_qspi_chip_erase>
    bc92:	46a9      	mov	r9, r5
    bc94:	4607      	mov	r7, r0
		qspi_wait_for_completion(dev, res);
    bc96:	4639      	mov	r1, r7
    bc98:	6930      	ldr	r0, [r6, #16]
    bc9a:	f7ff feff 	bl	ba9c <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
    bc9e:	455f      	cmp	r7, fp
    bca0:	d140      	bne.n	bd24 <qspi_nor_erase+0x114>
	while (size > 0) {
    bca2:	ebb5 0509 	subs.w	r5, r5, r9
			addr += adj;
    bca6:	44c8      	add	r8, r9
	while (size > 0) {
    bca8:	d1ed      	bne.n	bc86 <qspi_nor_erase+0x76>
	qspi_unlock(dev);
    bcaa:	6930      	ldr	r0, [r6, #16]
    bcac:	f7ff ff04 	bl	bab8 <qspi_unlock.isra.0>
	int rv2 = qspi_nor_write_protection_set(dev, true);
    bcb0:	2101      	movs	r1, #1
    bcb2:	4630      	mov	r0, r6
    bcb4:	f004 f94f 	bl	ff56 <qspi_nor_write_protection_set>
    bcb8:	2c00      	cmp	r4, #0
    bcba:	bf08      	it	eq
    bcbc:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
    bcbe:	6930      	ldr	r0, [r6, #16]
    bcc0:	f002 ff12 	bl	eae8 <z_impl_k_sem_give>
	qspi_device_uninit(dev);
    bcc4:	4630      	mov	r0, r6
    bcc6:	f7ff ff4f 	bl	bb68 <qspi_device_uninit>
	return rv;
    bcca:	e7be      	b.n	bc4a <qspi_nor_erase+0x3a>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
    bccc:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    bcd0:	d30a      	bcc.n	bce8 <qspi_nor_erase+0xd8>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
    bcd2:	fa1f f388 	uxth.w	r3, r8
		} else if ((size >= QSPI_BLOCK_SIZE) &&
    bcd6:	b953      	cbnz	r3, bcee <qspi_nor_erase+0xde>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
    bcd8:	4641      	mov	r1, r8
    bcda:	2001      	movs	r0, #1
    bcdc:	f002 fbee 	bl	e4bc <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
    bce0:	f44f 3980 	mov.w	r9, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
    bce4:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
    bce6:	e7d6      	b.n	bc96 <qspi_nor_erase+0x86>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
    bce8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    bcec:	d309      	bcc.n	bd02 <qspi_nor_erase+0xf2>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
    bcee:	f3c8 000b 	ubfx	r0, r8, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
    bcf2:	b930      	cbnz	r0, bd02 <qspi_nor_erase+0xf2>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
    bcf4:	4641      	mov	r1, r8
    bcf6:	f002 fbe1 	bl	e4bc <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
    bcfa:	f44f 5980 	mov.w	r9, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
    bcfe:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
    bd00:	e7c9      	b.n	bc96 <qspi_nor_erase+0x86>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
    bd02:	4b14      	ldr	r3, [pc, #80]	; (bd54 <qspi_nor_erase+0x144>)
    bd04:	2201      	movs	r2, #1
    bd06:	9302      	str	r3, [sp, #8]
    bd08:	2300      	movs	r3, #0
    bd0a:	4910      	ldr	r1, [pc, #64]	; (bd4c <qspi_nor_erase+0x13c>)
    bd0c:	4618      	mov	r0, r3
    bd0e:	e9cd 3300 	strd	r3, r3, [sp]
    bd12:	e9cd 8503 	strd	r8, r5, [sp, #12]
    bd16:	f004 f909 	bl	ff2c <z_log_msg_runtime_create.constprop.0>
		qspi_wait_for_completion(dev, res);
    bd1a:	490f      	ldr	r1, [pc, #60]	; (bd58 <qspi_nor_erase+0x148>)
    bd1c:	6930      	ldr	r0, [r6, #16]
    bd1e:	f7ff febd 	bl	ba9c <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
    bd22:	4f0d      	ldr	r7, [pc, #52]	; (bd58 <qspi_nor_erase+0x148>)
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
    bd24:	4b0d      	ldr	r3, [pc, #52]	; (bd5c <qspi_nor_erase+0x14c>)
    bd26:	2201      	movs	r2, #1
    bd28:	9302      	str	r3, [sp, #8]
    bd2a:	2300      	movs	r3, #0
    bd2c:	e9cd 8503 	strd	r8, r5, [sp, #12]
    bd30:	4618      	mov	r0, r3
    bd32:	e9cd 3300 	strd	r3, r3, [sp]
    bd36:	4905      	ldr	r1, [pc, #20]	; (bd4c <qspi_nor_erase+0x13c>)
    bd38:	f004 f8f8 	bl	ff2c <z_log_msg_runtime_create.constprop.0>
			rv = qspi_get_zephyr_ret_code(res);
    bd3c:	4638      	mov	r0, r7
    bd3e:	f7ff fe7f 	bl	ba40 <qspi_get_zephyr_ret_code>
    bd42:	4604      	mov	r4, r0
			break;
    bd44:	e7b1      	b.n	bcaa <qspi_nor_erase+0x9a>
    bd46:	bf00      	nop
    bd48:	000115e8 	.word	0x000115e8
    bd4c:	000109e4 	.word	0x000109e4
    bd50:	0bad0000 	.word	0x0bad0000
    bd54:	00011632 	.word	0x00011632
    bd58:	0bad0004 	.word	0x0bad0004
    bd5c:	00011650 	.word	0x00011650

0000bd60 <qspi_nor_init>:
{
    bd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    bd64:	6843      	ldr	r3, [r0, #4]
{
    bd66:	b090      	sub	sp, #64	; 0x40
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    bd68:	6a1e      	ldr	r6, [r3, #32]
{
    bd6a:	4605      	mov	r5, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    bd6c:	2100      	movs	r1, #0
    bd6e:	4630      	mov	r0, r6
    bd70:	aa0d      	add	r2, sp, #52	; 0x34
    bd72:	f004 f9e5 	bl	10140 <pinctrl_lookup_state>
	if (ret < 0) {
    bd76:	1e04      	subs	r4, r0, #0
    bd78:	db4b      	blt.n	be12 <qspi_nor_init+0xb2>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    bd7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    bd7c:	6832      	ldr	r2, [r6, #0]
    bd7e:	7919      	ldrb	r1, [r3, #4]
    bd80:	6818      	ldr	r0, [r3, #0]
    bd82:	f000 fd63 	bl	c84c <pinctrl_configure_pins>
	if (ret < 0) {
    bd86:	1e04      	subs	r4, r0, #0
    bd88:	db43      	blt.n	be12 <qspi_nor_init+0xb2>
    bd8a:	2701      	movs	r7, #1
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
    bd8c:	2200      	movs	r2, #0
    bd8e:	2101      	movs	r1, #1
    bd90:	202b      	movs	r0, #43	; 0x2b
    bd92:	f7fe fe89 	bl	aaa8 <z_arm_irq_priority_set>
    bd96:	4c60      	ldr	r4, [pc, #384]	; (bf18 <qspi_nor_init+0x1b8>)
	const struct qspi_nor_config *dev_config = dev->config;
    bd98:	686e      	ldr	r6, [r5, #4]
	struct qspi_nor_data *dev_data = dev->data;
    bd9a:	692a      	ldr	r2, [r5, #16]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
    bd9c:	4630      	mov	r0, r6
    bd9e:	f8c4 75b8 	str.w	r7, [r4, #1464]	; 0x5b8
    bda2:	495e      	ldr	r1, [pc, #376]	; (bf1c <qspi_nor_init+0x1bc>)
    bda4:	f002 f9e4 	bl	e170 <nrfx_qspi_init>
    bda8:	2302      	movs	r3, #2
    bdaa:	f8c4 35b8 	str.w	r3, [r4, #1464]	; 0x5b8
	int ret = qspi_get_zephyr_ret_code(res);
    bdae:	f7ff fe47 	bl	ba40 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
    bdb2:	1e04      	subs	r4, r0, #0
    bdb4:	db2d      	blt.n	be12 <qspi_nor_init+0xb2>
#endif /* CONFIG_PM_DEVICE */

static int exit_dpd(const struct device *const dev)
{
	if (IS_ENABLED(DT_INST_PROP(0, has_dpd))) {
		struct qspi_cmd cmd = {
    bdb6:	2200      	movs	r2, #0
    bdb8:	23ab      	movs	r3, #171	; 0xab
			.op_code = SPI_NOR_CMD_RDPD,
		};
		uint32_t t_exit_dpd = DT_INST_PROP_OR(0, t_exit_dpd, 0);
		int ret;

		ret = qspi_send_cmd(dev, &cmd, false);
    bdba:	4628      	mov	r0, r5
    bdbc:	a90d      	add	r1, sp, #52	; 0x34
		struct qspi_cmd cmd = {
    bdbe:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
    bdc2:	920f      	str	r2, [sp, #60]	; 0x3c
    bdc4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
		ret = qspi_send_cmd(dev, &cmd, false);
    bdc8:	f7ff fe82 	bl	bad0 <qspi_send_cmd>
		if (ret < 0) {
    bdcc:	1e04      	subs	r4, r0, #0
    bdce:	db20      	blt.n	be12 <qspi_nor_init+0xb2>
	z_impl_k_busy_wait(usec_to_wait);
    bdd0:	2023      	movs	r0, #35	; 0x23
    bdd2:	f004 fbf6 	bl	105c2 <z_impl_k_busy_wait>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
    bdd6:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
    bdd8:	3b02      	subs	r3, #2
    bdda:	42bb      	cmp	r3, r7
    bddc:	d91d      	bls.n	be1a <qspi_nor_init+0xba>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
    bdde:	f896 800a 	ldrb.w	r8, [r6, #10]
    bde2:	f1a8 0803 	sub.w	r8, r8, #3
    bde6:	45b8      	cmp	r8, r7
    bde8:	bf8c      	ite	hi
    bdea:	f04f 0800 	movhi.w	r8, #0
    bdee:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
    bdf2:	4628      	mov	r0, r5
    bdf4:	f004 f8c4 	bl	ff80 <qspi_rdsr.constprop.0>
		if (ret < 0) {
    bdf8:	1e04      	subs	r4, r0, #0
    bdfa:	da10      	bge.n	be1e <qspi_nor_init+0xbe>
			LOG_ERR("RDSR failed: %d", ret);
    bdfc:	4b48      	ldr	r3, [pc, #288]	; (bf20 <qspi_nor_init+0x1c0>)
    bdfe:	2201      	movs	r2, #1
    be00:	9302      	str	r3, [sp, #8]
    be02:	2300      	movs	r3, #0
    be04:	4947      	ldr	r1, [pc, #284]	; (bf24 <qspi_nor_init+0x1c4>)
    be06:	4618      	mov	r0, r3
    be08:	e9cd 3300 	strd	r3, r3, [sp]
    be0c:	9403      	str	r4, [sp, #12]
    be0e:	f004 f88d 	bl	ff2c <z_log_msg_runtime_create.constprop.0>
}
    be12:	4620      	mov	r0, r4
    be14:	b010      	add	sp, #64	; 0x40
    be16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
    be1a:	46b8      	mov	r8, r7
    be1c:	e7e9      	b.n	bdf2 <qspi_nor_init+0x92>
		uint8_t sr = (uint8_t)ret;
    be1e:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
    be20:	f3c4 1480 	ubfx	r4, r4, #6, #1
    be24:	45a0      	cmp	r8, r4
    be26:	ae0a      	add	r6, sp, #40	; 0x28
    be28:	af0b      	add	r7, sp, #44	; 0x2c
    be2a:	d02f      	beq.n	be8c <qspi_nor_init+0x12c>
	uint8_t sr_array[2] = {0};
    be2c:	2300      	movs	r3, #0
			sr ^= qe_mask;
    be2e:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
    be32:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		sr_array[0] = sr_val;
    be36:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
	const struct qspi_buf sr_buf = {
    be3a:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
    be3c:	4628      	mov	r0, r5
    be3e:	a90d      	add	r1, sp, #52	; 0x34
	struct qspi_cmd cmd = {
    be40:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	const struct qspi_buf sr_buf = {
    be44:	960b      	str	r6, [sp, #44]	; 0x2c
	struct qspi_cmd cmd = {
    be46:	930f      	str	r3, [sp, #60]	; 0x3c
    be48:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
    be4c:	970e      	str	r7, [sp, #56]	; 0x38
	ret = qspi_send_cmd(dev, &cmd, true);
    be4e:	f7ff fe3f 	bl	bad0 <qspi_send_cmd>
	if (ret == 0) {
    be52:	1e04      	subs	r4, r0, #0
    be54:	d013      	beq.n	be7e <qspi_nor_init+0x11e>
		if (ret < 0) {
    be56:	dadc      	bge.n	be12 <qspi_nor_init+0xb2>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
    be58:	4a33      	ldr	r2, [pc, #204]	; (bf28 <qspi_nor_init+0x1c8>)
    be5a:	4b34      	ldr	r3, [pc, #208]	; (bf2c <qspi_nor_init+0x1cc>)
    be5c:	4931      	ldr	r1, [pc, #196]	; (bf24 <qspi_nor_init+0x1c4>)
    be5e:	f1b8 0f00 	cmp.w	r8, #0
    be62:	bf18      	it	ne
    be64:	4613      	movne	r3, r2
    be66:	e9cd 3403 	strd	r3, r4, [sp, #12]
    be6a:	4b31      	ldr	r3, [pc, #196]	; (bf30 <qspi_nor_init+0x1d0>)
    be6c:	2201      	movs	r2, #1
    be6e:	9302      	str	r3, [sp, #8]
    be70:	2300      	movs	r3, #0
    be72:	4618      	mov	r0, r3
    be74:	e9cd 3300 	strd	r3, r3, [sp]
    be78:	f004 f858 	bl	ff2c <z_log_msg_runtime_create.constprop.0>
	if (ret != 0) {
    be7c:	e7c9      	b.n	be12 <qspi_nor_init+0xb2>
		ret = qspi_rdsr(dev, 1);
    be7e:	4628      	mov	r0, r5
    be80:	f004 f87e 	bl	ff80 <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
    be84:	1e04      	subs	r4, r0, #0
    be86:	dbe7      	blt.n	be58 <qspi_nor_init+0xf8>
    be88:	07e3      	lsls	r3, r4, #31
    be8a:	d4f8      	bmi.n	be7e <qspi_nor_init+0x11e>
	qspi_device_uninit(dev);
    be8c:	4628      	mov	r0, r5
    be8e:	f7ff fe6b 	bl	bb68 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
    be92:	2403      	movs	r4, #3
    be94:	2300      	movs	r3, #0
    be96:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
    be9a:	930e      	str	r3, [sp, #56]	; 0x38
    be9c:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
    be9e:	4628      	mov	r0, r5
	const struct qspi_buf rx_buf = {
    bea0:	960b      	str	r6, [sp, #44]	; 0x2c
	const struct qspi_cmd cmd = {
    bea2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    bea6:	970f      	str	r7, [sp, #60]	; 0x3c
	int ret = qspi_device_init(dev);
    bea8:	f7ff fe8a 	bl	bbc0 <qspi_device_init>
	if (ret == 0) {
    beac:	4602      	mov	r2, r0
    beae:	b128      	cbz	r0, bebc <qspi_nor_init+0x15c>
	qspi_device_uninit(dev);
    beb0:	4628      	mov	r0, r5
    beb2:	f7ff fe59 	bl	bb68 <qspi_device_uninit>
		return -ENODEV;
    beb6:	f06f 0412 	mvn.w	r4, #18
    beba:	e7aa      	b.n	be12 <qspi_nor_init+0xb2>
		ret = qspi_send_cmd(dev, &cmd, false);
    bebc:	4628      	mov	r0, r5
    bebe:	a90d      	add	r1, sp, #52	; 0x34
    bec0:	f7ff fe06 	bl	bad0 <qspi_send_cmd>
    bec4:	4607      	mov	r7, r0
	qspi_device_uninit(dev);
    bec6:	4628      	mov	r0, r5
    bec8:	f7ff fe4e 	bl	bb68 <qspi_device_uninit>
	if (ret != 0) {
    becc:	2f00      	cmp	r7, #0
    bece:	d1f2      	bne.n	beb6 <qspi_nor_init+0x156>
	const struct qspi_nor_config *qnc = dev->config;
    bed0:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
    bed2:	4622      	mov	r2, r4
    bed4:	4631      	mov	r1, r6
    bed6:	f105 001c 	add.w	r0, r5, #28
    beda:	f003 ff36 	bl	fd4a <memcmp>
    bede:	4604      	mov	r4, r0
    bee0:	2800      	cmp	r0, #0
    bee2:	d096      	beq.n	be12 <qspi_nor_init+0xb2>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
    bee4:	7fab      	ldrb	r3, [r5, #30]
    bee6:	2201      	movs	r2, #1
    bee8:	9308      	str	r3, [sp, #32]
    beea:	7f6b      	ldrb	r3, [r5, #29]
    beec:	4638      	mov	r0, r7
    beee:	9307      	str	r3, [sp, #28]
    bef0:	7f2b      	ldrb	r3, [r5, #28]
    bef2:	490c      	ldr	r1, [pc, #48]	; (bf24 <qspi_nor_init+0x1c4>)
    bef4:	9306      	str	r3, [sp, #24]
    bef6:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    befa:	9700      	str	r7, [sp, #0]
    befc:	9305      	str	r3, [sp, #20]
    befe:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    bf02:	9304      	str	r3, [sp, #16]
    bf04:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    bf08:	9303      	str	r3, [sp, #12]
    bf0a:	4b0a      	ldr	r3, [pc, #40]	; (bf34 <qspi_nor_init+0x1d4>)
    bf0c:	e9cd 7301 	strd	r7, r3, [sp, #4]
    bf10:	463b      	mov	r3, r7
    bf12:	f004 f80b 	bl	ff2c <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
    bf16:	e7ce      	b.n	beb6 <qspi_nor_init+0x156>
    bf18:	40005000 	.word	0x40005000
    bf1c:	0000ff21 	.word	0x0000ff21
    bf20:	00011678 	.word	0x00011678
    bf24:	000109e4 	.word	0x000109e4
    bf28:	0001166e 	.word	0x0001166e
    bf2c:	00011672 	.word	0x00011672
    bf30:	00011688 	.word	0x00011688
    bf34:	00011699 	.word	0x00011699

0000bf38 <qspi_nor_write>:
{
    bf38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bf3c:	4605      	mov	r5, r0
    bf3e:	460f      	mov	r7, r1
    bf40:	461e      	mov	r6, r3
	if (!src) {
    bf42:	4690      	mov	r8, r2
{
    bf44:	b088      	sub	sp, #32
	if (!src) {
    bf46:	b1ca      	cbz	r2, bf7c <qspi_nor_write+0x44>
	if ((size == 0)
    bf48:	b1c3      	cbz	r3, bf7c <qspi_nor_write+0x44>
	    || ((size > 4) && ((size % 4U) != 0))) {
    bf4a:	2b04      	cmp	r3, #4
    bf4c:	d901      	bls.n	bf52 <qspi_nor_write+0x1a>
    bf4e:	079a      	lsls	r2, r3, #30
    bf50:	d114      	bne.n	bf7c <qspi_nor_write+0x44>
	if ((addr % 4U) != 0) {
    bf52:	07bb      	lsls	r3, r7, #30
    bf54:	d112      	bne.n	bf7c <qspi_nor_write+0x44>
	if (addr < 0 ||
    bf56:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
    bf58:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
    bf5a:	db03      	blt.n	bf64 <qspi_nor_write+0x2c>
    bf5c:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
    bf5e:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
    bf60:	4293      	cmp	r3, r2
    bf62:	d911      	bls.n	bf88 <qspi_nor_write+0x50>
		LOG_ERR("write error: address or size "
    bf64:	4b3f      	ldr	r3, [pc, #252]	; (c064 <qspi_nor_write+0x12c>)
    bf66:	2201      	movs	r2, #1
    bf68:	9302      	str	r3, [sp, #8]
    bf6a:	2300      	movs	r3, #0
    bf6c:	e9cd 7603 	strd	r7, r6, [sp, #12]
    bf70:	4618      	mov	r0, r3
    bf72:	e9cd 3300 	strd	r3, r3, [sp]
    bf76:	493c      	ldr	r1, [pc, #240]	; (c068 <qspi_nor_write+0x130>)
    bf78:	f003 ffd8 	bl	ff2c <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    bf7c:	f06f 0415 	mvn.w	r4, #21
}
    bf80:	4620      	mov	r0, r4
    bf82:	b008      	add	sp, #32
    bf84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int rc = qspi_device_init(dev);
    bf88:	4628      	mov	r0, r5
    bf8a:	f7ff fe19 	bl	bbc0 <qspi_device_init>
	if (rc != 0) {
    bf8e:	4604      	mov	r4, r0
    bf90:	2800      	cmp	r0, #0
    bf92:	d15f      	bne.n	c054 <qspi_nor_write+0x11c>
	qspi_trans_lock(dev);
    bf94:	6928      	ldr	r0, [r5, #16]
    bf96:	f003 ffd8 	bl	ff4a <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
    bf9a:	4621      	mov	r1, r4
    bf9c:	4628      	mov	r0, r5
    bf9e:	f003 ffda 	bl	ff56 <qspi_nor_write_protection_set>
    bfa2:	4604      	mov	r4, r0
	qspi_lock(dev);
    bfa4:	6928      	ldr	r0, [r5, #16]
    bfa6:	f7ff fd65 	bl	ba74 <qspi_lock.isra.0>
	if (!res) {
    bfaa:	2c00      	cmp	r4, #0
    bfac:	d140      	bne.n	c030 <qspi_nor_write+0xf8>
		if (size < 4U) {
    bfae:	2e03      	cmp	r6, #3
    bfb0:	d81c      	bhi.n	bfec <qspi_nor_write+0xb4>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
    bfb2:	463a      	mov	r2, r7
    bfb4:	2104      	movs	r1, #4
    bfb6:	a807      	add	r0, sp, #28
    bfb8:	f004 f9e6 	bl	10388 <nrfx_qspi_read>
    bfbc:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
    bfbe:	4601      	mov	r1, r0
    bfc0:	6928      	ldr	r0, [r5, #16]
    bfc2:	f7ff fd6b 	bl	ba9c <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
    bfc6:	4b29      	ldr	r3, [pc, #164]	; (c06c <qspi_nor_write+0x134>)
    bfc8:	429c      	cmp	r4, r3
    bfca:	d131      	bne.n	c030 <qspi_nor_write+0xf8>
		memcpy(buf, sptr, slen);
    bfcc:	4632      	mov	r2, r6
    bfce:	4641      	mov	r1, r8
    bfd0:	a807      	add	r0, sp, #28
    bfd2:	f003 fee1 	bl	fd98 <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
    bfd6:	463a      	mov	r2, r7
    bfd8:	2104      	movs	r1, #4
    bfda:	a807      	add	r0, sp, #28
			res = nrfx_qspi_write(src, size, addr);
    bfdc:	f004 f9d1 	bl	10382 <nrfx_qspi_write>
    bfe0:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
    bfe2:	4601      	mov	r1, r0
    bfe4:	6928      	ldr	r0, [r5, #16]
    bfe6:	f7ff fd59 	bl	ba9c <qspi_wait_for_completion.isra.0>
    bfea:	e021      	b.n	c030 <qspi_nor_write+0xf8>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    bfec:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
    bff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    bff4:	d032      	beq.n	c05c <qspi_nor_write+0x124>
			if (res == NRFX_SUCCESS) {
    bff6:	f8df a074 	ldr.w	sl, [pc, #116]	; c06c <qspi_nor_write+0x134>
			size_t len = MIN(slen, sizeof(buf));
    bffa:	2e04      	cmp	r6, #4
    bffc:	46b1      	mov	r9, r6
    bffe:	bf28      	it	cs
    c000:	f04f 0904 	movcs.w	r9, #4
			memcpy(buf, sp, len);
    c004:	4641      	mov	r1, r8
    c006:	464a      	mov	r2, r9
    c008:	a807      	add	r0, sp, #28
    c00a:	f003 fec5 	bl	fd98 <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
    c00e:	463a      	mov	r2, r7
    c010:	2104      	movs	r1, #4
    c012:	a807      	add	r0, sp, #28
    c014:	f004 f9b5 	bl	10382 <nrfx_qspi_write>
    c018:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
    c01a:	4601      	mov	r1, r0
    c01c:	6928      	ldr	r0, [r5, #16]
    c01e:	f7ff fd3d 	bl	ba9c <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
    c022:	4554      	cmp	r4, sl
    c024:	d104      	bne.n	c030 <qspi_nor_write+0xf8>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
    c026:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
    c02a:	44c8      	add	r8, r9
				addr += len;
    c02c:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
    c02e:	d1e4      	bne.n	bffa <qspi_nor_write+0xc2>
	qspi_unlock(dev);
    c030:	6928      	ldr	r0, [r5, #16]
    c032:	f7ff fd41 	bl	bab8 <qspi_unlock.isra.0>
	int res2 = qspi_nor_write_protection_set(dev, true);
    c036:	2101      	movs	r1, #1
    c038:	4628      	mov	r0, r5
    c03a:	f003 ff8c 	bl	ff56 <qspi_nor_write_protection_set>
    c03e:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
    c040:	6928      	ldr	r0, [r5, #16]
	z_impl_k_sem_give(sem);
    c042:	f002 fd51 	bl	eae8 <z_impl_k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
    c046:	2c00      	cmp	r4, #0
    c048:	bf14      	ite	ne
    c04a:	4620      	movne	r0, r4
    c04c:	4630      	moveq	r0, r6
    c04e:	f7ff fcf7 	bl	ba40 <qspi_get_zephyr_ret_code>
    c052:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
    c054:	4628      	mov	r0, r5
    c056:	f7ff fd87 	bl	bb68 <qspi_device_uninit>
	return rc;
    c05a:	e791      	b.n	bf80 <qspi_nor_write+0x48>
			res = nrfx_qspi_write(src, size, addr);
    c05c:	463a      	mov	r2, r7
    c05e:	4631      	mov	r1, r6
    c060:	4640      	mov	r0, r8
    c062:	e7bb      	b.n	bfdc <qspi_nor_write+0xa4>
    c064:	000116cb 	.word	0x000116cb
    c068:	000109e4 	.word	0x000109e4
    c06c:	0bad0000 	.word	0x0bad0000

0000c070 <qspi_nor_read>:
{
    c070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c074:	4681      	mov	r9, r0
    c076:	460e      	mov	r6, r1
    c078:	461c      	mov	r4, r3
	if (!dest) {
    c07a:	4690      	mov	r8, r2
{
    c07c:	b08b      	sub	sp, #44	; 0x2c
	if (!dest) {
    c07e:	b1aa      	cbz	r2, c0ac <qspi_nor_read+0x3c>
	if (!size) {
    c080:	2b00      	cmp	r3, #0
    c082:	f000 809e 	beq.w	c1c2 <qspi_nor_read+0x152>
	if (addr < 0 ||
    c086:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
    c088:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
    c08a:	db03      	blt.n	c094 <qspi_nor_read+0x24>
    c08c:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
    c08e:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
    c090:	4293      	cmp	r3, r2
    c092:	d911      	bls.n	c0b8 <qspi_nor_read+0x48>
		LOG_ERR("read error: address or size "
    c094:	4b4c      	ldr	r3, [pc, #304]	; (c1c8 <qspi_nor_read+0x158>)
    c096:	2201      	movs	r2, #1
    c098:	9302      	str	r3, [sp, #8]
    c09a:	2300      	movs	r3, #0
    c09c:	e9cd 6403 	strd	r6, r4, [sp, #12]
    c0a0:	4618      	mov	r0, r3
    c0a2:	e9cd 3300 	strd	r3, r3, [sp]
    c0a6:	4949      	ldr	r1, [pc, #292]	; (c1cc <qspi_nor_read+0x15c>)
    c0a8:	f003 ff40 	bl	ff2c <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    c0ac:	f06f 0515 	mvn.w	r5, #21
}
    c0b0:	4628      	mov	r0, r5
    c0b2:	b00b      	add	sp, #44	; 0x2c
    c0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
    c0b8:	f7ff fd82 	bl	bbc0 <qspi_device_init>
	if (rc != 0) {
    c0bc:	4605      	mov	r5, r0
    c0be:	2800      	cmp	r0, #0
    c0c0:	d17b      	bne.n	c1ba <qspi_nor_read+0x14a>
	qspi_lock(dev);
    c0c2:	4275      	negs	r5, r6
    c0c4:	f005 0503 	and.w	r5, r5, #3
    c0c8:	f8d9 0010 	ldr.w	r0, [r9, #16]
    c0cc:	f7ff fcd2 	bl	ba74 <qspi_lock.isra.0>
	if (flash_prefix > size) {
    c0d0:	42a5      	cmp	r5, r4
    c0d2:	bf28      	it	cs
    c0d4:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
    c0d6:	f1d8 0300 	rsbs	r3, r8, #0
    c0da:	f003 0303 	and.w	r3, r3, #3
    c0de:	f008 0703 	and.w	r7, r8, #3
    c0e2:	bf58      	it	pl
    c0e4:	425f      	negpl	r7, r3
    c0e6:	427f      	negs	r7, r7
    c0e8:	f007 0703 	and.w	r7, r7, #3
    c0ec:	42a7      	cmp	r7, r4
    c0ee:	bf28      	it	cs
    c0f0:	4627      	movcs	r7, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
    c0f2:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
    c0f4:	1be4      	subs	r4, r4, r7
    c0f6:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
    c0fa:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
    c0fe:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
    c100:	bfc8      	it	gt
    c102:	46a2      	movgt	sl, r4
    c104:	f003 0b03 	and.w	fp, r3, #3
    c108:	bfc8      	it	gt
    c10a:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
    c10e:	f1ba 0f00 	cmp.w	sl, #0
    c112:	d019      	beq.n	c148 <qspi_nor_read+0xd8>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
    c114:	eb08 0307 	add.w	r3, r8, r7
    c118:	1972      	adds	r2, r6, r5
    c11a:	4651      	mov	r1, sl
    c11c:	4618      	mov	r0, r3
    c11e:	9307      	str	r3, [sp, #28]
    c120:	f004 f932 	bl	10388 <nrfx_qspi_read>
    c124:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    c126:	4601      	mov	r1, r0
    c128:	f8d9 0010 	ldr.w	r0, [r9, #16]
    c12c:	f7ff fcb6 	bl	ba9c <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    c130:	4a27      	ldr	r2, [pc, #156]	; (c1d0 <qspi_nor_read+0x160>)
    c132:	4294      	cmp	r4, r2
    c134:	d139      	bne.n	c1aa <qspi_nor_read+0x13a>
		if (flash_prefix != dest_prefix) {
    c136:	42bd      	cmp	r5, r7
    c138:	d006      	beq.n	c148 <qspi_nor_read+0xd8>
			memmove(dptr + flash_prefix, dptr + dest_prefix, flash_middle);
    c13a:	9b07      	ldr	r3, [sp, #28]
    c13c:	4652      	mov	r2, sl
    c13e:	4619      	mov	r1, r3
    c140:	eb08 0005 	add.w	r0, r8, r5
    c144:	f003 fe11 	bl	fd6a <memmove>
	if (flash_prefix != 0) {
    c148:	b1ad      	cbz	r5, c176 <qspi_nor_read+0x106>
				     (WORD_SIZE - flash_prefix));
    c14a:	f1c5 0704 	rsb	r7, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
    c14e:	2104      	movs	r1, #4
    c150:	1bf2      	subs	r2, r6, r7
    c152:	a808      	add	r0, sp, #32
    c154:	f004 f918 	bl	10388 <nrfx_qspi_read>
    c158:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    c15a:	4601      	mov	r1, r0
    c15c:	f8d9 0010 	ldr.w	r0, [r9, #16]
    c160:	f7ff fc9c 	bl	ba9c <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    c164:	4b1a      	ldr	r3, [pc, #104]	; (c1d0 <qspi_nor_read+0x160>)
    c166:	429c      	cmp	r4, r3
    c168:	d11f      	bne.n	c1aa <qspi_nor_read+0x13a>
		memcpy(dptr, buf + WORD_SIZE - flash_prefix, flash_prefix);
    c16a:	ab08      	add	r3, sp, #32
    c16c:	462a      	mov	r2, r5
    c16e:	4640      	mov	r0, r8
    c170:	19d9      	adds	r1, r3, r7
    c172:	f003 fe11 	bl	fd98 <memcpy>
	if (flash_suffix != 0) {
    c176:	f1bb 0f00 	cmp.w	fp, #0
    c17a:	d015      	beq.n	c1a8 <qspi_nor_read+0x138>
				     addr + flash_prefix + flash_middle);
    c17c:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
    c17e:	2108      	movs	r1, #8
    c180:	4452      	add	r2, sl
    c182:	a808      	add	r0, sp, #32
    c184:	f004 f900 	bl	10388 <nrfx_qspi_read>
    c188:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    c18a:	4601      	mov	r1, r0
    c18c:	f8d9 0010 	ldr.w	r0, [r9, #16]
    c190:	f7ff fc84 	bl	ba9c <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    c194:	4b0e      	ldr	r3, [pc, #56]	; (c1d0 <qspi_nor_read+0x160>)
    c196:	429c      	cmp	r4, r3
    c198:	d107      	bne.n	c1aa <qspi_nor_read+0x13a>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
    c19a:	eb0a 0005 	add.w	r0, sl, r5
    c19e:	465a      	mov	r2, fp
    c1a0:	a908      	add	r1, sp, #32
    c1a2:	4440      	add	r0, r8
    c1a4:	f003 fdf8 	bl	fd98 <memcpy>
	return res;
    c1a8:	4c09      	ldr	r4, [pc, #36]	; (c1d0 <qspi_nor_read+0x160>)
	qspi_unlock(dev);
    c1aa:	f8d9 0010 	ldr.w	r0, [r9, #16]
    c1ae:	f7ff fc83 	bl	bab8 <qspi_unlock.isra.0>
	rc = qspi_get_zephyr_ret_code(res);
    c1b2:	4620      	mov	r0, r4
    c1b4:	f7ff fc44 	bl	ba40 <qspi_get_zephyr_ret_code>
    c1b8:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
    c1ba:	4648      	mov	r0, r9
    c1bc:	f7ff fcd4 	bl	bb68 <qspi_device_uninit>
	return rc;
    c1c0:	e776      	b.n	c0b0 <qspi_nor_read+0x40>
		return 0;
    c1c2:	461d      	mov	r5, r3
    c1c4:	e774      	b.n	c0b0 <qspi_nor_read+0x40>
    c1c6:	bf00      	nop
    c1c8:	00011715 	.word	0x00011715
    c1cc:	000109e4 	.word	0x000109e4
    c1d0:	0bad0000 	.word	0x0bad0000

0000c1d4 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    c1d4:	4b02      	ldr	r3, [pc, #8]	; (c1e0 <flash_nrf_pages_layout+0xc>)
    c1d6:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    c1d8:	2301      	movs	r3, #1
    c1da:	6013      	str	r3, [r2, #0]
}
    c1dc:	4770      	bx	lr
    c1de:	bf00      	nop
    c1e0:	20008408 	.word	0x20008408

0000c1e4 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    c1e4:	4800      	ldr	r0, [pc, #0]	; (c1e8 <flash_nrf_get_parameters+0x4>)
    c1e6:	4770      	bx	lr
    c1e8:	00010bb8 	.word	0x00010bb8

0000c1ec <flash_nrf_read>:
{
    c1ec:	b570      	push	{r4, r5, r6, lr}
    c1ee:	460c      	mov	r4, r1
    c1f0:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
    c1f2:	4619      	mov	r1, r3
    c1f4:	4620      	mov	r0, r4
{
    c1f6:	461d      	mov	r5, r3
    c1f8:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
    c1fa:	f003 fedc 	bl	ffb6 <is_regular_addr_valid>
    c1fe:	4603      	mov	r3, r0
    c200:	b968      	cbnz	r0, c21e <flash_nrf_read+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    c202:	4a0f      	ldr	r2, [pc, #60]	; (c240 <flash_nrf_read+0x54>)
    c204:	9000      	str	r0, [sp, #0]
    c206:	e9cd 0201 	strd	r0, r2, [sp, #4]
    c20a:	e9cd 4503 	strd	r4, r5, [sp, #12]
    c20e:	2201      	movs	r2, #1
    c210:	490c      	ldr	r1, [pc, #48]	; (c244 <flash_nrf_read+0x58>)
    c212:	f003 fee1 	bl	ffd8 <z_log_msg_runtime_create.constprop.0>
    c216:	f06f 0015 	mvn.w	r0, #21
}
    c21a:	b006      	add	sp, #24
    c21c:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
    c21e:	b165      	cbz	r5, c23a <flash_nrf_read+0x4e>
	if (addr < PM_APP_ADDRESS) {
    c220:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
		return soc_secure_mem_read(data, (void *)addr, len);
    c224:	462a      	mov	r2, r5
    c226:	4621      	mov	r1, r4
    c228:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
    c22a:	da04      	bge.n	c236 <flash_nrf_read+0x4a>
}
    c22c:	b006      	add	sp, #24
    c22e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return soc_secure_mem_read(data, (void *)addr, len);
    c232:	f003 bb10 	b.w	f856 <soc_secure_mem_read>
	memcpy(data, (void *)addr, len);
    c236:	f003 fdaf 	bl	fd98 <memcpy>
		return 0;
    c23a:	2000      	movs	r0, #0
    c23c:	e7ed      	b.n	c21a <flash_nrf_read+0x2e>
    c23e:	bf00      	nop
    c240:	00011774 	.word	0x00011774
    c244:	0001098c 	.word	0x0001098c

0000c248 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    c248:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    c24a:	2201      	movs	r2, #1
    c24c:	4806      	ldr	r0, [pc, #24]	; (c268 <nrf_flash_init+0x20>)
    c24e:	4611      	mov	r1, r2
    c250:	f004 f8df 	bl	10412 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    c254:	f004 f88f 	bl	10376 <nrfx_nvmc_flash_page_count_get>
    c258:	4c04      	ldr	r4, [pc, #16]	; (c26c <nrf_flash_init+0x24>)
    c25a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    c25c:	f004 f888 	bl	10370 <nrfx_nvmc_flash_page_size_get>
    c260:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    c262:	2000      	movs	r0, #0
    c264:	bd10      	pop	{r4, pc}
    c266:	bf00      	nop
    c268:	20008410 	.word	0x20008410
    c26c:	20008408 	.word	0x20008408

0000c270 <flash_nrf_erase>:
{
    c270:	b5f0      	push	{r4, r5, r6, r7, lr}
    c272:	b087      	sub	sp, #28
    c274:	460e      	mov	r6, r1
    c276:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    c278:	f004 f87a 	bl	10370 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    c27c:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    c27e:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    c280:	4630      	mov	r0, r6
    c282:	f003 fe98 	bl	ffb6 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    c286:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
    c288:	4603      	mov	r3, r0
    c28a:	b388      	cbz	r0, c2f0 <flash_nrf_erase+0x80>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    c28c:	fbb6 f3f5 	udiv	r3, r6, r5
    c290:	fb05 6313 	mls	r3, r5, r3, r6
    c294:	b923      	cbnz	r3, c2a0 <flash_nrf_erase+0x30>
    c296:	fbb4 f3f5 	udiv	r3, r4, r5
    c29a:	fb05 4313 	mls	r3, r5, r3, r4
    c29e:	b173      	cbz	r3, c2be <flash_nrf_erase+0x4e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    c2a0:	4b18      	ldr	r3, [pc, #96]	; (c304 <flash_nrf_erase+0x94>)
    c2a2:	2201      	movs	r2, #1
    c2a4:	9302      	str	r3, [sp, #8]
    c2a6:	2300      	movs	r3, #0
    c2a8:	4618      	mov	r0, r3
    c2aa:	e9cd 6403 	strd	r6, r4, [sp, #12]
    c2ae:	e9cd 3300 	strd	r3, r3, [sp]
    c2b2:	4915      	ldr	r1, [pc, #84]	; (c308 <flash_nrf_erase+0x98>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    c2b4:	f003 fe90 	bl	ffd8 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
    c2b8:	f06f 0015 	mvn.w	r0, #21
    c2bc:	e002      	b.n	c2c4 <flash_nrf_erase+0x54>
		if (!n_pages) {
    c2be:	42a5      	cmp	r5, r4
    c2c0:	d902      	bls.n	c2c8 <flash_nrf_erase+0x58>
			return 0;
    c2c2:	2000      	movs	r0, #0
}
    c2c4:	b007      	add	sp, #28
    c2c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
    c2c8:	f04f 32ff 	mov.w	r2, #4294967295
    c2cc:	f04f 33ff 	mov.w	r3, #4294967295
    c2d0:	480e      	ldr	r0, [pc, #56]	; (c30c <flash_nrf_erase+0x9c>)
    c2d2:	f002 fc29 	bl	eb28 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    c2d6:	f004 f84b 	bl	10370 <nrfx_nvmc_flash_page_size_get>
    c2da:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    c2dc:	4638      	mov	r0, r7
    c2de:	f001 fe09 	bl	def4 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    c2e2:	1b64      	subs	r4, r4, r5
    c2e4:	442f      	add	r7, r5
    c2e6:	d1f9      	bne.n	c2dc <flash_nrf_erase+0x6c>
	z_impl_k_sem_give(sem);
    c2e8:	4808      	ldr	r0, [pc, #32]	; (c30c <flash_nrf_erase+0x9c>)
    c2ea:	f002 fbfd 	bl	eae8 <z_impl_k_sem_give>
}
    c2ee:	e7e8      	b.n	c2c2 <flash_nrf_erase+0x52>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    c2f0:	4a07      	ldr	r2, [pc, #28]	; (c310 <flash_nrf_erase+0xa0>)
    c2f2:	e9cd 6403 	strd	r6, r4, [sp, #12]
    c2f6:	e9cd 0201 	strd	r0, r2, [sp, #4]
    c2fa:	4903      	ldr	r1, [pc, #12]	; (c308 <flash_nrf_erase+0x98>)
    c2fc:	2201      	movs	r2, #1
    c2fe:	9000      	str	r0, [sp, #0]
    c300:	e7d8      	b.n	c2b4 <flash_nrf_erase+0x44>
    c302:	bf00      	nop
    c304:	00011791 	.word	0x00011791
    c308:	0001098c 	.word	0x0001098c
    c30c:	20008410 	.word	0x20008410
    c310:	00011774 	.word	0x00011774

0000c314 <flash_nrf_write>:
{
    c314:	b5f0      	push	{r4, r5, r6, r7, lr}
    c316:	460e      	mov	r6, r1
    c318:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
    c31a:	4619      	mov	r1, r3
    c31c:	4630      	mov	r0, r6
{
    c31e:	461c      	mov	r4, r3
    c320:	4617      	mov	r7, r2
	if (is_regular_addr_valid(addr, len)) {
    c322:	f003 fe48 	bl	ffb6 <is_regular_addr_valid>
    c326:	4603      	mov	r3, r0
    c328:	b968      	cbnz	r0, c346 <flash_nrf_write+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    c32a:	4a1d      	ldr	r2, [pc, #116]	; (c3a0 <flash_nrf_write+0x8c>)
    c32c:	e9cd 6403 	strd	r6, r4, [sp, #12]
    c330:	e9cd 0201 	strd	r0, r2, [sp, #4]
    c334:	2201      	movs	r2, #1
    c336:	491b      	ldr	r1, [pc, #108]	; (c3a4 <flash_nrf_write+0x90>)
    c338:	9000      	str	r0, [sp, #0]
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    c33a:	f003 fe4d 	bl	ffd8 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    c33e:	f06f 0015 	mvn.w	r0, #21
}
    c342:	b007      	add	sp, #28
    c344:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    c346:	ea46 0504 	orr.w	r5, r6, r4
    c34a:	f015 0503 	ands.w	r5, r5, #3
    c34e:	d00a      	beq.n	c366 <flash_nrf_write+0x52>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    c350:	4b15      	ldr	r3, [pc, #84]	; (c3a8 <flash_nrf_write+0x94>)
    c352:	2201      	movs	r2, #1
    c354:	9302      	str	r3, [sp, #8]
    c356:	2300      	movs	r3, #0
    c358:	e9cd 6403 	strd	r6, r4, [sp, #12]
    c35c:	4618      	mov	r0, r3
    c35e:	e9cd 3300 	strd	r3, r3, [sp]
    c362:	4910      	ldr	r1, [pc, #64]	; (c3a4 <flash_nrf_write+0x90>)
    c364:	e7e9      	b.n	c33a <flash_nrf_write+0x26>
	if (!len) {
    c366:	b1a4      	cbz	r4, c392 <flash_nrf_write+0x7e>
	return z_impl_k_sem_take(sem, timeout);
    c368:	f04f 32ff 	mov.w	r2, #4294967295
    c36c:	f04f 33ff 	mov.w	r3, #4294967295
    c370:	480e      	ldr	r0, [pc, #56]	; (c3ac <flash_nrf_write+0x98>)
    c372:	f002 fbd9 	bl	eb28 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
    c376:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    c37a:	42a5      	cmp	r5, r4
    c37c:	eb05 0006 	add.w	r0, r5, r6
    c380:	d109      	bne.n	c396 <flash_nrf_write+0x82>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    c382:	4a0b      	ldr	r2, [pc, #44]	; (c3b0 <flash_nrf_write+0x9c>)
    c384:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    c388:	07db      	lsls	r3, r3, #31
    c38a:	d5fb      	bpl.n	c384 <flash_nrf_write+0x70>
	z_impl_k_sem_give(sem);
    c38c:	4807      	ldr	r0, [pc, #28]	; (c3ac <flash_nrf_write+0x98>)
    c38e:	f002 fbab 	bl	eae8 <z_impl_k_sem_give>
	return ret;
    c392:	2000      	movs	r0, #0
    c394:	e7d5      	b.n	c342 <flash_nrf_write+0x2e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
    c396:	5979      	ldr	r1, [r7, r5]
    c398:	f001 fdc8 	bl	df2c <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    c39c:	3504      	adds	r5, #4
}
    c39e:	e7ec      	b.n	c37a <flash_nrf_write+0x66>
    c3a0:	00011774 	.word	0x00011774
    c3a4:	0001098c 	.word	0x0001098c
    c3a8:	000117b0 	.word	0x000117b0
    c3ac:	20008410 	.word	0x20008410
    c3b0:	40039000 	.word	0x40039000

0000c3b4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    c3b4:	b530      	push	{r4, r5, lr}
	return port->config;
    c3b6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    c3b8:	f001 041f 	and.w	r4, r1, #31
    c3bc:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    c3be:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    c3c2:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    c3c4:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    c3c8:	d105      	bne.n	c3d6 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    c3ca:	4620      	mov	r0, r4
    c3cc:	f001 fbf6 	bl	dbbc <nrfx_gpiote_trigger_disable>

		return 0;
    c3d0:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    c3d2:	b005      	add	sp, #20
    c3d4:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    c3d6:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    c3d8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    c3dc:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    c3e0:	d114      	bne.n	c40c <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    c3e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    c3e6:	bf0c      	ite	eq
    c3e8:	2304      	moveq	r3, #4
    c3ea:	2305      	movne	r3, #5
    c3ec:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    c3f0:	2300      	movs	r3, #0
    c3f2:	4620      	mov	r0, r4
    c3f4:	4619      	mov	r1, r3
    c3f6:	aa02      	add	r2, sp, #8
    c3f8:	f001 fa1e 	bl	d838 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    c3fc:	4b1f      	ldr	r3, [pc, #124]	; (c47c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    c3fe:	4298      	cmp	r0, r3
    c400:	d138      	bne.n	c474 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    c402:	2101      	movs	r1, #1
    c404:	4620      	mov	r0, r4
    c406:	f001 fb93 	bl	db30 <nrfx_gpiote_trigger_enable>
	return 0;
    c40a:	e7e1      	b.n	c3d0 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    c40c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    c410:	d025      	beq.n	c45e <gpio_nrfx_pin_interrupt_configure+0xaa>
    c412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    c416:	bf14      	ite	ne
    c418:	2301      	movne	r3, #1
    c41a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    c41c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    c420:	6883      	ldr	r3, [r0, #8]
    c422:	40cb      	lsrs	r3, r1
    c424:	07d9      	lsls	r1, r3, #31
    c426:	d4e3      	bmi.n	c3f0 <gpio_nrfx_pin_interrupt_configure+0x3c>
    c428:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    c42c:	d1e0      	bne.n	c3f0 <gpio_nrfx_pin_interrupt_configure+0x3c>
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
    c42e:	4a14      	ldr	r2, [pc, #80]	; (c480 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    c430:	4814      	ldr	r0, [pc, #80]	; (c484 <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    c432:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
    c434:	2901      	cmp	r1, #1
    c436:	bf08      	it	eq
    c438:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
    c43a:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    c43e:	3380      	adds	r3, #128	; 0x80
    c440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    c444:	07db      	lsls	r3, r3, #31
    c446:	d4d3      	bmi.n	c3f0 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    c448:	f10d 0507 	add.w	r5, sp, #7
    c44c:	4629      	mov	r1, r5
    c44e:	4620      	mov	r0, r4
    c450:	f001 fb1a 	bl	da88 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    c454:	4b0c      	ldr	r3, [pc, #48]	; (c488 <gpio_nrfx_pin_interrupt_configure+0xd4>)
    c456:	4298      	cmp	r0, r3
    c458:	d003      	beq.n	c462 <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
    c45a:	9503      	str	r5, [sp, #12]
    c45c:	e7c8      	b.n	c3f0 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    c45e:	2303      	movs	r3, #3
    c460:	e7dc      	b.n	c41c <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    c462:	4628      	mov	r0, r5
    c464:	f001 fb5e 	bl	db24 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    c468:	4b04      	ldr	r3, [pc, #16]	; (c47c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    c46a:	4298      	cmp	r0, r3
    c46c:	d0f5      	beq.n	c45a <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
    c46e:	f06f 000b 	mvn.w	r0, #11
    c472:	e7ae      	b.n	c3d2 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    c474:	f06f 0015 	mvn.w	r0, #21
    c478:	e7ab      	b.n	c3d2 <gpio_nrfx_pin_interrupt_configure+0x1e>
    c47a:	bf00      	nop
    c47c:	0bad0000 	.word	0x0bad0000
    c480:	40842500 	.word	0x40842500
    c484:	40842800 	.word	0x40842800
    c488:	0bad0004 	.word	0x0bad0004

0000c48c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    c48c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    c48e:	f001 fb39 	bl	db04 <nrfx_gpiote_is_init>
    c492:	4604      	mov	r4, r0
    c494:	b968      	cbnz	r0, c4b2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    c496:	f001 fb0d 	bl	dab4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    c49a:	4b08      	ldr	r3, [pc, #32]	; (c4bc <gpio_nrfx_init+0x30>)
    c49c:	4298      	cmp	r0, r3
    c49e:	d10a      	bne.n	c4b6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    c4a0:	4621      	mov	r1, r4
    c4a2:	4807      	ldr	r0, [pc, #28]	; (c4c0 <gpio_nrfx_init+0x34>)
    c4a4:	f001 faea 	bl	da7c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    c4a8:	4622      	mov	r2, r4
    c4aa:	2105      	movs	r1, #5
    c4ac:	202f      	movs	r0, #47	; 0x2f
    c4ae:	f7fe fafb 	bl	aaa8 <z_arm_irq_priority_set>
		return 0;
    c4b2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    c4b4:	bd10      	pop	{r4, pc}
		return -EIO;
    c4b6:	f06f 0004 	mvn.w	r0, #4
    c4ba:	e7fb      	b.n	c4b4 <gpio_nrfx_init+0x28>
    c4bc:	0bad0000 	.word	0x0bad0000
    c4c0:	0000c4c5 	.word	0x0000c4c5

0000c4c4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    c4c4:	0942      	lsrs	r2, r0, #5
{
    c4c6:	4603      	mov	r3, r0
    c4c8:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    c4ca:	d002      	beq.n	c4d2 <nrfx_gpio_handler+0xe>
    c4cc:	2a01      	cmp	r2, #1
    c4ce:	d017      	beq.n	c500 <nrfx_gpio_handler+0x3c>
}
    c4d0:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    c4d2:	4e0d      	ldr	r6, [pc, #52]	; (c508 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    c4d4:	6932      	ldr	r2, [r6, #16]
    c4d6:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    c4d8:	2900      	cmp	r1, #0
    c4da:	d0f9      	beq.n	c4d0 <nrfx_gpio_handler+0xc>
    c4dc:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
    c4de:	f003 031f 	and.w	r3, r3, #31
    c4e2:	680c      	ldr	r4, [r1, #0]
    c4e4:	409d      	lsls	r5, r3
    c4e6:	2900      	cmp	r1, #0
    c4e8:	d0f2      	beq.n	c4d0 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    c4ea:	688a      	ldr	r2, [r1, #8]
    c4ec:	402a      	ands	r2, r5
    c4ee:	d002      	beq.n	c4f6 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    c4f0:	4630      	mov	r0, r6
    c4f2:	684b      	ldr	r3, [r1, #4]
    c4f4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    c4f6:	b12c      	cbz	r4, c504 <nrfx_gpio_handler+0x40>
    c4f8:	6823      	ldr	r3, [r4, #0]
    c4fa:	4621      	mov	r1, r4
    c4fc:	461c      	mov	r4, r3
    c4fe:	e7f2      	b.n	c4e6 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    c500:	4e02      	ldr	r6, [pc, #8]	; (c50c <nrfx_gpio_handler+0x48>)
    c502:	e7e7      	b.n	c4d4 <nrfx_gpio_handler+0x10>
    c504:	4623      	mov	r3, r4
    c506:	e7f8      	b.n	c4fa <nrfx_gpio_handler+0x36>
    c508:	00010674 	.word	0x00010674
    c50c:	0001065c 	.word	0x0001065c

0000c510 <gpio_nrfx_pin_configure>:
{
    c510:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    c514:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    c516:	f001 051f 	and.w	r5, r1, #31
    c51a:	7b3b      	ldrb	r3, [r7, #12]
{
    c51c:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    c51e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    c522:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    c524:	4628      	mov	r0, r5
    c526:	f10d 0103 	add.w	r1, sp, #3
    c52a:	f001 faad 	bl	da88 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    c52e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    c532:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    c534:	d10b      	bne.n	c54e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    c536:	4628      	mov	r0, r5
    c538:	f001 fb68 	bl	dc0c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    c53c:	4b3c      	ldr	r3, [pc, #240]	; (c630 <gpio_nrfx_pin_configure+0x120>)
    c53e:	4598      	cmp	r8, r3
    c540:	d103      	bne.n	c54a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    c542:	f89d 0003 	ldrb.w	r0, [sp, #3]
    c546:	f001 fae7 	bl	db18 <nrfx_gpiote_channel_free>
		return 0;
    c54a:	2000      	movs	r0, #0
    c54c:	e00c      	b.n	c568 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    c54e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    c550:	4628      	mov	r0, r5
    c552:	4619      	mov	r1, r3
    c554:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    c556:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    c55a:	f001 f96d 	bl	d838 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    c55e:	4b34      	ldr	r3, [pc, #208]	; (c630 <gpio_nrfx_pin_configure+0x120>)
    c560:	4298      	cmp	r0, r3
    c562:	d004      	beq.n	c56e <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    c564:	f06f 0015 	mvn.w	r0, #21
}
    c568:	b004      	add	sp, #16
    c56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    c56e:	4580      	cmp	r8, r0
    c570:	d103      	bne.n	c57a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    c572:	f89d 0003 	ldrb.w	r0, [sp, #3]
    c576:	f001 facf 	bl	db18 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    c57a:	03a3      	lsls	r3, r4, #14
    c57c:	d549      	bpl.n	c612 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    c57e:	f240 3306 	movw	r3, #774	; 0x306
    c582:	4023      	ands	r3, r4
    c584:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    c588:	d019      	beq.n	c5be <gpio_nrfx_pin_configure+0xae>
    c58a:	d80c      	bhi.n	c5a6 <gpio_nrfx_pin_configure+0x96>
    c58c:	2b06      	cmp	r3, #6
    c58e:	d017      	beq.n	c5c0 <gpio_nrfx_pin_configure+0xb0>
    c590:	d804      	bhi.n	c59c <gpio_nrfx_pin_configure+0x8c>
    c592:	b1ab      	cbz	r3, c5c0 <gpio_nrfx_pin_configure+0xb0>
    c594:	2b02      	cmp	r3, #2
    c596:	d1e5      	bne.n	c564 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    c598:	2304      	movs	r3, #4
    c59a:	e011      	b.n	c5c0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    c59c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c5a0:	d1e0      	bne.n	c564 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    c5a2:	2301      	movs	r3, #1
    c5a4:	e00c      	b.n	c5c0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    c5a6:	f240 2202 	movw	r2, #514	; 0x202
    c5aa:	4293      	cmp	r3, r2
    c5ac:	d026      	beq.n	c5fc <gpio_nrfx_pin_configure+0xec>
    c5ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    c5b2:	d025      	beq.n	c600 <gpio_nrfx_pin_configure+0xf0>
    c5b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c5b8:	d1d4      	bne.n	c564 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    c5ba:	2302      	movs	r3, #2
    c5bc:	e000      	b.n	c5c0 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    c5be:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    c5c0:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    c5c4:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    c5c8:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    c5cc:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    c5ce:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    c5d2:	bf4c      	ite	mi
    c5d4:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    c5d6:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    c5da:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    c5dc:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    c5e0:	d510      	bpl.n	c604 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    c5e2:	2301      	movs	r3, #1
    c5e4:	687a      	ldr	r2, [r7, #4]
    c5e6:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    c5e8:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    c5ea:	2200      	movs	r2, #0
    c5ec:	4628      	mov	r0, r5
    c5ee:	a901      	add	r1, sp, #4
    c5f0:	f001 f9d0 	bl	d994 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    c5f4:	4b0e      	ldr	r3, [pc, #56]	; (c630 <gpio_nrfx_pin_configure+0x120>)
    c5f6:	4298      	cmp	r0, r3
    c5f8:	d0a7      	beq.n	c54a <gpio_nrfx_pin_configure+0x3a>
    c5fa:	e7b3      	b.n	c564 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    c5fc:	2305      	movs	r3, #5
    c5fe:	e7df      	b.n	c5c0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    c600:	2303      	movs	r3, #3
    c602:	e7dd      	b.n	c5c0 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    c604:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    c606:	bf41      	itttt	mi
    c608:	2301      	movmi	r3, #1
    c60a:	687a      	ldrmi	r2, [r7, #4]
    c60c:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    c60e:	60d3      	strmi	r3, [r2, #12]
}
    c610:	e7eb      	b.n	c5ea <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    c612:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    c614:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    c618:	bf4c      	ite	mi
    c61a:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    c61c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    c620:	461a      	mov	r2, r3
    c622:	4628      	mov	r0, r5
    c624:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    c626:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    c62a:	f001 f905 	bl	d838 <nrfx_gpiote_input_configure>
    c62e:	e7e1      	b.n	c5f4 <gpio_nrfx_pin_configure+0xe4>
    c630:	0bad0000 	.word	0x0bad0000

0000c634 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
    c634:	b510      	push	{r4, lr}
    c636:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
    c638:	6902      	ldr	r2, [r0, #16]
{
    c63a:	b0a6      	sub	sp, #152	; 0x98

	data->dev = dev;
    c63c:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
    c640:	4924      	ldr	r1, [pc, #144]	; (c6d4 <mbox_nrf_init+0xa0>)
    c642:	2000      	movs	r0, #0
    c644:	f001 fbe2 	bl	de0c <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    c648:	2200      	movs	r2, #0
    c64a:	2101      	movs	r1, #1
    c64c:	202a      	movs	r0, #42	; 0x2a
    c64e:	f7fe fa2b 	bl	aaa8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
    c652:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
    c654:	2284      	movs	r2, #132	; 0x84
    c656:	2100      	movs	r1, #0
    c658:	a805      	add	r0, sp, #20
    c65a:	f003 fba8 	bl	fdae <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
    c65e:	6863      	ldr	r3, [r4, #4]
    c660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c664:	d309      	bcc.n	c67a <mbox_nrf_init+0x46>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
    c666:	4b1c      	ldr	r3, [pc, #112]	; (c6d8 <mbox_nrf_init+0xa4>)
    c668:	2202      	movs	r2, #2
    c66a:	9302      	str	r3, [sp, #8]
    c66c:	2300      	movs	r3, #0
    c66e:	491b      	ldr	r1, [pc, #108]	; (c6dc <mbox_nrf_init+0xa8>)
    c670:	4618      	mov	r0, r3
    c672:	e9cd 3300 	strd	r3, r3, [sp]
    c676:	f003 fd53 	bl	10120 <z_log_msg_runtime_create.constprop.0>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
    c67a:	6823      	ldr	r3, [r4, #0]
    c67c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c680:	d309      	bcc.n	c696 <mbox_nrf_init+0x62>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
    c682:	4b17      	ldr	r3, [pc, #92]	; (c6e0 <mbox_nrf_init+0xac>)
    c684:	2202      	movs	r2, #2
    c686:	9302      	str	r3, [sp, #8]
    c688:	2300      	movs	r3, #0
    c68a:	4914      	ldr	r1, [pc, #80]	; (c6dc <mbox_nrf_init+0xa8>)
    c68c:	4618      	mov	r0, r3
    c68e:	e9cd 3300 	strd	r3, r3, [sp]
    c692:	f003 fd45 	bl	10120 <z_log_msg_runtime_create.constprop.0>
	ch_config.receive_events_enabled = 0;
    c696:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
    c698:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
    c69a:	9325      	str	r3, [sp, #148]	; 0x94
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    c69c:	aa05      	add	r2, sp, #20
		if (conf->tx_mask & BIT(ch)) {
    c69e:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    c6a0:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
    c6a2:	40d9      	lsrs	r1, r3
    c6a4:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
    c6a6:	bf44      	itt	mi
    c6a8:	fa00 f103 	lslmi.w	r1, r0, r3
    c6ac:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
    c6b0:	6821      	ldr	r1, [r4, #0]
    c6b2:	40d9      	lsrs	r1, r3
    c6b4:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
    c6b6:	bf48      	it	mi
    c6b8:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    c6bc:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
    c6c0:	bf48      	it	mi
    c6c2:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    c6c4:	2b10      	cmp	r3, #16
    c6c6:	d1ea      	bne.n	c69e <mbox_nrf_init+0x6a>
	nrfx_ipc_config_load(&ch_config);
    c6c8:	a805      	add	r0, sp, #20
    c6ca:	f001 fbb7 	bl	de3c <nrfx_ipc_config_load>

	return 0;
}
    c6ce:	2000      	movs	r0, #0
    c6d0:	b026      	add	sp, #152	; 0x98
    c6d2:	bd10      	pop	{r4, pc}
    c6d4:	0000c735 	.word	0x0000c735
    c6d8:	00011807 	.word	0x00011807
    c6dc:	000109bc 	.word	0x000109bc
    c6e0:	00011833 	.word	0x00011833

0000c6e4 <mbox_nrf_send>:
{
    c6e4:	b530      	push	{r4, r5, lr}
    c6e6:	4605      	mov	r5, r0
    c6e8:	460c      	mov	r4, r1
    c6ea:	b085      	sub	sp, #20
	if (msg) {
    c6ec:	b14a      	cbz	r2, c702 <mbox_nrf_send+0x1e>
		LOG_WRN("Sending data not supported");
    c6ee:	4b0f      	ldr	r3, [pc, #60]	; (c72c <mbox_nrf_send+0x48>)
    c6f0:	2202      	movs	r2, #2
    c6f2:	9302      	str	r3, [sp, #8]
    c6f4:	2300      	movs	r3, #0
    c6f6:	490e      	ldr	r1, [pc, #56]	; (c730 <mbox_nrf_send+0x4c>)
    c6f8:	4618      	mov	r0, r3
    c6fa:	e9cd 3300 	strd	r3, r3, [sp]
    c6fe:	f003 fd0f 	bl	10120 <z_log_msg_runtime_create.constprop.0>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
    c702:	2c0f      	cmp	r4, #15
    c704:	d80f      	bhi.n	c726 <mbox_nrf_send+0x42>
    c706:	686b      	ldr	r3, [r5, #4]
    c708:	685b      	ldr	r3, [r3, #4]
    c70a:	40e3      	lsrs	r3, r4
    c70c:	07db      	lsls	r3, r3, #31
    c70e:	d50a      	bpl.n	c726 <mbox_nrf_send+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c710:	2301      	movs	r3, #1
	return 0;
    c712:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    c714:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c716:	b2e4      	uxtb	r4, r4
    c718:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    c71c:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
    c720:	6023      	str	r3, [r4, #0]
}
    c722:	b005      	add	sp, #20
    c724:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    c726:	f06f 0015 	mvn.w	r0, #21
    c72a:	e7fa      	b.n	c722 <mbox_nrf_send+0x3e>
    c72c:	0001185f 	.word	0x0001185f
    c730:	000109bc 	.word	0x000109bc

0000c734 <mbox_dispatcher>:
{
    c734:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct device *dev = data->dev;
    c736:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    c73a:	280f      	cmp	r0, #15
{
    c73c:	4604      	mov	r4, r0
    c73e:	460d      	mov	r5, r1
    c740:	6873      	ldr	r3, [r6, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    c742:	d803      	bhi.n	c74c <mbox_dispatcher+0x18>
    c744:	681b      	ldr	r3, [r3, #0]
    c746:	40c3      	lsrs	r3, r0
    c748:	07db      	lsls	r3, r3, #31
    c74a:	d409      	bmi.n	c760 <mbox_dispatcher+0x2c>
		LOG_WRN("RX event on illegal channel");
    c74c:	4b14      	ldr	r3, [pc, #80]	; (c7a0 <mbox_dispatcher+0x6c>)
    c74e:	2202      	movs	r2, #2
    c750:	9302      	str	r3, [sp, #8]
    c752:	2300      	movs	r3, #0
    c754:	4913      	ldr	r1, [pc, #76]	; (c7a4 <mbox_dispatcher+0x70>)
    c756:	4618      	mov	r0, r3
    c758:	e9cd 3300 	strd	r3, r3, [sp]
    c75c:	f003 fce0 	bl	10120 <z_log_msg_runtime_create.constprop.0>
	if (!(data->enabled_mask & BIT(channel))) {
    c760:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    c764:	40e3      	lsrs	r3, r4
    c766:	f013 0301 	ands.w	r3, r3, #1
    c76a:	d108      	bne.n	c77e <mbox_dispatcher+0x4a>
		LOG_WRN("RX event on disabled channel");
    c76c:	4a0e      	ldr	r2, [pc, #56]	; (c7a8 <mbox_dispatcher+0x74>)
    c76e:	4618      	mov	r0, r3
    c770:	e9cd 3201 	strd	r3, r2, [sp, #4]
    c774:	490b      	ldr	r1, [pc, #44]	; (c7a4 <mbox_dispatcher+0x70>)
    c776:	2202      	movs	r2, #2
    c778:	9300      	str	r3, [sp, #0]
    c77a:	f003 fcd1 	bl	10120 <z_log_msg_runtime_create.constprop.0>
	if (data->cb[channel] != NULL) {
    c77e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    c782:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
    c786:	b145      	cbz	r5, c79a <mbox_dispatcher+0x66>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
    c788:	2300      	movs	r3, #0
    c78a:	4621      	mov	r1, r4
    c78c:	4630      	mov	r0, r6
    c78e:	46ac      	mov	ip, r5
    c790:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
    c792:	b004      	add	sp, #16
    c794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
    c798:	4760      	bx	ip
}
    c79a:	b004      	add	sp, #16
    c79c:	bd70      	pop	{r4, r5, r6, pc}
    c79e:	bf00      	nop
    c7a0:	0001187a 	.word	0x0001187a
    c7a4:	000109bc 	.word	0x000109bc
    c7a8:	00011896 	.word	0x00011896

0000c7ac <mbox_nrf_set_enabled>:
{
    c7ac:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    c7ae:	290f      	cmp	r1, #15
{
    c7b0:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
    c7b2:	6905      	ldr	r5, [r0, #16]
{
    c7b4:	b085      	sub	sp, #20
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    c7b6:	d841      	bhi.n	c83c <mbox_nrf_set_enabled+0x90>
    c7b8:	6843      	ldr	r3, [r0, #4]
    c7ba:	681b      	ldr	r3, [r3, #0]
    c7bc:	40cb      	lsrs	r3, r1
    c7be:	07db      	lsls	r3, r3, #31
    c7c0:	d53c      	bpl.n	c83c <mbox_nrf_set_enabled+0x90>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
    c7c2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    c7c6:	40cb      	lsrs	r3, r1
    c7c8:	f003 0301 	and.w	r3, r3, #1
    c7cc:	b91a      	cbnz	r2, c7d6 <mbox_nrf_set_enabled+0x2a>
    c7ce:	bb0b      	cbnz	r3, c814 <mbox_nrf_set_enabled+0x68>
		return -EALREADY;
    c7d0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c7d4:	e030      	b.n	c838 <mbox_nrf_set_enabled+0x8c>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
    c7d6:	2b00      	cmp	r3, #0
    c7d8:	d1fa      	bne.n	c7d0 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
    c7da:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
    c7de:	b943      	cbnz	r3, c7f2 <mbox_nrf_set_enabled+0x46>
		LOG_WRN("Enabling channel without a registered callback\n");
    c7e0:	4a18      	ldr	r2, [pc, #96]	; (c844 <mbox_nrf_set_enabled+0x98>)
    c7e2:	4618      	mov	r0, r3
    c7e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
    c7e8:	4917      	ldr	r1, [pc, #92]	; (c848 <mbox_nrf_set_enabled+0x9c>)
    c7ea:	2202      	movs	r2, #2
    c7ec:	9300      	str	r3, [sp, #0]
    c7ee:	f003 fc97 	bl	10120 <z_log_msg_runtime_create.constprop.0>
	if (enable && data->enabled_mask == 0) {
    c7f2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    c7f6:	b913      	cbnz	r3, c7fe <mbox_nrf_set_enabled+0x52>
		irq_enable(DT_INST_IRQN(0));
    c7f8:	202a      	movs	r0, #42	; 0x2a
    c7fa:	f7fe f925 	bl	aa48 <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
    c7fe:	2201      	movs	r2, #1
    c800:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    c804:	40a2      	lsls	r2, r4
    c806:	4313      	orrs	r3, r2
    c808:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
    c80c:	b2e0      	uxtb	r0, r4
    c80e:	f001 fb35 	bl	de7c <nrfx_ipc_receive_event_enable>
    c812:	e00a      	b.n	c82a <mbox_nrf_set_enabled+0x7e>
		nrfx_ipc_receive_event_disable(channel);
    c814:	b2c8      	uxtb	r0, r1
    c816:	f001 fb39 	bl	de8c <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
    c81a:	2201      	movs	r2, #1
    c81c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    c820:	40a2      	lsls	r2, r4
    c822:	ea23 0302 	bic.w	r3, r3, r2
    c826:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
    c82a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    c82e:	b913      	cbnz	r3, c836 <mbox_nrf_set_enabled+0x8a>
		irq_disable(DT_INST_IRQN(0));
    c830:	202a      	movs	r0, #42	; 0x2a
    c832:	f7fe f917 	bl	aa64 <arch_irq_disable>
	return 0;
    c836:	2000      	movs	r0, #0
}
    c838:	b005      	add	sp, #20
    c83a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    c83c:	f06f 0015 	mvn.w	r0, #21
    c840:	e7fa      	b.n	c838 <mbox_nrf_set_enabled+0x8c>
    c842:	bf00      	nop
    c844:	000118b3 	.word	0x000118b3
    c848:	000109bc 	.word	0x000109bc

0000c84c <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    c84c:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    c850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
    c854:	4e5b      	ldr	r6, [pc, #364]	; (c9c4 <pinctrl_configure_pins+0x178>)
    c856:	4f5c      	ldr	r7, [pc, #368]	; (c9c8 <pinctrl_configure_pins+0x17c>)
    c858:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    c85c:	4281      	cmp	r1, r0
    c85e:	d102      	bne.n	c866 <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    c860:	2000      	movs	r0, #0
}
    c862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    c866:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    c868:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    c86c:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    c870:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    c872:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    c876:	bf08      	it	eq
    c878:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    c87c:	2c22      	cmp	r4, #34	; 0x22
    c87e:	f200 809d 	bhi.w	c9bc <pinctrl_configure_pins+0x170>
    c882:	e8df f004 	tbb	[pc, r4]
    c886:	2312      	.short	0x2312
    c888:	3e2b4228 	.word	0x3e2b4228
    c88c:	9b9b9b42 	.word	0x9b9b9b42
    c890:	9b72459b 	.word	0x9b72459b
    c894:	9b9b9b9b 	.word	0x9b9b9b9b
    c898:	9b9b9b9b 	.word	0x9b9b9b9b
    c89c:	83807d75 	.word	0x83807d75
    c8a0:	869b9b9b 	.word	0x869b9b9b
    c8a4:	95928f8c 	.word	0x95928f8c
    c8a8:	98          	.byte	0x98
    c8a9:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    c8aa:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    c8ae:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
    c8b2:	f1b8 0f01 	cmp.w	r8, #1
    c8b6:	bf14      	ite	ne
    c8b8:	46b6      	movne	lr, r6
    c8ba:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
    c8bc:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    c8c0:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
    c8c4:	f8ce 4008 	str.w	r4, [lr, #8]
    c8c8:	2401      	movs	r4, #1
    c8ca:	e002      	b.n	c8d2 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = pin;
    c8cc:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    c8d0:	2400      	movs	r4, #0
    c8d2:	46a6      	mov	lr, r4
    c8d4:	e023      	b.n	c91e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    c8d6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    c8da:	e7e8      	b.n	c8ae <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    c8dc:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    c8de:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
    c8e2:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
    c8e6:	f1b9 0f01 	cmp.w	r9, #1
    c8ea:	bf14      	ite	ne
    c8ec:	46b0      	movne	r8, r6
    c8ee:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
    c8f0:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    c8f4:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
    c8f8:	f8c8 e00c 	str.w	lr, [r8, #12]
    c8fc:	f04f 0e01 	mov.w	lr, #1
    c900:	e00d      	b.n	c91e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    c902:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    c906:	2401      	movs	r4, #1
    c908:	e7eb      	b.n	c8e2 <pinctrl_configure_pins+0x96>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    c90a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    c90e:	e7df      	b.n	c8d0 <pinctrl_configure_pins+0x84>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    c910:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    c914:	2d00      	cmp	r5, #0
    c916:	d1db      	bne.n	c8d0 <pinctrl_configure_pins+0x84>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    c918:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
    c91a:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    c91c:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    c91e:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
    c922:	f003 091f 	and.w	r9, r3, #31
    c926:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    c92a:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
    c92e:	ea4f 1353 	mov.w	r3, r3, lsr #5
    c932:	bf1c      	itt	ne
    c934:	2401      	movne	r4, #1
    c936:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
    c93a:	2b01      	cmp	r3, #1
    c93c:	bf0c      	ite	eq
    c93e:	46b8      	moveq	r8, r7
    c940:	46b0      	movne	r8, r6
    c942:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    c946:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    c94a:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
    c94e:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    c952:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    c954:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
    c958:	ea43 030e 	orr.w	r3, r3, lr
    c95c:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    c960:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
    c964:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    c968:	e778      	b.n	c85c <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    c96a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    c96e:	e7d1      	b.n	c914 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    c970:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    c974:	6804      	ldr	r4, [r0, #0]
    c976:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    c97a:	2c00      	cmp	r4, #0
    c97c:	d0c3      	beq.n	c906 <pinctrl_configure_pins+0xba>
    c97e:	e796      	b.n	c8ae <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    c980:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    c984:	e7f6      	b.n	c974 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    c986:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    c98a:	e7f3      	b.n	c974 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    c98c:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    c990:	e7f0      	b.n	c974 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    c992:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    c996:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    c998:	f04f 0e00 	mov.w	lr, #0
    c99c:	e7bf      	b.n	c91e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    c99e:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    c9a2:	e784      	b.n	c8ae <pinctrl_configure_pins+0x62>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    c9a4:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    c9a8:	e7f5      	b.n	c996 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    c9aa:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    c9ae:	e7f2      	b.n	c996 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    c9b0:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    c9b4:	e7ef      	b.n	c996 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    c9b6:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    c9ba:	e7ec      	b.n	c996 <pinctrl_configure_pins+0x14a>
		switch (NRF_GET_FUN(pins[i])) {
    c9bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    c9c0:	e74f      	b.n	c862 <pinctrl_configure_pins+0x16>
    c9c2:	bf00      	nop
    c9c4:	40842500 	.word	0x40842500
    c9c8:	40842800 	.word	0x40842800

0000c9cc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    c9cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    c9ce:	ab0b      	add	r3, sp, #44	; 0x2c
    c9d0:	9305      	str	r3, [sp, #20]
    c9d2:	9303      	str	r3, [sp, #12]
    c9d4:	4b05      	ldr	r3, [pc, #20]	; (c9ec <z_log_msg_runtime_create.constprop.0+0x20>)
    c9d6:	2201      	movs	r2, #1
    c9d8:	9302      	str	r3, [sp, #8]
    c9da:	2300      	movs	r3, #0
    c9dc:	4618      	mov	r0, r3
    c9de:	e9cd 3300 	strd	r3, r3, [sp]
    c9e2:	f7fd fc4f 	bl	a284 <z_impl_z_log_msg_runtime_vcreate>
}
    c9e6:	b007      	add	sp, #28
    c9e8:	f85d fb04 	ldr.w	pc, [sp], #4
    c9ec:	000118fc 	.word	0x000118fc

0000c9f0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    c9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    c9f2:	794b      	ldrb	r3, [r1, #5]
    c9f4:	2b01      	cmp	r3, #1
    c9f6:	d029      	beq.n	ca4c <uarte_nrfx_configure+0x5c>
    c9f8:	2b03      	cmp	r3, #3
    c9fa:	d124      	bne.n	ca46 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    c9fc:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    c9fe:	798b      	ldrb	r3, [r1, #6]
    ca00:	2b03      	cmp	r3, #3
    ca02:	d120      	bne.n	ca46 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    ca04:	79ce      	ldrb	r6, [r1, #7]
    ca06:	b10e      	cbz	r6, ca0c <uarte_nrfx_configure+0x1c>
    ca08:	2e01      	cmp	r6, #1
    ca0a:	d11c      	bne.n	ca46 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    ca0c:	790a      	ldrb	r2, [r1, #4]
    ca0e:	2a01      	cmp	r2, #1
    ca10:	d01e      	beq.n	ca50 <uarte_nrfx_configure+0x60>
    ca12:	2a02      	cmp	r2, #2
    ca14:	d020      	beq.n	ca58 <uarte_nrfx_configure+0x68>
    ca16:	b9b2      	cbnz	r2, ca46 <uarte_nrfx_configure+0x56>
    ca18:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    ca1a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    ca1c:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    ca1e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    ca22:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
    ca26:	d06e      	beq.n	cb06 <uarte_nrfx_configure+0x116>
    ca28:	d833      	bhi.n	ca92 <uarte_nrfx_configure+0xa2>
    ca2a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    ca2e:	d06d      	beq.n	cb0c <uarte_nrfx_configure+0x11c>
    ca30:	d81c      	bhi.n	ca6c <uarte_nrfx_configure+0x7c>
    ca32:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    ca36:	d06b      	beq.n	cb10 <uarte_nrfx_configure+0x120>
    ca38:	d810      	bhi.n	ca5c <uarte_nrfx_configure+0x6c>
    ca3a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    ca3e:	d06a      	beq.n	cb16 <uarte_nrfx_configure+0x126>
    ca40:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    ca44:	d06a      	beq.n	cb1c <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
    ca46:	f06f 0085 	mvn.w	r0, #133	; 0x85
    ca4a:	e05b      	b.n	cb04 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
    ca4c:	2700      	movs	r7, #0
    ca4e:	e7d6      	b.n	c9fe <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    ca50:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    ca54:	220e      	movs	r2, #14
    ca56:	e7e0      	b.n	ca1a <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    ca58:	2400      	movs	r4, #0
    ca5a:	e7fb      	b.n	ca54 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
    ca5c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    ca60:	d05f      	beq.n	cb22 <uarte_nrfx_configure+0x132>
    ca62:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    ca66:	d1ee      	bne.n	ca46 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    ca68:	4b38      	ldr	r3, [pc, #224]	; (cb4c <uarte_nrfx_configure+0x15c>)
    ca6a:	e03c      	b.n	cae6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    ca6c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    ca70:	d05a      	beq.n	cb28 <uarte_nrfx_configure+0x138>
    ca72:	d807      	bhi.n	ca84 <uarte_nrfx_configure+0x94>
    ca74:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    ca78:	d058      	beq.n	cb2c <uarte_nrfx_configure+0x13c>
    ca7a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    ca7e:	d1e2      	bne.n	ca46 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    ca80:	4b33      	ldr	r3, [pc, #204]	; (cb50 <uarte_nrfx_configure+0x160>)
    ca82:	e030      	b.n	cae6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    ca84:	f647 2512 	movw	r5, #31250	; 0x7a12
    ca88:	42ab      	cmp	r3, r5
    ca8a:	d1dc      	bne.n	ca46 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    ca8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    ca90:	e029      	b.n	cae6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    ca92:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    ca96:	d04b      	beq.n	cb30 <uarte_nrfx_configure+0x140>
    ca98:	d813      	bhi.n	cac2 <uarte_nrfx_configure+0xd2>
    ca9a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    ca9e:	d04a      	beq.n	cb36 <uarte_nrfx_configure+0x146>
    caa0:	d809      	bhi.n	cab6 <uarte_nrfx_configure+0xc6>
    caa2:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    caa6:	42ab      	cmp	r3, r5
    caa8:	d047      	beq.n	cb3a <uarte_nrfx_configure+0x14a>
    caaa:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    caae:	d1ca      	bne.n	ca46 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    cab0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    cab4:	e017      	b.n	cae6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    cab6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    caba:	d1c4      	bne.n	ca46 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    cabc:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    cac0:	e011      	b.n	cae6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    cac2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    cac6:	d03b      	beq.n	cb40 <uarte_nrfx_configure+0x150>
    cac8:	d808      	bhi.n	cadc <uarte_nrfx_configure+0xec>
    caca:	4d22      	ldr	r5, [pc, #136]	; (cb54 <uarte_nrfx_configure+0x164>)
    cacc:	42ab      	cmp	r3, r5
    cace:	d03a      	beq.n	cb46 <uarte_nrfx_configure+0x156>
    cad0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    cad4:	d1b7      	bne.n	ca46 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    cad6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    cada:	e004      	b.n	cae6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    cadc:	4d1e      	ldr	r5, [pc, #120]	; (cb58 <uarte_nrfx_configure+0x168>)
    cade:	42ab      	cmp	r3, r5
    cae0:	d1b1      	bne.n	ca46 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    cae2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    cae6:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    cae8:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
    caec:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
    caee:	433a      	orrs	r2, r7
    caf0:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
    caf2:	4334      	orrs	r4, r6
    caf4:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    caf6:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    cafa:	1d2b      	adds	r3, r5, #4
    cafc:	c903      	ldmia	r1, {r0, r1}
    cafe:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    cb02:	2000      	movs	r0, #0
}
    cb04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    cb06:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    cb0a:	e7ec      	b.n	cae6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    cb0c:	4b13      	ldr	r3, [pc, #76]	; (cb5c <uarte_nrfx_configure+0x16c>)
    cb0e:	e7ea      	b.n	cae6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    cb10:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    cb14:	e7e7      	b.n	cae6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
    cb16:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    cb1a:	e7e4      	b.n	cae6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    cb1c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    cb20:	e7e1      	b.n	cae6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    cb22:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    cb26:	e7de      	b.n	cae6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    cb28:	4b0d      	ldr	r3, [pc, #52]	; (cb60 <uarte_nrfx_configure+0x170>)
    cb2a:	e7dc      	b.n	cae6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    cb2c:	4b0d      	ldr	r3, [pc, #52]	; (cb64 <uarte_nrfx_configure+0x174>)
    cb2e:	e7da      	b.n	cae6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    cb30:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    cb34:	e7d7      	b.n	cae6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    cb36:	4b0c      	ldr	r3, [pc, #48]	; (cb68 <uarte_nrfx_configure+0x178>)
    cb38:	e7d5      	b.n	cae6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    cb3a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    cb3e:	e7d2      	b.n	cae6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    cb40:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    cb44:	e7cf      	b.n	cae6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    cb46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    cb4a:	e7cc      	b.n	cae6 <uarte_nrfx_configure+0xf6>
    cb4c:	0013b000 	.word	0x0013b000
    cb50:	004ea000 	.word	0x004ea000
    cb54:	0003d090 	.word	0x0003d090
    cb58:	000f4240 	.word	0x000f4240
    cb5c:	00275000 	.word	0x00275000
    cb60:	0075c000 	.word	0x0075c000
    cb64:	003af000 	.word	0x003af000
    cb68:	013a9000 	.word	0x013a9000

0000cb6c <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    cb6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cb70:	4680      	mov	r8, r0
    cb72:	b087      	sub	sp, #28
    cb74:	2200      	movs	r2, #0
    cb76:	2101      	movs	r1, #1
    cb78:	2008      	movs	r0, #8
    cb7a:	f7fd ff95 	bl	aaa8 <z_arm_irq_priority_set>
    cb7e:	2008      	movs	r0, #8
    cb80:	f7fd ff62 	bl	aa48 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    cb84:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    cb86:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    cb8a:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    cb8e:	683d      	ldr	r5, [r7, #0]
	ret = pinctrl_lookup_state(config, id, &state);
    cb90:	aa05      	add	r2, sp, #20
    cb92:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	data->dev = dev;
    cb96:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    cb9a:	f8d7 900c 	ldr.w	r9, [r7, #12]
    cb9e:	4648      	mov	r0, r9
    cba0:	f003 face 	bl	10140 <pinctrl_lookup_state>
	if (ret < 0) {
    cba4:	1e04      	subs	r4, r0, #0
    cba6:	db24      	blt.n	cbf2 <uarte_0_init+0x86>
	return pinctrl_apply_state_direct(config, state);
    cba8:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    cbaa:	f8d9 2000 	ldr.w	r2, [r9]
    cbae:	7919      	ldrb	r1, [r3, #4]
    cbb0:	6818      	ldr	r0, [r3, #0]
    cbb2:	f7ff fe4b 	bl	c84c <pinctrl_configure_pins>
	if (err < 0) {
    cbb6:	1e04      	subs	r4, r0, #0
    cbb8:	db1b      	blt.n	cbf2 <uarte_0_init+0x86>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    cbba:	4640      	mov	r0, r8
    cbbc:	1d31      	adds	r1, r6, #4
    cbbe:	f7ff ff17 	bl	c9f0 <uarte_nrfx_configure>
	if (err) {
    cbc2:	4604      	mov	r4, r0
    cbc4:	b9a8      	cbnz	r0, cbf2 <uarte_0_init+0x86>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    cbc6:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    cbc8:	0799      	lsls	r1, r3, #30
    cbca:	d523      	bpl.n	cc14 <uarte_0_init+0xa8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    cbcc:	f106 0018 	add.w	r0, r6, #24
    cbd0:	f000 fd9e 	bl	d710 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    cbd4:	4b23      	ldr	r3, [pc, #140]	; (cc64 <uarte_0_init+0xf8>)
    cbd6:	4298      	cmp	r0, r3
    cbd8:	d00f      	beq.n	cbfa <uarte_0_init+0x8e>
		LOG_ERR("Failed to allocate PPI Channel");
    cbda:	4b23      	ldr	r3, [pc, #140]	; (cc68 <uarte_0_init+0xfc>)
    cbdc:	4620      	mov	r0, r4
    cbde:	e9cd 4301 	strd	r4, r3, [sp, #4]
    cbe2:	9400      	str	r4, [sp, #0]
    cbe4:	4623      	mov	r3, r4
    cbe6:	2201      	movs	r2, #1
    cbe8:	4920      	ldr	r1, [pc, #128]	; (cc6c <uarte_0_init+0x100>)
    cbea:	f7ff feef 	bl	c9cc <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    cbee:	f06f 0404 	mvn.w	r4, #4
UART_NRF_UARTE_DEVICE(0);
    cbf2:	4620      	mov	r0, r4
    cbf4:	b007      	add	sp, #28
    cbf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cbfa:	7e33      	ldrb	r3, [r6, #24]
    cbfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    cc00:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    cc04:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    cc08:	2301      	movs	r3, #1
    cc0a:	7e32      	ldrb	r2, [r6, #24]
    cc0c:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    cc0e:	4a18      	ldr	r2, [pc, #96]	; (cc70 <uarte_0_init+0x104>)
    cc10:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    cc14:	2308      	movs	r3, #8
    cc16:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
    cc1a:	7a3b      	ldrb	r3, [r7, #8]
    cc1c:	b953      	cbnz	r3, cc34 <uarte_0_init+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cc1e:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    cc22:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    cc26:	6973      	ldr	r3, [r6, #20]
    cc28:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    cc2c:	2301      	movs	r3, #1
    cc2e:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cc32:	602b      	str	r3, [r5, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    cc34:	687b      	ldr	r3, [r7, #4]
    cc36:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    cc38:	bf5c      	itt	pl
    cc3a:	f44f 7380 	movpl.w	r3, #256	; 0x100
    cc3e:	f8c5 3304 	strpl.w	r3, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    cc42:	687b      	ldr	r3, [r7, #4]
    cc44:	06db      	lsls	r3, r3, #27
    cc46:	bf44      	itt	mi
    cc48:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    cc4c:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    cc50:	6933      	ldr	r3, [r6, #16]
    cc52:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    cc56:	2300      	movs	r3, #0
    cc58:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cc5c:	2301      	movs	r3, #1
    cc5e:	60ab      	str	r3, [r5, #8]
    cc60:	60eb      	str	r3, [r5, #12]
UART_NRF_UARTE_DEVICE(0);
    cc62:	e7c6      	b.n	cbf2 <uarte_0_init+0x86>
    cc64:	0bad0000 	.word	0x0bad0000
    cc68:	000118fc 	.word	0x000118fc
    cc6c:	000109fc 	.word	0x000109fc
    cc70:	40017000 	.word	0x40017000

0000cc74 <uarte_nrfx_poll_out>:
{
    cc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc76:	4604      	mov	r4, r0
    cc78:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    cc7a:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    cc7c:	f003 fbab 	bl	103d6 <k_is_in_isr>
    cc80:	b9b0      	cbnz	r0, ccb0 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    cc82:	4b2e      	ldr	r3, [pc, #184]	; (cd3c <uarte_nrfx_poll_out+0xc8>)
    cc84:	781b      	ldrb	r3, [r3, #0]
    cc86:	b19b      	cbz	r3, ccb0 <uarte_nrfx_poll_out+0x3c>
{
    cc88:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    cc8a:	6860      	ldr	r0, [r4, #4]
    cc8c:	f003 fa8e 	bl	101ac <is_tx_ready.isra.0>
    cc90:	bb00      	cbnz	r0, ccd4 <uarte_nrfx_poll_out+0x60>
    cc92:	2001      	movs	r0, #1
    cc94:	f003 fb0d 	bl	102b2 <nrfx_busy_wait>
    cc98:	3e01      	subs	r6, #1
    cc9a:	d1f6      	bne.n	cc8a <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    cc9c:	2100      	movs	r1, #0
    cc9e:	2021      	movs	r0, #33	; 0x21
    cca0:	f002 fa2c 	bl	f0fc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    cca4:	e7f0      	b.n	cc88 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    cca6:	f386 8811 	msr	BASEPRI, r6
    ccaa:	f3bf 8f6f 	isb	sy
}
    ccae:	e7f5      	b.n	cc9c <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    ccb0:	f04f 0320 	mov.w	r3, #32
    ccb4:	f3ef 8611 	mrs	r6, BASEPRI
    ccb8:	f383 8812 	msr	BASEPRI_MAX, r3
    ccbc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    ccc0:	6860      	ldr	r0, [r4, #4]
    ccc2:	4631      	mov	r1, r6
    ccc4:	f003 fa72 	bl	101ac <is_tx_ready.isra.0>
    ccc8:	b990      	cbnz	r0, ccf0 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    ccca:	f386 8811 	msr	BASEPRI, r6
    ccce:	f3bf 8f6f 	isb	sy
}
    ccd2:	e7ed      	b.n	ccb0 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    ccd4:	f04f 0320 	mov.w	r3, #32
    ccd8:	f3ef 8611 	mrs	r6, BASEPRI
    ccdc:	f383 8812 	msr	BASEPRI_MAX, r3
    cce0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    cce4:	6860      	ldr	r0, [r4, #4]
    cce6:	4631      	mov	r1, r6
    cce8:	f003 fa60 	bl	101ac <is_tx_ready.isra.0>
    ccec:	2800      	cmp	r0, #0
    ccee:	d0da      	beq.n	cca6 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    ccf0:	693b      	ldr	r3, [r7, #16]
    ccf2:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    ccf4:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    ccf6:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    ccf8:	6813      	ldr	r3, [r2, #0]
    ccfa:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    ccfe:	2001      	movs	r0, #1
    cd00:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cd04:	2000      	movs	r0, #0
    cd06:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    cd0a:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    cd0e:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    cd12:	6852      	ldr	r2, [r2, #4]
    cd14:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    cd18:	06d2      	lsls	r2, r2, #27
    cd1a:	d508      	bpl.n	cd2e <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    cd1c:	2008      	movs	r0, #8
	return config->uarte_regs;
    cd1e:	6862      	ldr	r2, [r4, #4]
    cd20:	6812      	ldr	r2, [r2, #0]
    cd22:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    cd26:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    cd2a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cd2e:	2201      	movs	r2, #1
    cd30:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    cd32:	f381 8811 	msr	BASEPRI, r1
    cd36:	f3bf 8f6f 	isb	sy
}
    cd3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cd3c:	20008556 	.word	0x20008556

0000cd40 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    cd40:	2301      	movs	r3, #1
    cd42:	4083      	lsls	r3, r0
{
    cd44:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    cd46:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    cd48:	4a0b      	ldr	r2, [pc, #44]	; (cd78 <compare_int_lock+0x38>)
    cd4a:	e8d2 1fef 	ldaex	r1, [r2]
    cd4e:	ea01 0504 	and.w	r5, r1, r4
    cd52:	e8c2 5fe6 	stlex	r6, r5, [r2]
    cd56:	2e00      	cmp	r6, #0
    cd58:	d1f7      	bne.n	cd4a <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    cd5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    cd5e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    cd60:	4806      	ldr	r0, [pc, #24]	; (cd7c <compare_int_lock+0x3c>)
    cd62:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    cd66:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cd6a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    cd6e:	420b      	tst	r3, r1
}
    cd70:	bf14      	ite	ne
    cd72:	2001      	movne	r0, #1
    cd74:	2000      	moveq	r0, #0
    cd76:	bd70      	pop	{r4, r5, r6, pc}
    cd78:	200084c8 	.word	0x200084c8
    cd7c:	40015000 	.word	0x40015000

0000cd80 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    cd80:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    cd82:	490e      	ldr	r1, [pc, #56]	; (cdbc <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    cd84:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    cd88:	e9d1 3400 	ldrd	r3, r4, [r1]
    cd8c:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    cd8e:	18c3      	adds	r3, r0, r3
    cd90:	f144 0400 	adc.w	r4, r4, #0
    cd94:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    cd98:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    cd9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    cda0:	d209      	bcs.n	cdb6 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    cda2:	4b07      	ldr	r3, [pc, #28]	; (cdc0 <sys_clock_timeout_handler+0x40>)
    cda4:	681b      	ldr	r3, [r3, #0]
    cda6:	0a1a      	lsrs	r2, r3, #8
    cda8:	061b      	lsls	r3, r3, #24
    cdaa:	199c      	adds	r4, r3, r6
    cdac:	4b05      	ldr	r3, [pc, #20]	; (cdc4 <sys_clock_timeout_handler+0x44>)
    cdae:	f142 0500 	adc.w	r5, r2, #0
    cdb2:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    cdb6:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    cdb8:	f002 baf6 	b.w	f3a8 <sys_clock_announce>
    cdbc:	20008178 	.word	0x20008178
    cdc0:	200084cc 	.word	0x200084cc
    cdc4:	20008180 	.word	0x20008180

0000cdc8 <compare_int_unlock>:
	if (key) {
    cdc8:	b1d9      	cbz	r1, ce02 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    cdca:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cdcc:	4a0d      	ldr	r2, [pc, #52]	; (ce04 <compare_int_unlock+0x3c>)
    cdce:	4083      	lsls	r3, r0
    cdd0:	e8d2 cfef 	ldaex	ip, [r2]
    cdd4:	ea4c 0c03 	orr.w	ip, ip, r3
    cdd8:	e8c2 cfe1 	stlex	r1, ip, [r2]
    cddc:	2900      	cmp	r1, #0
    cdde:	d1f7      	bne.n	cdd0 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    cde0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    cde4:	4a08      	ldr	r2, [pc, #32]	; (ce08 <compare_int_unlock+0x40>)
    cde6:	4083      	lsls	r3, r0
    cde8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cdec:	4b07      	ldr	r3, [pc, #28]	; (ce0c <compare_int_unlock+0x44>)
    cdee:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    cdf2:	40c3      	lsrs	r3, r0
    cdf4:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cdf6:	bf42      	ittt	mi
    cdf8:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    cdfc:	4b04      	ldrmi	r3, [pc, #16]	; (ce10 <compare_int_unlock+0x48>)
    cdfe:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    ce02:	4770      	bx	lr
    ce04:	200084c8 	.word	0x200084c8
    ce08:	40015000 	.word	0x40015000
    ce0c:	200084c0 	.word	0x200084c0
    ce10:	e000e100 	.word	0xe000e100

0000ce14 <z_nrf_rtc_timer_compare_evt_address_get>:
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
    ce14:	b2c3      	uxtb	r3, r0
}
    ce16:	4802      	ldr	r0, [pc, #8]	; (ce20 <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
    ce18:	009b      	lsls	r3, r3, #2
    ce1a:	4418      	add	r0, r3
    ce1c:	4770      	bx	lr
    ce1e:	bf00      	nop
    ce20:	40015140 	.word	0x40015140

0000ce24 <z_nrf_rtc_timer_compare_read>:
    return p_reg->CC[ch];
    ce24:	4b02      	ldr	r3, [pc, #8]	; (ce30 <z_nrf_rtc_timer_compare_read+0xc>)
    ce26:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    ce2a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
    ce2e:	4770      	bx	lr
    ce30:	40015000 	.word	0x40015000

0000ce34 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    ce34:	4b0d      	ldr	r3, [pc, #52]	; (ce6c <z_nrf_rtc_timer_read+0x38>)
    ce36:	6818      	ldr	r0, [r3, #0]
    ce38:	0a01      	lsrs	r1, r0, #8
    ce3a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    ce3c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    ce40:	4b0b      	ldr	r3, [pc, #44]	; (ce70 <z_nrf_rtc_timer_read+0x3c>)
    ce42:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    ce46:	1818      	adds	r0, r3, r0
    ce48:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    ce4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    ce50:	d20a      	bcs.n	ce68 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    ce52:	4b08      	ldr	r3, [pc, #32]	; (ce74 <z_nrf_rtc_timer_read+0x40>)
    ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce58:	4290      	cmp	r0, r2
    ce5a:	eb71 0303 	sbcs.w	r3, r1, r3
    ce5e:	d203      	bcs.n	ce68 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    ce60:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    ce64:	f141 0100 	adc.w	r1, r1, #0
}
    ce68:	4770      	bx	lr
    ce6a:	bf00      	nop
    ce6c:	200084cc 	.word	0x200084cc
    ce70:	40015000 	.word	0x40015000
    ce74:	20008180 	.word	0x20008180

0000ce78 <compare_set>:
{
    ce78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce7c:	4616      	mov	r6, r2
    ce7e:	461f      	mov	r7, r3
    ce80:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    ce82:	f7ff ff5d 	bl	cd40 <compare_int_lock>
    ce86:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    ce88:	f7ff ffd4 	bl	ce34 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    ce8c:	42b0      	cmp	r0, r6
    ce8e:	eb71 0307 	sbcs.w	r3, r1, r7
    ce92:	d250      	bcs.n	cf36 <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    ce94:	4b38      	ldr	r3, [pc, #224]	; (cf78 <compare_set+0x100>)
    ce96:	1a30      	subs	r0, r6, r0
    ce98:	eb67 0101 	sbc.w	r1, r7, r1
    ce9c:	4298      	cmp	r0, r3
    ce9e:	f171 0100 	sbcs.w	r1, r1, #0
    cea2:	d265      	bcs.n	cf70 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
    cea4:	4b35      	ldr	r3, [pc, #212]	; (cf7c <compare_set+0x104>)
    cea6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    ceaa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    ceae:	429f      	cmp	r7, r3
    ceb0:	bf08      	it	eq
    ceb2:	4296      	cmpeq	r6, r2
    ceb4:	d049      	beq.n	cf4a <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ceb6:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENCLR = mask;
    ceba:	4931      	ldr	r1, [pc, #196]	; (cf80 <compare_set+0x108>)
    cebc:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    cec0:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    cec2:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    cec6:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    ceca:	f003 f9b9 	bl	10240 <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    cece:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    ced2:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    ced4:	f104 0550 	add.w	r5, r4, #80	; 0x50
    ced8:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ceda:	b2ad      	uxth	r5, r5
    cedc:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    cee0:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    cee4:	4a27      	ldr	r2, [pc, #156]	; (cf84 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    cee6:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
    p_reg->CC[ch] = cc_val;
    ceea:	9301      	str	r3, [sp, #4]
    ceec:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    cef0:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    cef4:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
    cef8:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    cefc:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    cf00:	eba0 0008 	sub.w	r0, r0, r8
    cf04:	3803      	subs	r0, #3
    cf06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    cf0a:	4290      	cmp	r0, r2
    cf0c:	d91d      	bls.n	cf4a <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    cf0e:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    cf10:	b160      	cbz	r0, cf2c <compare_set+0xb4>
     return p_reg->COUNTER;
    cf12:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    cf16:	eba8 000b 	sub.w	r0, r8, fp
    cf1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    cf1e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    cf22:	d912      	bls.n	cf4a <compare_set+0xd2>
					event_clear(chan);
    cf24:	4620      	mov	r0, r4
    cf26:	f003 f98b 	bl	10240 <event_clear>
    cf2a:	4a16      	ldr	r2, [pc, #88]	; (cf84 <compare_set+0x10c>)
			cc_val = now + cc_inc;
    cf2c:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    cf30:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    cf34:	e7da      	b.n	ceec <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    cf36:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cf38:	4a13      	ldr	r2, [pc, #76]	; (cf88 <compare_set+0x110>)
    cf3a:	40a3      	lsls	r3, r4
    cf3c:	e8d2 0fef 	ldaex	r0, [r2]
    cf40:	4318      	orrs	r0, r3
    cf42:	e8c2 0fe1 	stlex	r1, r0, [r2]
    cf46:	2900      	cmp	r1, #0
    cf48:	d1f8      	bne.n	cf3c <compare_set+0xc4>
	return ret;
    cf4a:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    cf4c:	490b      	ldr	r1, [pc, #44]	; (cf7c <compare_set+0x104>)
	cc_data[chan].callback = handler;
    cf4e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    cf50:	0123      	lsls	r3, r4, #4
    cf52:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    cf56:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    cf58:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    cf5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cf5e:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    cf60:	4620      	mov	r0, r4
    cf62:	9900      	ldr	r1, [sp, #0]
    cf64:	f7ff ff30 	bl	cdc8 <compare_int_unlock>
}
    cf68:	4628      	mov	r0, r5
    cf6a:	b003      	add	sp, #12
    cf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    cf70:	f06f 0515 	mvn.w	r5, #21
    cf74:	e7f4      	b.n	cf60 <compare_set+0xe8>
    cf76:	bf00      	nop
    cf78:	00800001 	.word	0x00800001
    cf7c:	20008158 	.word	0x20008158
    cf80:	40015000 	.word	0x40015000
    cf84:	007ffffd 	.word	0x007ffffd
    cf88:	200084c0 	.word	0x200084c0

0000cf8c <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    cf8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
    cf8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
    cf92:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    cf94:	f04f 30ff 	mov.w	r0, #4294967295
    cf98:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
    cf9c:	4c1c      	ldr	r4, [pc, #112]	; (d010 <sys_clock_driver_init+0x84>)
    cf9e:	4b1d      	ldr	r3, [pc, #116]	; (d014 <sys_clock_driver_init+0x88>)
    p_reg->INTENSET = mask;
    cfa0:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
    cfa2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    cfa6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    cfaa:	4b1b      	ldr	r3, [pc, #108]	; (d018 <sys_clock_driver_init+0x8c>)
    p_reg->PRESCALER = val;
    cfac:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    cfb0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    cfb4:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
    cfb8:	e9c3 0106 	strd	r0, r1, [r3, #24]
    cfbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cfc0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    cfc4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    cfc8:	4b14      	ldr	r3, [pc, #80]	; (d01c <sys_clock_driver_init+0x90>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    cfca:	2101      	movs	r1, #1
    cfcc:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    cfd0:	2015      	movs	r0, #21
    cfd2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    cfd6:	462a      	mov	r2, r5
    cfd8:	f7fd fd66 	bl	aaa8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    cfdc:	2015      	movs	r0, #21
    cfde:	f7fd fd33 	bl	aa48 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    cfe2:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    cfe4:	2203      	movs	r2, #3
    cfe6:	60a3      	str	r3, [r4, #8]
    cfe8:	6023      	str	r3, [r4, #0]
    cfea:	4b0d      	ldr	r3, [pc, #52]	; (d020 <sys_clock_driver_init+0x94>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    cfec:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
    cfee:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
    cff0:	4b0c      	ldr	r3, [pc, #48]	; (d024 <sys_clock_driver_init+0x98>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    cff2:	4a0d      	ldr	r2, [pc, #52]	; (d028 <sys_clock_driver_init+0x9c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
    cff4:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    cff6:	4b0d      	ldr	r3, [pc, #52]	; (d02c <sys_clock_driver_init+0xa0>)
    cff8:	9501      	str	r5, [sp, #4]
    cffa:	9300      	str	r3, [sp, #0]
    cffc:	2300      	movs	r3, #0
    cffe:	f7ff ff3b 	bl	ce78 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    d002:	4630      	mov	r0, r6
    d004:	f7fe fc78 	bl	b8f8 <z_nrf_clock_control_lf_on>

	return 0;
}
    d008:	4628      	mov	r0, r5
    d00a:	b002      	add	sp, #8
    d00c:	bd70      	pop	{r4, r5, r6, pc}
    d00e:	bf00      	nop
    d010:	40015000 	.word	0x40015000
    d014:	000f0003 	.word	0x000f0003
    d018:	20008158 	.word	0x20008158
    d01c:	e000e100 	.word	0xe000e100
    d020:	200084c8 	.word	0x200084c8
    d024:	200084c4 	.word	0x200084c4
    d028:	007fffff 	.word	0x007fffff
    d02c:	0000cd81 	.word	0x0000cd81

0000d030 <rtc_nrf_isr>:
{
    d030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
    d034:	4b39      	ldr	r3, [pc, #228]	; (d11c <rtc_nrf_isr+0xec>)
    d036:	b085      	sub	sp, #20
    d038:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    d03c:	0792      	lsls	r2, r2, #30
    d03e:	d50b      	bpl.n	d058 <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d040:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    d044:	b142      	cbz	r2, d058 <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d046:	2200      	movs	r2, #0
    d048:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    d04c:	4a34      	ldr	r2, [pc, #208]	; (d120 <rtc_nrf_isr+0xf0>)
    d04e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    d052:	6813      	ldr	r3, [r2, #0]
    d054:	3301      	adds	r3, #1
    d056:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    d058:	4d32      	ldr	r5, [pc, #200]	; (d124 <rtc_nrf_isr+0xf4>)
    d05a:	2400      	movs	r4, #0
    d05c:	46a8      	mov	r8, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    d05e:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    return p_reg->INTENSET & mask;
    d062:	4f2e      	ldr	r7, [pc, #184]	; (d11c <rtc_nrf_isr+0xec>)
    d064:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
    d068:	fa06 f904 	lsl.w	r9, r6, r4
    d06c:	ea19 0f03 	tst.w	r9, r3
    d070:	d02e      	beq.n	d0d0 <rtc_nrf_isr+0xa0>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    d072:	2301      	movs	r3, #1
    d074:	40a3      	lsls	r3, r4
    d076:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d078:	492b      	ldr	r1, [pc, #172]	; (d128 <rtc_nrf_isr+0xf8>)
    d07a:	e8d1 2fef 	ldaex	r2, [r1]
    d07e:	ea02 0003 	and.w	r0, r2, r3
    d082:	e8c1 0fec 	stlex	ip, r0, [r1]
    d086:	f1bc 0f00 	cmp.w	ip, #0
    d08a:	d1f6      	bne.n	d07a <rtc_nrf_isr+0x4a>
    d08c:	fa22 f304 	lsr.w	r3, r2, r4
    d090:	07db      	lsls	r3, r3, #31
    d092:	d403      	bmi.n	d09c <rtc_nrf_isr+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d094:	4b25      	ldr	r3, [pc, #148]	; (d12c <rtc_nrf_isr+0xfc>)
    d096:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    d09a:	b1cb      	cbz	r3, d0d0 <rtc_nrf_isr+0xa0>
			event_clear(chan);
    d09c:	4620      	mov	r0, r4
    d09e:	f003 f8cf 	bl	10240 <event_clear>
		curr_time = z_nrf_rtc_timer_read();
    d0a2:	f7ff fec7 	bl	ce34 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    d0a6:	f04f 0220 	mov.w	r2, #32
    d0aa:	f3ef 8311 	mrs	r3, BASEPRI
    d0ae:	f382 8812 	msr	BASEPRI_MAX, r2
    d0b2:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    d0b6:	eb08 1c04 	add.w	ip, r8, r4, lsl #4
    d0ba:	e9dc ab02 	ldrd	sl, fp, [ip, #8]
		if (curr_time >= expire_time) {
    d0be:	4550      	cmp	r0, sl
    d0c0:	eb71 010b 	sbcs.w	r1, r1, fp
    d0c4:	9302      	str	r3, [sp, #8]
    d0c6:	d20a      	bcs.n	d0de <rtc_nrf_isr+0xae>
	__asm__ volatile(
    d0c8:	f383 8811 	msr	BASEPRI, r3
    d0cc:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    d0d0:	3510      	adds	r5, #16
    d0d2:	b114      	cbz	r4, d0da <rtc_nrf_isr+0xaa>
}
    d0d4:	b005      	add	sp, #20
    d0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    d0da:	2401      	movs	r4, #1
    d0dc:	e7c2      	b.n	d064 <rtc_nrf_isr+0x34>
			cc_data[chan].callback = NULL;
    d0de:	2000      	movs	r0, #0
			user_context = cc_data[chan].user_context;
    d0e0:	e9d5 1300 	ldrd	r1, r3, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    d0e4:	f04f 32ff 	mov.w	r2, #4294967295
			user_context = cc_data[chan].user_context;
    d0e8:	9303      	str	r3, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    d0ea:	f04f 33ff 	mov.w	r3, #4294967295
			cc_data[chan].callback = NULL;
    d0ee:	6028      	str	r0, [r5, #0]
    p_reg->EVTENCLR = mask;
    d0f0:	480a      	ldr	r0, [pc, #40]	; (d11c <rtc_nrf_isr+0xec>)
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    d0f2:	e9cc 2302 	strd	r2, r3, [ip, #8]
    d0f6:	f8c0 9348 	str.w	r9, [r0, #840]	; 0x348
			event_clear(chan);
    d0fa:	4620      	mov	r0, r4
    d0fc:	f003 f8a0 	bl	10240 <event_clear>
    d100:	9b02      	ldr	r3, [sp, #8]
    d102:	f383 8811 	msr	BASEPRI, r3
    d106:	f3bf 8f6f 	isb	sy
		if (handler) {
    d10a:	2900      	cmp	r1, #0
    d10c:	d0e0      	beq.n	d0d0 <rtc_nrf_isr+0xa0>
			handler(chan, expire_time, user_context);
    d10e:	9b03      	ldr	r3, [sp, #12]
    d110:	4652      	mov	r2, sl
    d112:	9300      	str	r3, [sp, #0]
    d114:	465b      	mov	r3, fp
    d116:	4788      	blx	r1
    d118:	e7da      	b.n	d0d0 <rtc_nrf_isr+0xa0>
    d11a:	bf00      	nop
    d11c:	40015000 	.word	0x40015000
    d120:	200084cc 	.word	0x200084cc
    d124:	20008158 	.word	0x20008158
    d128:	200084c0 	.word	0x200084c0
    d12c:	40015140 	.word	0x40015140

0000d130 <z_nrf_rtc_timer_chan_alloc>:
{
    d130:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
    d132:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
    d134:	4b0c      	ldr	r3, [pc, #48]	; (d168 <z_nrf_rtc_timer_chan_alloc+0x38>)
    d136:	6818      	ldr	r0, [r3, #0]
    d138:	b190      	cbz	r0, d160 <z_nrf_rtc_timer_chan_alloc+0x30>
    d13a:	fab0 f080 	clz	r0, r0
    d13e:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
    d142:	fa04 f100 	lsl.w	r1, r4, r0
    d146:	43c9      	mvns	r1, r1
    d148:	e8d3 2fef 	ldaex	r2, [r3]
    d14c:	ea02 0501 	and.w	r5, r2, r1
    d150:	e8c3 5fe6 	stlex	r6, r5, [r3]
    d154:	2e00      	cmp	r6, #0
    d156:	d1f7      	bne.n	d148 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
    d158:	40c2      	lsrs	r2, r0
    d15a:	07d2      	lsls	r2, r2, #31
    d15c:	d5eb      	bpl.n	d136 <z_nrf_rtc_timer_chan_alloc+0x6>
}
    d15e:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
    d160:	f06f 000b 	mvn.w	r0, #11
    d164:	e7fb      	b.n	d15e <z_nrf_rtc_timer_chan_alloc+0x2e>
    d166:	bf00      	nop
    d168:	200084c4 	.word	0x200084c4

0000d16c <z_nrf_rtc_timer_chan_free>:
	atomic_or(&alloc_mask, BIT(chan));
    d16c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d16e:	4a05      	ldr	r2, [pc, #20]	; (d184 <z_nrf_rtc_timer_chan_free+0x18>)
    d170:	4083      	lsls	r3, r0
    d172:	e8d2 0fef 	ldaex	r0, [r2]
    d176:	4318      	orrs	r0, r3
    d178:	e8c2 0fe1 	stlex	r1, r0, [r2]
    d17c:	2900      	cmp	r1, #0
    d17e:	d1f8      	bne.n	d172 <z_nrf_rtc_timer_chan_free+0x6>
}
    d180:	4770      	bx	lr
    d182:	bf00      	nop
    d184:	200084c4 	.word	0x200084c4

0000d188 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    d188:	1c43      	adds	r3, r0, #1
{
    d18a:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    d18c:	d021      	beq.n	d1d2 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    d18e:	2801      	cmp	r0, #1
    d190:	dd21      	ble.n	d1d6 <sys_clock_set_timeout+0x4e>
    d192:	4a12      	ldr	r2, [pc, #72]	; (d1dc <sys_clock_set_timeout+0x54>)
    d194:	4b12      	ldr	r3, [pc, #72]	; (d1e0 <sys_clock_set_timeout+0x58>)
    d196:	4290      	cmp	r0, r2
    d198:	bfd4      	ite	le
    d19a:	4604      	movle	r4, r0
    d19c:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    d19e:	f7ff fe49 	bl	ce34 <z_nrf_rtc_timer_read>
    d1a2:	4b10      	ldr	r3, [pc, #64]	; (d1e4 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    d1a4:	490e      	ldr	r1, [pc, #56]	; (d1e0 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    d1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    d1aa:	1a80      	subs	r0, r0, r2
		cyc = 0;
    d1ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    d1b0:	bf28      	it	cs
    d1b2:	2400      	movcs	r4, #0
	cyc += unannounced;
    d1b4:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    d1b6:	428c      	cmp	r4, r1
    d1b8:	bf28      	it	cs
    d1ba:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    d1bc:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    d1be:	490a      	ldr	r1, [pc, #40]	; (d1e8 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    d1c0:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    d1c2:	9001      	str	r0, [sp, #4]
    d1c4:	9100      	str	r1, [sp, #0]
    d1c6:	f143 0300 	adc.w	r3, r3, #0
    d1ca:	f7ff fe55 	bl	ce78 <compare_set>
}
    d1ce:	b002      	add	sp, #8
    d1d0:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    d1d2:	4c03      	ldr	r4, [pc, #12]	; (d1e0 <sys_clock_set_timeout+0x58>)
    d1d4:	e7e3      	b.n	d19e <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    d1d6:	2401      	movs	r4, #1
    d1d8:	e7e1      	b.n	d19e <sys_clock_set_timeout+0x16>
    d1da:	bf00      	nop
    d1dc:	007ffffe 	.word	0x007ffffe
    d1e0:	007fffff 	.word	0x007fffff
    d1e4:	20008178 	.word	0x20008178
    d1e8:	0000cd81 	.word	0x0000cd81

0000d1ec <sys_clock_elapsed>:
{
    d1ec:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    d1ee:	f7ff fe21 	bl	ce34 <z_nrf_rtc_timer_read>
    d1f2:	4b02      	ldr	r3, [pc, #8]	; (d1fc <sys_clock_elapsed+0x10>)
    d1f4:	681b      	ldr	r3, [r3, #0]
}
    d1f6:	1ac0      	subs	r0, r0, r3
    d1f8:	bd08      	pop	{r3, pc}
    d1fa:	bf00      	nop
    d1fc:	20008178 	.word	0x20008178

0000d200 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    d200:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    d202:	ab0b      	add	r3, sp, #44	; 0x2c
    d204:	9305      	str	r3, [sp, #20]
    d206:	9303      	str	r3, [sp, #12]
    d208:	4b05      	ldr	r3, [pc, #20]	; (d220 <z_log_msg_runtime_create.constprop.0+0x20>)
    d20a:	2201      	movs	r2, #1
    d20c:	9302      	str	r3, [sp, #8]
    d20e:	2300      	movs	r3, #0
    d210:	4618      	mov	r0, r3
    d212:	e9cd 3300 	strd	r3, r3, [sp]
    d216:	f7fd f835 	bl	a284 <z_impl_z_log_msg_runtime_vcreate>
}
    d21a:	b007      	add	sp, #28
    d21c:	f85d fb04 	ldr.w	pc, [sp], #4
    d220:	00011935 	.word	0x00011935

0000d224 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    d224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    d226:	2400      	movs	r4, #0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    d228:	f7fc ffbc 	bl	a1a4 <z_impl_log_panic>
    d22c:	4b06      	ldr	r3, [pc, #24]	; (d248 <k_sys_fatal_error_handler+0x24>)
    d22e:	4620      	mov	r0, r4
    d230:	9302      	str	r3, [sp, #8]
    d232:	2201      	movs	r2, #1
    d234:	4623      	mov	r3, r4
    d236:	e9cd 4400 	strd	r4, r4, [sp]
    d23a:	4904      	ldr	r1, [pc, #16]	; (d24c <k_sys_fatal_error_handler+0x28>)
    d23c:	f7ff ffe0 	bl	d200 <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
    d240:	4620      	mov	r0, r4
    d242:	f7fe f843 	bl	b2cc <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    d246:	bf00      	nop
    d248:	00011935 	.word	0x00011935
    d24c:	00010984 	.word	0x00010984

0000d250 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
    d250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d254:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
    d256:	4b15      	ldr	r3, [pc, #84]	; (d2ac <tfm_ns_interface_dispatch+0x5c>)
    d258:	4604      	mov	r4, r0
    d25a:	f893 8000 	ldrb.w	r8, [r3]
    d25e:	460d      	mov	r5, r1
    d260:	4616      	mov	r6, r2
    d262:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();
	int tfm_ns_saved_prio;

	if (!is_pre_kernel) {
    d264:	f1b8 0f00 	cmp.w	r8, #0
    d268:	d115      	bne.n	d296 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
    d26a:	4668      	mov	r0, sp
    d26c:	f002 fd1d 	bl	fcaa <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
    d270:	463a      	mov	r2, r7
    d272:	4631      	mov	r1, r6
    d274:	4628      	mov	r0, r5
    d276:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    d278:	47a0      	blx	r4
    d27a:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
    d27c:	4668      	mov	r0, sp
    d27e:	f002 fd15 	bl	fcac <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
    d282:	f1b8 0f00 	cmp.w	r8, #0
    d286:	d002      	beq.n	d28e <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
    d288:	4809      	ldr	r0, [pc, #36]	; (d2b0 <tfm_ns_interface_dispatch+0x60>)
    d28a:	f001 fbf1 	bl	ea70 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
    d28e:	4620      	mov	r0, r4
    d290:	b022      	add	sp, #136	; 0x88
    d292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
    d296:	f04f 32ff 	mov.w	r2, #4294967295
    d29a:	f04f 33ff 	mov.w	r3, #4294967295
    d29e:	4804      	ldr	r0, [pc, #16]	; (d2b0 <tfm_ns_interface_dispatch+0x60>)
    d2a0:	f001 fb6c 	bl	e97c <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
    d2a4:	2800      	cmp	r0, #0
    d2a6:	d0e0      	beq.n	d26a <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
    d2a8:	241f      	movs	r4, #31
    d2aa:	e7f0      	b.n	d28e <tfm_ns_interface_dispatch+0x3e>
    d2ac:	20008556 	.word	0x20008556
    d2b0:	20008140 	.word	0x20008140

0000d2b4 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
    d2b4:	2300      	movs	r3, #0
{
    d2b6:	b500      	push	{lr}
    d2b8:	b089      	sub	sp, #36	; 0x24
    struct psa_invec in_vec[2] = { {0} };
    d2ba:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;

    in_vec[0].base = &req;
    d2be:	ab03      	add	r3, sp, #12
    d2c0:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
    d2c2:	2304      	movs	r3, #4
    tfm_platform_ioctl_req_t req = request;
    d2c4:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
    d2c6:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
    d2c8:	b1a9      	cbz	r1, d2f6 <tfm_platform_ioctl+0x42>
        in_vec[1].base = input->base;
    d2ca:	680b      	ldr	r3, [r1, #0]
    d2cc:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
    d2ce:	684b      	ldr	r3, [r1, #4]
    d2d0:	9307      	str	r3, [sp, #28]
        inlen = 2;
    d2d2:	2302      	movs	r3, #2
    } else {
        inlen = 1;
    }

    if (output != NULL) {
    d2d4:	1e11      	subs	r1, r2, #0
    d2d6:	bf18      	it	ne
    d2d8:	2101      	movne	r1, #1
        outlen = 1;
    } else {
        outlen = 0;
    }

    status = psa_call(TFM_PLATFORM_SERVICE_HANDLE,
    d2da:	4808      	ldr	r0, [pc, #32]	; (d2fc <tfm_platform_ioctl+0x48>)
    d2dc:	e9cd 2100 	strd	r2, r1, [sp]
    d2e0:	f240 31f5 	movw	r1, #1013	; 0x3f5
    d2e4:	aa04      	add	r2, sp, #16
    d2e6:	f000 f82b 	bl	d340 <psa_call>
                      TFM_PLATFORM_API_ID_IOCTL,
                      in_vec, inlen,
                      output, outlen);

    if (status < PSA_SUCCESS) {
    d2ea:	2800      	cmp	r0, #0
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t)status;
    }
}
    d2ec:	bfb8      	it	lt
    d2ee:	2001      	movlt	r0, #1
    d2f0:	b009      	add	sp, #36	; 0x24
    d2f2:	f85d fb04 	ldr.w	pc, [sp], #4
        inlen = 1;
    d2f6:	2301      	movs	r3, #1
    d2f8:	e7ec      	b.n	d2d4 <tfm_platform_ioctl+0x20>
    d2fa:	bf00      	nop
    d2fc:	40000105 	.word	0x40000105

0000d300 <psa_generate_random>:
    return API_DISPATCH_NO_OUTVEC(in_vec);
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
    d300:	b570      	push	{r4, r5, r6, lr}
    struct tfm_crypto_pack_iovec iov = {
    d302:	2630      	movs	r6, #48	; 0x30
{
    d304:	b092      	sub	sp, #72	; 0x48
    struct tfm_crypto_pack_iovec iov = {
    d306:	ab06      	add	r3, sp, #24
{
    d308:	4605      	mov	r5, r0
    d30a:	460c      	mov	r4, r1
    struct tfm_crypto_pack_iovec iov = {
    d30c:	4632      	mov	r2, r6
    d30e:	2100      	movs	r1, #0
    d310:	4618      	mov	r0, r3
    d312:	f002 fd4c 	bl	fdae <memset>

    psa_invec in_vec[] = {
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
    d316:	e9cd 5404 	strd	r5, r4, [sp, #16]
    psa_invec in_vec[] = {
    d31a:	e9cd 0602 	strd	r0, r6, [sp, #8]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
    d31e:	b154      	cbz	r4, d336 <psa_generate_random+0x36>
        return PSA_SUCCESS;
    }

    return API_DISPATCH(in_vec, out_vec);
    d320:	2301      	movs	r3, #1
    d322:	aa04      	add	r2, sp, #16
    d324:	9200      	str	r2, [sp, #0]
    d326:	2100      	movs	r1, #0
    d328:	4804      	ldr	r0, [pc, #16]	; (d33c <psa_generate_random+0x3c>)
    d32a:	9301      	str	r3, [sp, #4]
    d32c:	aa02      	add	r2, sp, #8
    d32e:	f000 f807 	bl	d340 <psa_call>
}
    d332:	b012      	add	sp, #72	; 0x48
    d334:	bd70      	pop	{r4, r5, r6, pc}
        return PSA_SUCCESS;
    d336:	4620      	mov	r0, r4
    d338:	e7fb      	b.n	d332 <psa_generate_random+0x32>
    d33a:	bf00      	nop
    d33c:	40000100 	.word	0x40000100

0000d340 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
    d340:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
    d342:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
    d346:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
    d34a:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
    d34c:	d20d      	bcs.n	d36a <psa_call+0x2a>
        (type < INT16_MIN) ||
    d34e:	ea43 0504 	orr.w	r5, r3, r4
    d352:	2dff      	cmp	r5, #255	; 0xff
    d354:	d809      	bhi.n	d36a <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
    d356:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
    d35a:	4613      	mov	r3, r2
    d35c:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
    d360:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
    d362:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
    d364:	4803      	ldr	r0, [pc, #12]	; (d374 <psa_call+0x34>)
    d366:	f7ff bf73 	b.w	d250 <tfm_ns_interface_dispatch>
}
    d36a:	f06f 0080 	mvn.w	r0, #128	; 0x80
    d36e:	bc30      	pop	{r4, r5}
    d370:	4770      	bx	lr
    d372:	bf00      	nop
    d374:	00007c11 	.word	0x00007c11

0000d378 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    d378:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    d37a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    d37c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    d37e:	fab2 f382 	clz	r3, r2
    d382:	f1c3 031f 	rsb	r3, r3, #31
    d386:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    d388:	fa05 f403 	lsl.w	r4, r5, r3
    d38c:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d390:	e8d0 6fef 	ldaex	r6, [r0]
    d394:	4296      	cmp	r6, r2
    d396:	d104      	bne.n	d3a2 <nrfx_flag32_alloc+0x2a>
    d398:	e8c0 4fec 	stlex	ip, r4, [r0]
    d39c:	f1bc 0f00 	cmp.w	ip, #0
    d3a0:	d1f6      	bne.n	d390 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    d3a2:	d1eb      	bne.n	d37c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    d3a4:	4801      	ldr	r0, [pc, #4]	; (d3ac <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    d3a6:	700b      	strb	r3, [r1, #0]
}
    d3a8:	bd70      	pop	{r4, r5, r6, pc}
    d3aa:	bf00      	nop
    d3ac:	0bad0000 	.word	0x0bad0000

0000d3b0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    d3b0:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    d3b2:	6803      	ldr	r3, [r0, #0]
    d3b4:	40cb      	lsrs	r3, r1
    d3b6:	07db      	lsls	r3, r3, #31
    d3b8:	d410      	bmi.n	d3dc <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    d3ba:	2301      	movs	r3, #1
    d3bc:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    d3be:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    d3c0:	ea43 0102 	orr.w	r1, r3, r2
    d3c4:	e8d0 4fef 	ldaex	r4, [r0]
    d3c8:	4294      	cmp	r4, r2
    d3ca:	d104      	bne.n	d3d6 <nrfx_flag32_free+0x26>
    d3cc:	e8c0 1fec 	stlex	ip, r1, [r0]
    d3d0:	f1bc 0f00 	cmp.w	ip, #0
    d3d4:	d1f6      	bne.n	d3c4 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    d3d6:	d1f2      	bne.n	d3be <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    d3d8:	4801      	ldr	r0, [pc, #4]	; (d3e0 <nrfx_flag32_free+0x30>)
}
    d3da:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    d3dc:	4801      	ldr	r0, [pc, #4]	; (d3e4 <nrfx_flag32_free+0x34>)
    d3de:	e7fc      	b.n	d3da <nrfx_flag32_free+0x2a>
    d3e0:	0bad0000 	.word	0x0bad0000
    d3e4:	0bad0004 	.word	0x0bad0004

0000d3e8 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    d3e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
    d3ea:	2803      	cmp	r0, #3
    d3ec:	f200 80a0 	bhi.w	d530 <clock_stop+0x148>
    d3f0:	e8df f000 	tbb	[pc, r0]
    d3f4:	32251802 	.word	0x32251802
    p_reg->INTENCLR = mask;
    d3f8:	2202      	movs	r2, #2
    d3fa:	4b59      	ldr	r3, [pc, #356]	; (d560 <clock_stop+0x178>)
    d3fc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d400:	2200      	movs	r2, #0
    d402:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    d406:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d40a:	2201      	movs	r2, #1
    d40c:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    d40e:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    d410:	2301      	movs	r3, #1
    d412:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    d416:	2803      	cmp	r0, #3
    d418:	f200 808a 	bhi.w	d530 <clock_stop+0x148>
    d41c:	e8df f000 	tbb	[pc, r0]
    d420:	94736529 	.word	0x94736529
    p_reg->INTENCLR = mask;
    d424:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d426:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    d428:	4b4d      	ldr	r3, [pc, #308]	; (d560 <clock_stop+0x178>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    d42a:	f10d 0407 	add.w	r4, sp, #7
    d42e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d432:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    d436:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d43a:	605a      	str	r2, [r3, #4]
    d43c:	e7e8      	b.n	d410 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    d43e:	f44f 7200 	mov.w	r2, #512	; 0x200
    d442:	4b47      	ldr	r3, [pc, #284]	; (d560 <clock_stop+0x178>)
    d444:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d448:	2200      	movs	r2, #0
    d44a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    d44e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d452:	2201      	movs	r2, #1
    d454:	625a      	str	r2, [r3, #36]	; 0x24
    d456:	e7da      	b.n	d40e <clock_stop+0x26>
    p_reg->INTENCLR = mask;
    d458:	f44f 7280 	mov.w	r2, #256	; 0x100
    d45c:	4b40      	ldr	r3, [pc, #256]	; (d560 <clock_stop+0x178>)
    d45e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d462:	2200      	movs	r2, #0
    d464:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    d468:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d46c:	2201      	movs	r2, #1
    d46e:	61da      	str	r2, [r3, #28]
    d470:	e7cd      	b.n	d40e <clock_stop+0x26>
    switch (domain)
    d472:	f242 7510 	movw	r5, #10000	; 0x2710
    d476:	4e3a      	ldr	r6, [pc, #232]	; (d560 <clock_stop+0x178>)
            if (p_clk_src != NULL)
    d478:	b36c      	cbz	r4, d4d6 <clock_stop+0xee>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d47a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    d47e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    d482:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d484:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    d488:	03d9      	lsls	r1, r3, #15
    d48a:	d551      	bpl.n	d530 <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    d48c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d490:	2801      	cmp	r0, #1
    d492:	d14d      	bne.n	d530 <clock_stop+0x148>
    d494:	f002 ff0d 	bl	102b2 <nrfx_busy_wait>
    d498:	3d01      	subs	r5, #1
    d49a:	d1ed      	bne.n	d478 <clock_stop+0x90>
    d49c:	e048      	b.n	d530 <clock_stop+0x148>
    d49e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d4a2:	2801      	cmp	r0, #1
    d4a4:	d144      	bne.n	d530 <clock_stop+0x148>
    d4a6:	f002 ff04 	bl	102b2 <nrfx_busy_wait>
    d4aa:	3d01      	subs	r5, #1
    d4ac:	d14f      	bne.n	d54e <clock_stop+0x166>
    d4ae:	e03f      	b.n	d530 <clock_stop+0x148>
    d4b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d4b4:	2801      	cmp	r0, #1
    d4b6:	d13b      	bne.n	d530 <clock_stop+0x148>
    d4b8:	f002 fefb 	bl	102b2 <nrfx_busy_wait>
    d4bc:	3d01      	subs	r5, #1
    d4be:	d037      	beq.n	d530 <clock_stop+0x148>
            if (p_clk_src != NULL)
    d4c0:	b1bc      	cbz	r4, d4f2 <clock_stop+0x10a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    d4c2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    d4c6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    d4ca:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    d4cc:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    d4d0:	03db      	lsls	r3, r3, #15
    d4d2:	d52d      	bpl.n	d530 <clock_stop+0x148>
    d4d4:	e7ec      	b.n	d4b0 <clock_stop+0xc8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d4d6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    d4da:	03da      	lsls	r2, r3, #15
    d4dc:	d528      	bpl.n	d530 <clock_stop+0x148>
    d4de:	2001      	movs	r0, #1
    d4e0:	f002 fee7 	bl	102b2 <nrfx_busy_wait>
    d4e4:	3d01      	subs	r5, #1
    d4e6:	d1f6      	bne.n	d4d6 <clock_stop+0xee>
    d4e8:	e022      	b.n	d530 <clock_stop+0x148>
    switch (domain)
    d4ea:	f242 7510 	movw	r5, #10000	; 0x2710
    d4ee:	4e1c      	ldr	r6, [pc, #112]	; (d560 <clock_stop+0x178>)
    d4f0:	e7e6      	b.n	d4c0 <clock_stop+0xd8>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    d4f2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    d4f6:	03d8      	lsls	r0, r3, #15
    d4f8:	d51a      	bpl.n	d530 <clock_stop+0x148>
    d4fa:	2001      	movs	r0, #1
    d4fc:	f002 fed9 	bl	102b2 <nrfx_busy_wait>
    d500:	3d01      	subs	r5, #1
    d502:	d1f6      	bne.n	d4f2 <clock_stop+0x10a>
    d504:	e014      	b.n	d530 <clock_stop+0x148>
    switch (domain)
    d506:	f242 7510 	movw	r5, #10000	; 0x2710
    d50a:	4e15      	ldr	r6, [pc, #84]	; (d560 <clock_stop+0x178>)
            if (p_clk_src != NULL)
    d50c:	b194      	cbz	r4, d534 <clock_stop+0x14c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    d50e:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    d512:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    d516:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    d518:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    d51c:	03d9      	lsls	r1, r3, #15
    d51e:	d507      	bpl.n	d530 <clock_stop+0x148>
    d520:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d524:	2801      	cmp	r0, #1
    d526:	d103      	bne.n	d530 <clock_stop+0x148>
    d528:	f002 fec3 	bl	102b2 <nrfx_busy_wait>
    d52c:	3d01      	subs	r5, #1
    d52e:	d1ed      	bne.n	d50c <clock_stop+0x124>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    d530:	b002      	add	sp, #8
    d532:	bd70      	pop	{r4, r5, r6, pc}
    d534:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    d538:	03da      	lsls	r2, r3, #15
    d53a:	d5f9      	bpl.n	d530 <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    d53c:	2001      	movs	r0, #1
    d53e:	f002 feb8 	bl	102b2 <nrfx_busy_wait>
    d542:	3d01      	subs	r5, #1
    d544:	d1f6      	bne.n	d534 <clock_stop+0x14c>
    d546:	e7f3      	b.n	d530 <clock_stop+0x148>
    switch (domain)
    d548:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    d54c:	4e04      	ldr	r6, [pc, #16]	; (d560 <clock_stop+0x178>)
    d54e:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    d552:	03db      	lsls	r3, r3, #15
    d554:	d5ec      	bpl.n	d530 <clock_stop+0x148>
    d556:	2c00      	cmp	r4, #0
    d558:	d1a1      	bne.n	d49e <clock_stop+0xb6>
    d55a:	2001      	movs	r0, #1
    d55c:	e7a3      	b.n	d4a6 <clock_stop+0xbe>
    d55e:	bf00      	nop
    d560:	40005000 	.word	0x40005000

0000d564 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    d564:	4b04      	ldr	r3, [pc, #16]	; (d578 <nrfx_clock_init+0x14>)
    d566:	791a      	ldrb	r2, [r3, #4]
    d568:	b922      	cbnz	r2, d574 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    d56a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    d56c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    d56e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    d570:	4802      	ldr	r0, [pc, #8]	; (d57c <nrfx_clock_init+0x18>)
    d572:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    d574:	4802      	ldr	r0, [pc, #8]	; (d580 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    d576:	4770      	bx	lr
    d578:	200084d0 	.word	0x200084d0
    d57c:	0bad0000 	.word	0x0bad0000
    d580:	0bad000c 	.word	0x0bad000c

0000d584 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    d584:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    d586:	2005      	movs	r0, #5
    d588:	f7fd fa80 	bl	aa8c <arch_irq_is_enabled>
    d58c:	b910      	cbnz	r0, d594 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    d58e:	2005      	movs	r0, #5
    d590:	f7fd fa5a 	bl	aa48 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    d594:	2201      	movs	r2, #1
    d596:	4b04      	ldr	r3, [pc, #16]	; (d5a8 <nrfx_clock_enable+0x24>)
    d598:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
    d59c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    d5a0:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    d5a4:	bd08      	pop	{r3, pc}
    d5a6:	bf00      	nop
    d5a8:	40005000 	.word	0x40005000

0000d5ac <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    d5ac:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    d5ae:	2803      	cmp	r0, #3
    d5b0:	d818      	bhi.n	d5e4 <nrfx_clock_start+0x38>
    d5b2:	e8df f000 	tbb	[pc, r0]
    d5b6:	3002      	.short	0x3002
    d5b8:	483b      	.short	0x483b
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d5ba:	4a29      	ldr	r2, [pc, #164]	; (d660 <nrfx_clock_start+0xb4>)
    d5bc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d5c0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    d5c4:	03c9      	lsls	r1, r1, #15
    d5c6:	d40e      	bmi.n	d5e6 <nrfx_clock_start+0x3a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    d5c8:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    d5cc:	07db      	lsls	r3, r3, #31
    d5ce:	d513      	bpl.n	d5f8 <nrfx_clock_start+0x4c>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    d5d0:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    d5d4:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    d5d8:	3b01      	subs	r3, #1
    d5da:	2b01      	cmp	r3, #1
    d5dc:	d809      	bhi.n	d5f2 <nrfx_clock_start+0x46>
    p_reg->INTENSET = mask;
    d5de:	2302      	movs	r3, #2
    d5e0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    d5e4:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d5e6:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    d5ea:	2b02      	cmp	r3, #2
    d5ec:	d005      	beq.n	d5fa <nrfx_clock_start+0x4e>
    d5ee:	2b01      	cmp	r3, #1
    d5f0:	d002      	beq.n	d5f8 <nrfx_clock_start+0x4c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    d5f2:	2000      	movs	r0, #0
    d5f4:	f7ff fef8 	bl	d3e8 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    d5f8:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    d5fa:	4a19      	ldr	r2, [pc, #100]	; (d660 <nrfx_clock_start+0xb4>)
    d5fc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d600:	2300      	movs	r3, #0
    d602:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    d606:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    d60a:	2302      	movs	r3, #2
    d60c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d610:	2301      	movs	r3, #1
    d612:	6093      	str	r3, [r2, #8]
}
    d614:	e7e6      	b.n	d5e4 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d616:	2200      	movs	r2, #0
    d618:	4b11      	ldr	r3, [pc, #68]	; (d660 <nrfx_clock_start+0xb4>)
    d61a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    d61e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    d622:	2201      	movs	r2, #1
    d624:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d628:	601a      	str	r2, [r3, #0]
}
    d62a:	e7db      	b.n	d5e4 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d62c:	2200      	movs	r2, #0
    d62e:	4b0c      	ldr	r3, [pc, #48]	; (d660 <nrfx_clock_start+0xb4>)
    d630:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    d634:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    d638:	f44f 7200 	mov.w	r2, #512	; 0x200
    d63c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d640:	2201      	movs	r2, #1
    d642:	621a      	str	r2, [r3, #32]
}
    d644:	e7ce      	b.n	d5e4 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d646:	2200      	movs	r2, #0
    d648:	4b05      	ldr	r3, [pc, #20]	; (d660 <nrfx_clock_start+0xb4>)
    d64a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    d64e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    d652:	f44f 7280 	mov.w	r2, #256	; 0x100
    d656:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d65a:	2201      	movs	r2, #1
    d65c:	619a      	str	r2, [r3, #24]
}
    d65e:	e7c1      	b.n	d5e4 <nrfx_clock_start+0x38>
    d660:	40005000 	.word	0x40005000

0000d664 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    d664:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d666:	4b28      	ldr	r3, [pc, #160]	; (d708 <nrfx_power_clock_irq_handler+0xa4>)
    d668:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    d66c:	b152      	cbz	r2, d684 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d66e:	2000      	movs	r0, #0
    d670:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    d674:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    d678:	2201      	movs	r2, #1
    d67a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    d67e:	4b23      	ldr	r3, [pc, #140]	; (d70c <nrfx_power_clock_irq_handler+0xa8>)
    d680:	681b      	ldr	r3, [r3, #0]
    d682:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d684:	4b20      	ldr	r3, [pc, #128]	; (d708 <nrfx_power_clock_irq_handler+0xa4>)
    d686:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    d68a:	b18a      	cbz	r2, d6b0 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d68c:	2200      	movs	r2, #0
    d68e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    d692:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d696:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d69a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    d69e:	f002 0203 	and.w	r2, r2, #3
    d6a2:	2a01      	cmp	r2, #1
    d6a4:	f04f 0102 	mov.w	r1, #2
    d6a8:	d126      	bne.n	d6f8 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
    d6aa:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d6ae:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d6b0:	4b15      	ldr	r3, [pc, #84]	; (d708 <nrfx_power_clock_irq_handler+0xa4>)
    d6b2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    d6b6:	b162      	cbz	r2, d6d2 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d6b8:	2200      	movs	r2, #0
    d6ba:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    d6be:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    d6c2:	f44f 7280 	mov.w	r2, #256	; 0x100
    d6c6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    d6ca:	4b10      	ldr	r3, [pc, #64]	; (d70c <nrfx_power_clock_irq_handler+0xa8>)
    d6cc:	2004      	movs	r0, #4
    d6ce:	681b      	ldr	r3, [r3, #0]
    d6d0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d6d2:	4b0d      	ldr	r3, [pc, #52]	; (d708 <nrfx_power_clock_irq_handler+0xa4>)
    d6d4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    d6d8:	b1aa      	cbz	r2, d706 <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d6da:	2200      	movs	r2, #0
    d6dc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    d6e0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    d6e4:	f44f 7200 	mov.w	r2, #512	; 0x200
    d6e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    d6ec:	4b07      	ldr	r3, [pc, #28]	; (d70c <nrfx_power_clock_irq_handler+0xa8>)
    d6ee:	2005      	movs	r0, #5
    }
#endif
}
    d6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    d6f4:	681b      	ldr	r3, [r3, #0]
    d6f6:	4718      	bx	r3
    d6f8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    d6fc:	4b03      	ldr	r3, [pc, #12]	; (d70c <nrfx_power_clock_irq_handler+0xa8>)
    d6fe:	2001      	movs	r0, #1
    d700:	681b      	ldr	r3, [r3, #0]
    d702:	4798      	blx	r3
    d704:	e7d4      	b.n	d6b0 <nrfx_power_clock_irq_handler+0x4c>
}
    d706:	bd10      	pop	{r4, pc}
    d708:	40005000 	.word	0x40005000
    d70c:	200084d0 	.word	0x200084d0

0000d710 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    d710:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    d712:	4801      	ldr	r0, [pc, #4]	; (d718 <nrfx_dppi_channel_alloc+0x8>)
    d714:	f7ff be30 	b.w	d378 <nrfx_flag32_alloc>
    d718:	200080a4 	.word	0x200080a4

0000d71c <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
    d71c:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
    d71e:	4a04      	ldr	r2, [pc, #16]	; (d730 <nrfx_dppi_channel_free+0x14>)
    d720:	4083      	lsls	r3, r0
{
    d722:	4601      	mov	r1, r0
    d724:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
    d728:	4802      	ldr	r0, [pc, #8]	; (d734 <nrfx_dppi_channel_free+0x18>)
    d72a:	f7ff be41 	b.w	d3b0 <nrfx_flag32_free>
    d72e:	bf00      	nop
    d730:	40017000 	.word	0x40017000
    d734:	200080a4 	.word	0x200080a4

0000d738 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    d738:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    d73a:	f003 021f 	and.w	r2, r3, #31
    d73e:	6002      	str	r2, [r0, #0]
}
    d740:	4a03      	ldr	r2, [pc, #12]	; (d750 <nrf_gpio_pin_port_decode+0x18>)
    d742:	4804      	ldr	r0, [pc, #16]	; (d754 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    d744:	095b      	lsrs	r3, r3, #5
}
    d746:	2b01      	cmp	r3, #1
    d748:	bf18      	it	ne
    d74a:	4610      	movne	r0, r2
    d74c:	4770      	bx	lr
    d74e:	bf00      	nop
    d750:	40842500 	.word	0x40842500
    d754:	40842800 	.word	0x40842800

0000d758 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    d758:	4b03      	ldr	r3, [pc, #12]	; (d768 <pin_in_use_by_te+0x10>)
    d75a:	3008      	adds	r0, #8
    d75c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    d760:	f3c0 1040 	ubfx	r0, r0, #5, #1
    d764:	4770      	bx	lr
    d766:	bf00      	nop
    d768:	200080a8 	.word	0x200080a8

0000d76c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    d76c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    d76e:	4c0d      	ldr	r4, [pc, #52]	; (d7a4 <call_handler+0x38>)
    d770:	f100 0308 	add.w	r3, r0, #8
    d774:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    d778:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    d77a:	05da      	lsls	r2, r3, #23
{
    d77c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    d77e:	d507      	bpl.n	d790 <call_handler+0x24>
    d780:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    d784:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    d788:	6852      	ldr	r2, [r2, #4]
    d78a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    d78e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    d790:	68a3      	ldr	r3, [r4, #8]
    d792:	b12b      	cbz	r3, d7a0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    d794:	4631      	mov	r1, r6
    d796:	4628      	mov	r0, r5
    d798:	68e2      	ldr	r2, [r4, #12]
    }
}
    d79a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    d79e:	4718      	bx	r3
}
    d7a0:	bd70      	pop	{r4, r5, r6, pc}
    d7a2:	bf00      	nop
    d7a4:	200080a8 	.word	0x200080a8

0000d7a8 <release_handler>:
{
    d7a8:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    d7aa:	4a12      	ldr	r2, [pc, #72]	; (d7f4 <release_handler+0x4c>)
    d7ac:	3008      	adds	r0, #8
    d7ae:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    d7b2:	05d9      	lsls	r1, r3, #23
    d7b4:	d51b      	bpl.n	d7ee <release_handler+0x46>
    d7b6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    d7ba:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    d7be:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    d7c2:	2000      	movs	r0, #0
    d7c4:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    d7c8:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    d7cc:	f413 7f80 	tst.w	r3, #256	; 0x100
    d7d0:	d003      	beq.n	d7da <release_handler+0x32>
    d7d2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    d7d6:	4299      	cmp	r1, r3
    d7d8:	d009      	beq.n	d7ee <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    d7da:	3001      	adds	r0, #1
    d7dc:	2830      	cmp	r0, #48	; 0x30
    d7de:	d1f3      	bne.n	d7c8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    d7e0:	2300      	movs	r3, #0
    d7e2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    d7e6:	4804      	ldr	r0, [pc, #16]	; (d7f8 <release_handler+0x50>)
}
    d7e8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    d7ea:	f7ff bde1 	b.w	d3b0 <nrfx_flag32_free>
}
    d7ee:	bc10      	pop	{r4}
    d7f0:	4770      	bx	lr
    d7f2:	bf00      	nop
    d7f4:	200080a8 	.word	0x200080a8
    d7f8:	2000811c 	.word	0x2000811c

0000d7fc <pin_handler_trigger_uninit>:
{
    d7fc:	b538      	push	{r3, r4, r5, lr}
    d7fe:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    d800:	f7ff ffaa 	bl	d758 <pin_in_use_by_te>
    d804:	4c0b      	ldr	r4, [pc, #44]	; (d834 <pin_handler_trigger_uninit+0x38>)
    d806:	f102 0508 	add.w	r5, r2, #8
    d80a:	b160      	cbz	r0, d826 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    d80c:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d80e:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    d812:	0b5b      	lsrs	r3, r3, #13
    d814:	009b      	lsls	r3, r3, #2
    d816:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d81a:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    d81e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
    d822:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    d826:	4610      	mov	r0, r2
    d828:	f7ff ffbe 	bl	d7a8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    d82c:	2300      	movs	r3, #0
    d82e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    d832:	bd38      	pop	{r3, r4, r5, pc}
    d834:	200080a8 	.word	0x200080a8

0000d838 <nrfx_gpiote_input_configure>:
{
    d838:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d83c:	4604      	mov	r4, r0
    d83e:	4690      	mov	r8, r2
    d840:	461d      	mov	r5, r3
    if (p_input_config)
    d842:	b301      	cbz	r1, d886 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d844:	4e4f      	ldr	r6, [pc, #316]	; (d984 <nrfx_gpiote_input_configure+0x14c>)
    d846:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    d84a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    d84e:	079b      	lsls	r3, r3, #30
    d850:	d502      	bpl.n	d858 <nrfx_gpiote_input_configure+0x20>
    d852:	f7ff ff81 	bl	d758 <pin_in_use_by_te>
    d856:	bb28      	cbnz	r0, d8a4 <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    d858:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    d85a:	4620      	mov	r0, r4
    d85c:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    d860:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    d864:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    d868:	f10d 020f 	add.w	r2, sp, #15
    d86c:	460b      	mov	r3, r1
    d86e:	f10d 010e 	add.w	r1, sp, #14
    d872:	f002 fd22 	bl	102ba <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    d876:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    d87a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    d87e:	f043 0301 	orr.w	r3, r3, #1
    d882:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
    d886:	f1b8 0f00 	cmp.w	r8, #0
    d88a:	d02d      	beq.n	d8e8 <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d88c:	4e3d      	ldr	r6, [pc, #244]	; (d984 <nrfx_gpiote_input_configure+0x14c>)
    d88e:	f104 0708 	add.w	r7, r4, #8
    d892:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    d896:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
    d89a:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    d89c:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
    d8a0:	d502      	bpl.n	d8a8 <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
    d8a2:	b1cb      	cbz	r3, d8d8 <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
    d8a4:	4838      	ldr	r0, [pc, #224]	; (d988 <nrfx_gpiote_input_configure+0x150>)
    d8a6:	e021      	b.n	d8ec <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    d8a8:	f021 0120 	bic.w	r1, r1, #32
    d8ac:	04c9      	lsls	r1, r1, #19
    d8ae:	0cc9      	lsrs	r1, r1, #19
    d8b0:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    d8b4:	b183      	cbz	r3, d8d8 <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
    d8b6:	2803      	cmp	r0, #3
    d8b8:	d8f4      	bhi.n	d8a4 <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
    d8ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
    d8be:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    d8c2:	4662      	mov	r2, ip
    d8c4:	0092      	lsls	r2, r2, #2
    d8c6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    d8ca:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
    d8ce:	b980      	cbnz	r0, d8f2 <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
    d8d0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    d8d4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    d8d8:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    d8dc:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    d8e0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    d8e4:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    d8e8:	bb1d      	cbnz	r5, d932 <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
    d8ea:	4828      	ldr	r0, [pc, #160]	; (d98c <nrfx_gpiote_input_configure+0x154>)
}
    d8ec:	b004      	add	sp, #16
    d8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    d8f2:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    d8f6:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    d8fa:	f023 0303 	bic.w	r3, r3, #3
    d8fe:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    d902:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    d906:	f041 0120 	orr.w	r1, r1, #32
    d90a:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
    d90e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d912:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d916:	0223      	lsls	r3, r4, #8
    d918:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    d91c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    d920:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    d924:	ea43 030e 	orr.w	r3, r3, lr
    d928:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    d92c:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    d930:	e7d2      	b.n	d8d8 <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
    d932:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    d934:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    d938:	f7ff ff36 	bl	d7a8 <release_handler>
    if (!handler)
    d93c:	2e00      	cmp	r6, #0
    d93e:	d0d4      	beq.n	d8ea <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    d940:	4d10      	ldr	r5, [pc, #64]	; (d984 <nrfx_gpiote_input_configure+0x14c>)
    d942:	e9d5 2300 	ldrd	r2, r3, [r5]
    d946:	4296      	cmp	r6, r2
    d948:	d101      	bne.n	d94e <nrfx_gpiote_input_configure+0x116>
    d94a:	429f      	cmp	r7, r3
    d94c:	d018      	beq.n	d980 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    d94e:	4810      	ldr	r0, [pc, #64]	; (d990 <nrfx_gpiote_input_configure+0x158>)
    d950:	f10d 010f 	add.w	r1, sp, #15
    d954:	f7ff fd10 	bl	d378 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    d958:	4b0c      	ldr	r3, [pc, #48]	; (d98c <nrfx_gpiote_input_configure+0x154>)
    d95a:	4298      	cmp	r0, r3
    d95c:	d1c6      	bne.n	d8ec <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
    d95e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    d962:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    d966:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    d968:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    d96a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    d96e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    d972:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    d976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d97a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    d97e:	e7b4      	b.n	d8ea <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    d980:	2200      	movs	r2, #0
    d982:	e7ee      	b.n	d962 <nrfx_gpiote_input_configure+0x12a>
    d984:	200080a8 	.word	0x200080a8
    d988:	0bad0004 	.word	0x0bad0004
    d98c:	0bad0000 	.word	0x0bad0000
    d990:	2000811c 	.word	0x2000811c

0000d994 <nrfx_gpiote_output_configure>:
{
    d994:	b5f0      	push	{r4, r5, r6, r7, lr}
    d996:	4604      	mov	r4, r0
    d998:	4615      	mov	r5, r2
    d99a:	b085      	sub	sp, #20
    if (p_config)
    d99c:	b319      	cbz	r1, d9e6 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d99e:	4e34      	ldr	r6, [pc, #208]	; (da70 <nrfx_gpiote_output_configure+0xdc>)
    d9a0:	f100 0708 	add.w	r7, r0, #8
    d9a4:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    d9a8:	0793      	lsls	r3, r2, #30
    d9aa:	d403      	bmi.n	d9b4 <nrfx_gpiote_output_configure+0x20>
    d9ac:	f7ff fed4 	bl	d758 <pin_in_use_by_te>
    d9b0:	2800      	cmp	r0, #0
    d9b2:	d15a      	bne.n	da6a <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    d9b4:	f012 0f1c 	tst.w	r2, #28
    d9b8:	d002      	beq.n	d9c0 <nrfx_gpiote_output_configure+0x2c>
    d9ba:	784b      	ldrb	r3, [r1, #1]
    d9bc:	2b01      	cmp	r3, #1
    d9be:	d054      	beq.n	da6a <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    d9c0:	2301      	movs	r3, #1
    d9c2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    d9c6:	2300      	movs	r3, #0
    d9c8:	1c4a      	adds	r2, r1, #1
    d9ca:	e9cd 1300 	strd	r1, r3, [sp]
    d9ce:	4620      	mov	r0, r4
    d9d0:	1c8b      	adds	r3, r1, #2
    d9d2:	f10d 010f 	add.w	r1, sp, #15
    d9d6:	f002 fc70 	bl	102ba <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    d9da:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    d9de:	f043 0303 	orr.w	r3, r3, #3
    d9e2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    d9e6:	b915      	cbnz	r5, d9ee <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    d9e8:	4822      	ldr	r0, [pc, #136]	; (da74 <nrfx_gpiote_output_configure+0xe0>)
}
    d9ea:	b005      	add	sp, #20
    d9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d9ee:	4e20      	ldr	r6, [pc, #128]	; (da70 <nrfx_gpiote_output_configure+0xdc>)
    d9f0:	f104 0708 	add.w	r7, r4, #8
    d9f4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    d9f8:	0783      	lsls	r3, r0, #30
    d9fa:	d536      	bpl.n	da6a <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
    d9fc:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    da00:	2300      	movs	r3, #0
    da02:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    da04:	f020 0020 	bic.w	r0, r0, #32
    da08:	0089      	lsls	r1, r1, #2
    da0a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    da0e:	04c0      	lsls	r0, r0, #19
    da10:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
    da14:	0cc0      	lsrs	r0, r0, #19
    da16:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    da1a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    da1e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    da22:	786a      	ldrb	r2, [r5, #1]
    da24:	2a00      	cmp	r2, #0
    da26:	d0df      	beq.n	d9e8 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    da28:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    da2c:	78ad      	ldrb	r5, [r5, #2]
    da2e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    da32:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    da36:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    da3a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    da3e:	0223      	lsls	r3, r4, #8
    da40:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    da44:	0412      	lsls	r2, r2, #16
    da46:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    da4a:	ea43 030e 	orr.w	r3, r3, lr
    da4e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    da50:	052a      	lsls	r2, r5, #20
    da52:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    da56:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    da5a:	4313      	orrs	r3, r2
    da5c:	f040 0020 	orr.w	r0, r0, #32
    da60:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    da64:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    da68:	e7be      	b.n	d9e8 <nrfx_gpiote_output_configure+0x54>
{
    da6a:	4803      	ldr	r0, [pc, #12]	; (da78 <nrfx_gpiote_output_configure+0xe4>)
    da6c:	e7bd      	b.n	d9ea <nrfx_gpiote_output_configure+0x56>
    da6e:	bf00      	nop
    da70:	200080a8 	.word	0x200080a8
    da74:	0bad0000 	.word	0x0bad0000
    da78:	0bad0004 	.word	0x0bad0004

0000da7c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    da7c:	4b01      	ldr	r3, [pc, #4]	; (da84 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    da7e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    da82:	4770      	bx	lr
    da84:	200080a8 	.word	0x200080a8

0000da88 <nrfx_gpiote_channel_get>:
{
    da88:	b508      	push	{r3, lr}
    da8a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    da8c:	f7ff fe64 	bl	d758 <pin_in_use_by_te>
    da90:	b138      	cbz	r0, daa2 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    da92:	4b05      	ldr	r3, [pc, #20]	; (daa8 <nrfx_gpiote_channel_get+0x20>)
    da94:	3208      	adds	r2, #8
    da96:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    da9a:	4804      	ldr	r0, [pc, #16]	; (daac <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    da9c:	0b5b      	lsrs	r3, r3, #13
    da9e:	700b      	strb	r3, [r1, #0]
}
    daa0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    daa2:	4803      	ldr	r0, [pc, #12]	; (dab0 <nrfx_gpiote_channel_get+0x28>)
    daa4:	e7fc      	b.n	daa0 <nrfx_gpiote_channel_get+0x18>
    daa6:	bf00      	nop
    daa8:	200080a8 	.word	0x200080a8
    daac:	0bad0000 	.word	0x0bad0000
    dab0:	0bad0004 	.word	0x0bad0004

0000dab4 <nrfx_gpiote_init>:
{
    dab4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    dab6:	4c0f      	ldr	r4, [pc, #60]	; (daf4 <nrfx_gpiote_init+0x40>)
    dab8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    dabc:	b9bd      	cbnz	r5, daee <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    dabe:	2260      	movs	r2, #96	; 0x60
    dac0:	4629      	mov	r1, r5
    dac2:	f104 0010 	add.w	r0, r4, #16
    dac6:	f002 f972 	bl	fdae <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    daca:	202f      	movs	r0, #47	; 0x2f
    dacc:	f7fc ffbc 	bl	aa48 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    dad0:	4b09      	ldr	r3, [pc, #36]	; (daf8 <nrfx_gpiote_init+0x44>)
    return err_code;
    dad2:	480a      	ldr	r0, [pc, #40]	; (dafc <nrfx_gpiote_init+0x48>)
    dad4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    dad8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    dadc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    dae0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    dae4:	2301      	movs	r3, #1
    dae6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    daea:	6763      	str	r3, [r4, #116]	; 0x74
}
    daec:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    daee:	4804      	ldr	r0, [pc, #16]	; (db00 <nrfx_gpiote_init+0x4c>)
    daf0:	e7fc      	b.n	daec <nrfx_gpiote_init+0x38>
    daf2:	bf00      	nop
    daf4:	200080a8 	.word	0x200080a8
    daf8:	4002f000 	.word	0x4002f000
    dafc:	0bad0000 	.word	0x0bad0000
    db00:	0bad0005 	.word	0x0bad0005

0000db04 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    db04:	4b03      	ldr	r3, [pc, #12]	; (db14 <nrfx_gpiote_is_init+0x10>)
    db06:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    db0a:	3800      	subs	r0, #0
    db0c:	bf18      	it	ne
    db0e:	2001      	movne	r0, #1
    db10:	4770      	bx	lr
    db12:	bf00      	nop
    db14:	200080a8 	.word	0x200080a8

0000db18 <nrfx_gpiote_channel_free>:
{
    db18:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    db1a:	4801      	ldr	r0, [pc, #4]	; (db20 <nrfx_gpiote_channel_free+0x8>)
    db1c:	f7ff bc48 	b.w	d3b0 <nrfx_flag32_free>
    db20:	20008118 	.word	0x20008118

0000db24 <nrfx_gpiote_channel_alloc>:
{
    db24:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    db26:	4801      	ldr	r0, [pc, #4]	; (db2c <nrfx_gpiote_channel_alloc+0x8>)
    db28:	f7ff bc26 	b.w	d378 <nrfx_flag32_alloc>
    db2c:	20008118 	.word	0x20008118

0000db30 <nrfx_gpiote_trigger_enable>:
{
    db30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    db32:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    db34:	f7ff fe10 	bl	d758 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    db38:	4b1d      	ldr	r3, [pc, #116]	; (dbb0 <nrfx_gpiote_trigger_enable+0x80>)
    db3a:	f104 0208 	add.w	r2, r4, #8
    db3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    db42:	b1d0      	cbz	r0, db7a <nrfx_gpiote_trigger_enable+0x4a>
    db44:	f013 0502 	ands.w	r5, r3, #2
    db48:	d117      	bne.n	db7a <nrfx_gpiote_trigger_enable+0x4a>
    return ((uint32_t)p_reg + event);
    db4a:	481a      	ldr	r0, [pc, #104]	; (dbb4 <nrfx_gpiote_trigger_enable+0x84>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    db4c:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    db4e:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    db50:	5085      	str	r5, [r0, r2]
    db52:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    db54:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    db58:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
    db5c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    db60:	f040 0001 	orr.w	r0, r0, #1
    db64:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    db68:	b129      	cbz	r1, db76 <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    db6a:	2201      	movs	r2, #1
    db6c:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    db70:	4a11      	ldr	r2, [pc, #68]	; (dbb8 <nrfx_gpiote_trigger_enable+0x88>)
    db72:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    db76:	b003      	add	sp, #12
    db78:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    db7a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    db7e:	2b04      	cmp	r3, #4
    db80:	d011      	beq.n	dba6 <nrfx_gpiote_trigger_enable+0x76>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    db82:	2b05      	cmp	r3, #5
    db84:	d011      	beq.n	dbaa <nrfx_gpiote_trigger_enable+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    db86:	a801      	add	r0, sp, #4
    db88:	9401      	str	r4, [sp, #4]
    db8a:	f7ff fdd5 	bl	d738 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    db8e:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    db90:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    db92:	40d9      	lsrs	r1, r3
    db94:	f001 0101 	and.w	r1, r1, #1
    db98:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    db9a:	4620      	mov	r0, r4
}
    db9c:	b003      	add	sp, #12
    db9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    dba2:	f002 bbd3 	b.w	1034c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    dba6:	2103      	movs	r1, #3
    dba8:	e7f7      	b.n	db9a <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    dbaa:	2102      	movs	r1, #2
    dbac:	e7f5      	b.n	db9a <nrfx_gpiote_trigger_enable+0x6a>
    dbae:	bf00      	nop
    dbb0:	200080a8 	.word	0x200080a8
    dbb4:	4002f100 	.word	0x4002f100
    dbb8:	4002f000 	.word	0x4002f000

0000dbbc <nrfx_gpiote_trigger_disable>:
{
    dbbc:	b508      	push	{r3, lr}
    dbbe:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    dbc0:	f7ff fdca 	bl	d758 <pin_in_use_by_te>
    dbc4:	b1c0      	cbz	r0, dbf8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    dbc6:	4b0f      	ldr	r3, [pc, #60]	; (dc04 <nrfx_gpiote_trigger_disable+0x48>)
    dbc8:	f102 0108 	add.w	r1, r2, #8
    dbcc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    dbd0:	0799      	lsls	r1, r3, #30
    dbd2:	d411      	bmi.n	dbf8 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    dbd4:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    dbd6:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    dbd8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    dbda:	490b      	ldr	r1, [pc, #44]	; (dc08 <nrfx_gpiote_trigger_disable+0x4c>)
    dbdc:	009b      	lsls	r3, r3, #2
    dbde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    dbe2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    dbe6:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    dbea:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    dbee:	f022 0203 	bic.w	r2, r2, #3
    dbf2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    dbf6:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    dbf8:	2100      	movs	r1, #0
}
    dbfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    dbfe:	4610      	mov	r0, r2
    dc00:	f002 bba4 	b.w	1034c <nrf_gpio_cfg_sense_set>
    dc04:	200080a8 	.word	0x200080a8
    dc08:	4002f000 	.word	0x4002f000

0000dc0c <nrfx_gpiote_pin_uninit>:
{
    dc0c:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    dc0e:	4b10      	ldr	r3, [pc, #64]	; (dc50 <nrfx_gpiote_pin_uninit+0x44>)
    dc10:	f100 0208 	add.w	r2, r0, #8
    dc14:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    dc18:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    dc1a:	07db      	lsls	r3, r3, #31
    dc1c:	d516      	bpl.n	dc4c <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
    dc1e:	f7ff ffcd 	bl	dbbc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    dc22:	4620      	mov	r0, r4
    dc24:	f7ff fdea 	bl	d7fc <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    dc28:	a801      	add	r0, sp, #4
    dc2a:	9401      	str	r4, [sp, #4]
    dc2c:	f7ff fd84 	bl	d738 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    dc30:	9b01      	ldr	r3, [sp, #4]
    dc32:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    dc36:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    dc3a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    dc3e:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    dc42:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
    dc46:	4803      	ldr	r0, [pc, #12]	; (dc54 <nrfx_gpiote_pin_uninit+0x48>)
}
    dc48:	b002      	add	sp, #8
    dc4a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    dc4c:	4802      	ldr	r0, [pc, #8]	; (dc58 <nrfx_gpiote_pin_uninit+0x4c>)
    dc4e:	e7fb      	b.n	dc48 <nrfx_gpiote_pin_uninit+0x3c>
    dc50:	200080a8 	.word	0x200080a8
    dc54:	0bad0000 	.word	0x0bad0000
    dc58:	0bad0004 	.word	0x0bad0004

0000dc5c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    dc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    dc60:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    dc62:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    dc64:	4634      	mov	r4, r6
{
    dc66:	4b63      	ldr	r3, [pc, #396]	; (ddf4 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    dc68:	4863      	ldr	r0, [pc, #396]	; (ddf8 <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    dc6a:	4964      	ldr	r1, [pc, #400]	; (ddfc <nrfx_gpiote_irq_handler+0x1a0>)
{
    dc6c:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dc6e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    dc70:	b135      	cbz	r5, dc80 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    dc72:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    dc76:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    dc78:	bf1e      	ittt	ne
    dc7a:	601c      	strne	r4, [r3, #0]
    dc7c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    dc7e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    dc80:	3304      	adds	r3, #4
    dc82:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    dc84:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    dc88:	d1f1      	bne.n	dc6e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dc8a:	f8df a16c 	ldr.w	sl, [pc, #364]	; ddf8 <nrfx_gpiote_irq_handler+0x19c>
    dc8e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    dc92:	2b00      	cmp	r3, #0
    dc94:	f000 8091 	beq.w	ddba <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    dc98:	f8df 8164 	ldr.w	r8, [pc, #356]	; de00 <nrfx_gpiote_irq_handler+0x1a4>
    dc9c:	f8d8 3020 	ldr.w	r3, [r8, #32]
    dca0:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    dca2:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    dca6:	4b57      	ldr	r3, [pc, #348]	; (de04 <nrfx_gpiote_irq_handler+0x1a8>)
    dca8:	6a1a      	ldr	r2, [r3, #32]
    dcaa:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    dcac:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    dcae:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
    dcb2:	f10d 0b10 	add.w	fp, sp, #16
    dcb6:	ea4f 1349 	mov.w	r3, r9, lsl #5
    dcba:	9300      	str	r3, [sp, #0]
    dcbc:	e048      	b.n	dd50 <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
    dcbe:	fa94 f4a4 	rbit	r4, r4
    dcc2:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    dcc6:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    dcc8:	4a4f      	ldr	r2, [pc, #316]	; (de08 <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
    dcca:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    dccc:	f104 0308 	add.w	r3, r4, #8
    dcd0:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    dcd4:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    dcd6:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    dcd8:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    dcdc:	fa03 f202 	lsl.w	r2, r3, r2
    dce0:	f81b 3000 	ldrb.w	r3, [fp, r0]
    dce4:	9403      	str	r4, [sp, #12]
    dce6:	ea23 0302 	bic.w	r3, r3, r2
    dcea:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    dcee:	a803      	add	r0, sp, #12
    dcf0:	f7ff fd22 	bl	d738 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    dcf4:	9b03      	ldr	r3, [sp, #12]
    dcf6:	08b9      	lsrs	r1, r7, #2
    dcf8:	3380      	adds	r3, #128	; 0x80
    dcfa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    dcfe:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    dd02:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    dd04:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    dd06:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    dd0a:	d52b      	bpl.n	dd64 <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
    dd0c:	4620      	mov	r0, r4
    dd0e:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    dd10:	b2dd      	uxtb	r5, r3
    dd12:	f7ff fd2b 	bl	d76c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    dd16:	a803      	add	r0, sp, #12
    dd18:	9403      	str	r4, [sp, #12]
    dd1a:	f7ff fd0d 	bl	d738 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    dd1e:	9b03      	ldr	r3, [sp, #12]
    dd20:	3380      	adds	r3, #128	; 0x80
    dd22:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    dd26:	f3c3 4301 	ubfx	r3, r3, #16, #2
    dd2a:	429d      	cmp	r5, r3
    dd2c:	d107      	bne.n	dd3e <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    dd2e:	2100      	movs	r1, #0
    dd30:	4620      	mov	r0, r4
    dd32:	f002 fb0b 	bl	1034c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    dd36:	4629      	mov	r1, r5
    dd38:	4620      	mov	r0, r4
    dd3a:	f002 fb07 	bl	1034c <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    dd3e:	a803      	add	r0, sp, #12
    dd40:	9403      	str	r4, [sp, #12]
    dd42:	f7ff fcf9 	bl	d738 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    dd46:	2201      	movs	r2, #1
    dd48:	9b03      	ldr	r3, [sp, #12]
    dd4a:	fa02 f303 	lsl.w	r3, r2, r3
    dd4e:	6203      	str	r3, [r0, #32]
            while (latch[i])
    dd50:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
    dd54:	2c00      	cmp	r4, #0
    dd56:	d1b2      	bne.n	dcbe <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    dd58:	f1b9 0f00 	cmp.w	r9, #0
    dd5c:	d11d      	bne.n	dd9a <nrfx_gpiote_irq_handler+0x13e>
    dd5e:	f04f 0901 	mov.w	r9, #1
    dd62:	e7a8      	b.n	dcb6 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    dd64:	2b02      	cmp	r3, #2
    dd66:	d10c      	bne.n	dd82 <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    dd68:	2103      	movs	r1, #3
    dd6a:	4620      	mov	r0, r4
    dd6c:	f002 faee 	bl	1034c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    dd70:	f005 0305 	and.w	r3, r5, #5
    dd74:	2b01      	cmp	r3, #1
    dd76:	d1e2      	bne.n	dd3e <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
    dd78:	4639      	mov	r1, r7
    dd7a:	4620      	mov	r0, r4
    dd7c:	f7ff fcf6 	bl	d76c <call_handler>
    dd80:	e7dd      	b.n	dd3e <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    dd82:	2102      	movs	r1, #2
    dd84:	4620      	mov	r0, r4
    dd86:	9301      	str	r3, [sp, #4]
    dd88:	f002 fae0 	bl	1034c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    dd8c:	2d03      	cmp	r5, #3
    dd8e:	d0f3      	beq.n	dd78 <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    dd90:	9b01      	ldr	r3, [sp, #4]
    dd92:	2b03      	cmp	r3, #3
    dd94:	d1d3      	bne.n	dd3e <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    dd96:	2d02      	cmp	r5, #2
    dd98:	e7ed      	b.n	dd76 <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    dd9a:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
    dd9e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    dda2:	f8d8 3020 	ldr.w	r3, [r8, #32]
    dda6:	4917      	ldr	r1, [pc, #92]	; (de04 <nrfx_gpiote_irq_handler+0x1a8>)
    dda8:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    ddaa:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    ddae:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
    ddb0:	4313      	orrs	r3, r2
    ddb2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    ddb4:	620a      	str	r2, [r1, #32]
    ddb6:	f47f af7a 	bne.w	dcae <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
    ddba:	2401      	movs	r4, #1
    while (mask)
    ddbc:	b916      	cbnz	r6, ddc4 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    ddbe:	b007      	add	sp, #28
    ddc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    ddc4:	fa96 f3a6 	rbit	r3, r6
    ddc8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    ddcc:	fa04 f203 	lsl.w	r2, r4, r3
    ddd0:	009b      	lsls	r3, r3, #2
    ddd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ddd6:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    ddda:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    ddde:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    dde2:	f3c0 2005 	ubfx	r0, r0, #8, #6
    dde6:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    ddea:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    ddee:	f7ff fcbd 	bl	d76c <call_handler>
    ddf2:	e7e3      	b.n	ddbc <nrfx_gpiote_irq_handler+0x160>
    ddf4:	4002f100 	.word	0x4002f100
    ddf8:	4002f000 	.word	0x4002f000
    ddfc:	4002f120 	.word	0x4002f120
    de00:	40842500 	.word	0x40842500
    de04:	40842800 	.word	0x40842800
    de08:	200080a8 	.word	0x200080a8

0000de0c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    de0c:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    de0e:	4c08      	ldr	r4, [pc, #32]	; (de30 <nrfx_ipc_init+0x24>)
{
    de10:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    de12:	7923      	ldrb	r3, [r4, #4]
{
    de14:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    de16:	b943      	cbnz	r3, de2a <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
    de18:	202a      	movs	r0, #42	; 0x2a
    de1a:	f7fc fe15 	bl	aa48 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    de1e:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
    de20:	4804      	ldr	r0, [pc, #16]	; (de34 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    de22:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
    de24:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
    de26:	60a5      	str	r5, [r4, #8]
}
    de28:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    de2a:	4803      	ldr	r0, [pc, #12]	; (de38 <nrfx_ipc_init+0x2c>)
    de2c:	e7fc      	b.n	de28 <nrfx_ipc_init+0x1c>
    de2e:	bf00      	nop
    de30:	200084d8 	.word	0x200084d8
    de34:	0bad0000 	.word	0x0bad0000
    de38:	0bad000c 	.word	0x0bad000c

0000de3c <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    de3c:	2300      	movs	r3, #0
{
    de3e:	b530      	push	{r4, r5, lr}
    p_reg->SEND_CNF[index] = channels_mask;
    de40:	4a0d      	ldr	r2, [pc, #52]	; (de78 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    de42:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    de46:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
    de4a:	3301      	adds	r3, #1
    de4c:	2b10      	cmp	r3, #16
    de4e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
    de52:	d1f6      	bne.n	de42 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    de54:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
    de56:	4a08      	ldr	r2, [pc, #32]	; (de78 <nrfx_ipc_config_load+0x3c>)
    de58:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    de5c:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    de60:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
    de64:	3301      	adds	r3, #1
    de66:	2b10      	cmp	r3, #16
    de68:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    de6c:	d1f6      	bne.n	de5c <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    de6e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
    de72:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    de76:	bd30      	pop	{r4, r5, pc}
    de78:	4002a000 	.word	0x4002a000

0000de7c <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    de7c:	2301      	movs	r3, #1
    de7e:	4a02      	ldr	r2, [pc, #8]	; (de88 <nrfx_ipc_receive_event_enable+0xc>)
    de80:	4083      	lsls	r3, r0
    de82:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    de86:	4770      	bx	lr
    de88:	4002a000 	.word	0x4002a000

0000de8c <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    de8c:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
    de8e:	4a02      	ldr	r2, [pc, #8]	; (de98 <nrfx_ipc_receive_event_disable+0xc>)
    de90:	4083      	lsls	r3, r0
    de92:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    de96:	4770      	bx	lr
    de98:	4002a000 	.word	0x4002a000

0000de9c <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    de9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
    de9e:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dea0:	2700      	movs	r7, #0
    return p_reg->INTPEND;
    dea2:	4b0b      	ldr	r3, [pc, #44]	; (ded0 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
    dea4:	4d0b      	ldr	r5, [pc, #44]	; (ded4 <nrfx_ipc_irq_handler+0x38>)
    dea6:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
    deaa:	b904      	cbnz	r4, deae <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
    deac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
    deae:	fa94 f0a4 	rbit	r0, r4
    deb2:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
    deb6:	fa06 f300 	lsl.w	r3, r6, r0
    deba:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    debe:	4b06      	ldr	r3, [pc, #24]	; (ded8 <nrfx_ipc_irq_handler+0x3c>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    dec0:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dec2:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
    dec4:	682b      	ldr	r3, [r5, #0]
    dec6:	2b00      	cmp	r3, #0
    dec8:	d0ef      	beq.n	deaa <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
    deca:	68a9      	ldr	r1, [r5, #8]
    decc:	4798      	blx	r3
    dece:	e7ec      	b.n	deaa <nrfx_ipc_irq_handler+0xe>
    ded0:	4002a000 	.word	0x4002a000
    ded4:	200084d8 	.word	0x200084d8
    ded8:	4002a100 	.word	0x4002a100

0000dedc <nvmc_word_write>:
    dedc:	4a04      	ldr	r2, [pc, #16]	; (def0 <nvmc_word_write+0x14>)
    dede:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF91_SERIES)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    dee2:	07db      	lsls	r3, r3, #31
    dee4:	d5fb      	bpl.n	dede <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    dee6:	6001      	str	r1, [r0, #0]
    dee8:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    deec:	4770      	bx	lr
    deee:	bf00      	nop
    def0:	40039000 	.word	0x40039000

0000def4 <nrfx_nvmc_page_erase>:
    return !(addr % flash_page_size_get());
    def4:	f3c0 030b 	ubfx	r3, r0, #0, #12

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    def8:	b97b      	cbnz	r3, df1a <nrfx_nvmc_page_erase+0x26>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    defa:	2202      	movs	r2, #2
    defc:	4b08      	ldr	r3, [pc, #32]	; (df20 <nrfx_nvmc_page_erase+0x2c>)
    defe:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF53_SERIES) || defined(NRF91_SERIES)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    df02:	f04f 32ff 	mov.w	r2, #4294967295
    df06:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    df08:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    df0c:	07d2      	lsls	r2, r2, #31
    df0e:	d5fb      	bpl.n	df08 <nrfx_nvmc_page_erase+0x14>
    p_reg->CONFIGNS = (uint32_t)mode;
    df10:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
    df12:	4804      	ldr	r0, [pc, #16]	; (df24 <nrfx_nvmc_page_erase+0x30>)
    df14:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    df18:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
    df1a:	4803      	ldr	r0, [pc, #12]	; (df28 <nrfx_nvmc_page_erase+0x34>)
}
    df1c:	4770      	bx	lr
    df1e:	bf00      	nop
    df20:	40039000 	.word	0x40039000
    df24:	0bad0000 	.word	0x0bad0000
    df28:	0bad000a 	.word	0x0bad000a

0000df2c <nrfx_nvmc_word_write>:
    df2c:	2301      	movs	r3, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    df2e:	b510      	push	{r4, lr}
    df30:	4c04      	ldr	r4, [pc, #16]	; (df44 <nrfx_nvmc_word_write+0x18>)
    df32:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    df36:	f7ff ffd1 	bl	dedc <nvmc_word_write>
    df3a:	2300      	movs	r3, #0
    df3c:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
    df40:	bd10      	pop	{r4, pc}
    df42:	bf00      	nop
    df44:	40039000 	.word	0x40039000

0000df48 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
    df48:	b570      	push	{r4, r5, r6, lr}
    df4a:	f000 4460 	and.w	r4, r0, #3758096384	; 0xe0000000
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
    NRFX_ASSERT(p_buffer != NULL);

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
    df4e:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
    df52:	d168      	bne.n	e026 <qspi_xfer+0xde>
    df54:	0784      	lsls	r4, r0, #30
    df56:	d166      	bne.n	e026 <qspi_xfer+0xde>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
    df58:	4d35      	ldr	r5, [pc, #212]	; (e030 <qspi_xfer+0xe8>)
    df5a:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
    df5e:	2c01      	cmp	r4, #1
    df60:	d001      	beq.n	df66 <qspi_xfer+0x1e>
    df62:	429c      	cmp	r4, r3
    df64:	d161      	bne.n	e02a <qspi_xfer+0xe2>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
    df66:	682c      	ldr	r4, [r5, #0]
    df68:	bb04      	cbnz	r4, dfac <qspi_xfer+0x64>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    df6a:	2b02      	cmp	r3, #2
    df6c:	4b31      	ldr	r3, [pc, #196]	; (e034 <qspi_xfer+0xec>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
    df6e:	bf0b      	itete	eq
    df70:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
    df74:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    df78:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
    df7c:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
    df80:	bf0b      	itete	eq
    df82:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
    df86:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
    df8a:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
    df8c:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    df8e:	2100      	movs	r1, #0
    df90:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    df94:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    df98:	2201      	movs	r2, #1
    df9a:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    df9e:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dfa0:	4a24      	ldr	r2, [pc, #144]	; (e034 <qspi_xfer+0xec>)
    dfa2:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    dfa6:	2b00      	cmp	r3, #0
    dfa8:	d0fb      	beq.n	dfa2 <qspi_xfer+0x5a>
    dfaa:	e00d      	b.n	dfc8 <qspi_xfer+0x80>
        if (m_cb.p_buffer_primary)
    dfac:	68ae      	ldr	r6, [r5, #8]
    dfae:	4c21      	ldr	r4, [pc, #132]	; (e034 <qspi_xfer+0xec>)
    dfb0:	b166      	cbz	r6, dfcc <qspi_xfer+0x84>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    dfb2:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
    dfb4:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
    dfb6:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
    dfb8:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    dfba:	d12d      	bne.n	e018 <qspi_xfer+0xd0>
    p_reg->WRITE.DST = dest_addr;
    dfbc:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    dfc0:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
    dfc4:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
    dfc8:	481b      	ldr	r0, [pc, #108]	; (e038 <qspi_xfer+0xf0>)
}
    dfca:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    dfcc:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
    dfce:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
    dfd2:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
    dfd4:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
    dfd6:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
    dfd8:	bf0c      	ite	eq
    dfda:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
    dfde:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dfe2:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    dfe6:	bf0b      	itete	eq
    dfe8:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
    dfec:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
    dff0:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
    dff4:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
    dff8:	bf08      	it	eq
    dffa:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dffc:	490d      	ldr	r1, [pc, #52]	; (e034 <qspi_xfer+0xec>)
        task = NRF_QSPI_TASK_READSTART;
    dffe:	bf18      	it	ne
    e000:	2304      	movne	r3, #4
    e002:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
    e006:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e008:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e00c:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
    e010:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e014:	601a      	str	r2, [r3, #0]
}
    e016:	e7d7      	b.n	dfc8 <qspi_xfer+0x80>
    p_reg->READ.SRC = src_addr;
    e018:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
    e01c:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
    e020:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
    e024:	e7d0      	b.n	dfc8 <qspi_xfer+0x80>
        return NRFX_ERROR_INVALID_ADDR;
    e026:	4805      	ldr	r0, [pc, #20]	; (e03c <qspi_xfer+0xf4>)
    e028:	e7cf      	b.n	dfca <qspi_xfer+0x82>
        return NRFX_ERROR_BUSY;
    e02a:	4805      	ldr	r0, [pc, #20]	; (e040 <qspi_xfer+0xf8>)
    e02c:	e7cd      	b.n	dfca <qspi_xfer+0x82>
    e02e:	bf00      	nop
    e030:	200084e4 	.word	0x200084e4
    e034:	4002b000 	.word	0x4002b000
    e038:	0bad0000 	.word	0x0bad0000
    e03c:	0bad000a 	.word	0x0bad000a
    e040:	0bad000b 	.word	0x0bad000b

0000e044 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
    e044:	b538      	push	{r3, r4, r5, lr}
    e046:	f24c 3450 	movw	r4, #50000	; 0xc350
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e04a:	4d06      	ldr	r5, [pc, #24]	; (e064 <qspi_ready_wait+0x20>)
    e04c:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
    e050:	b933      	cbnz	r3, e060 <qspi_ready_wait+0x1c>
    e052:	200a      	movs	r0, #10
    e054:	f002 f92d 	bl	102b2 <nrfx_busy_wait>
    e058:	3c01      	subs	r4, #1
    e05a:	d1f7      	bne.n	e04c <qspi_ready_wait+0x8>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
    e05c:	4802      	ldr	r0, [pc, #8]	; (e068 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
    e05e:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
    e060:	4802      	ldr	r0, [pc, #8]	; (e06c <qspi_ready_wait+0x28>)
    e062:	e7fc      	b.n	e05e <qspi_ready_wait+0x1a>
    e064:	4002b000 	.word	0x4002b000
    e068:	0bad0007 	.word	0x0bad0007
    e06c:	0bad0000 	.word	0x0bad0000

0000e070 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
    e070:	4b08      	ldr	r3, [pc, #32]	; (e094 <qspi_event_xfer_handle.constprop.0+0x24>)
    e072:	689a      	ldr	r2, [r3, #8]
    e074:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
    e076:	691a      	ldr	r2, [r3, #16]
    e078:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
    e07a:	699a      	ldr	r2, [r3, #24]
    e07c:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
    e07e:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
    e080:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
    e082:	b132      	cbz	r2, e092 <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
    e084:	695a      	ldr	r2, [r3, #20]
    e086:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
    e088:	69da      	ldr	r2, [r3, #28]
    e08a:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
    e08c:	2200      	movs	r2, #0
    e08e:	60da      	str	r2, [r3, #12]
    e090:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
    e092:	4770      	bx	lr
    e094:	200084e4 	.word	0x200084e4

0000e098 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
    e098:	b510      	push	{r4, lr}
        case 0: return NRF_P0;
    e09a:	4a0a      	ldr	r2, [pc, #40]	; (e0c4 <nrf_gpio_cfg.constprop.0+0x2c>)
    e09c:	4c0a      	ldr	r4, [pc, #40]	; (e0c8 <nrf_gpio_cfg.constprop.0+0x30>)
    *p_pin = pin_number & 0x1F;
    e09e:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
    e0a2:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
    e0a4:	2801      	cmp	r0, #1
    e0a6:	bf18      	it	ne
    e0a8:	4622      	movne	r2, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    e0aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    e0ae:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    e0b2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    e0b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    e0ba:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    e0be:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    e0c2:	bd10      	pop	{r4, pc}
    e0c4:	40842800 	.word	0x40842800
    e0c8:	40842500 	.word	0x40842500

0000e0cc <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
    e0cc:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
    e0ce:	4b0e      	ldr	r3, [pc, #56]	; (e108 <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
    e0d0:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
    e0d2:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
    e0d6:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
    e0da:	2807      	cmp	r0, #7
    e0dc:	d813      	bhi.n	e106 <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
    e0de:	e8df f000 	tbb	[pc, r0]
    e0e2:	0f11      	.short	0x0f11
    e0e4:	080a0b0d 	.word	0x080a0b0d
    e0e8:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
    e0ea:	0e10      	lsrs	r0, r2, #24
    e0ec:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
    e0ee:	0c10      	lsrs	r0, r2, #16
    e0f0:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
    e0f2:	0a10      	lsrs	r0, r2, #8
    e0f4:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
    e0f6:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
    e0f8:	0e1a      	lsrs	r2, r3, #24
    e0fa:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
    e0fc:	0c1a      	lsrs	r2, r3, #16
    e0fe:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
    e100:	0a1a      	lsrs	r2, r3, #8
    e102:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
    e104:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
    e106:	bd10      	pop	{r4, pc}
    e108:	4002b000 	.word	0x4002b000

0000e10c <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
    e10c:	3802      	subs	r0, #2
    e10e:	2807      	cmp	r0, #7
    e110:	d81f      	bhi.n	e152 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
    e112:	e8df f000 	tbb	[pc, r0]
    e116:	2729      	.short	0x2729
    e118:	21231125 	.word	0x21231125
    e11c:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
    e11e:	79cb      	ldrb	r3, [r1, #7]
    e120:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
    e122:	798a      	ldrb	r2, [r1, #6]
    e124:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
    e128:	794a      	ldrb	r2, [r1, #5]
    e12a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
    e12e:	790a      	ldrb	r2, [r1, #4]
    e130:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
    e132:	4a0e      	ldr	r2, [pc, #56]	; (e16c <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
    e134:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
    e138:	78cb      	ldrb	r3, [r1, #3]
    e13a:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
    e13c:	788a      	ldrb	r2, [r1, #2]
    e13e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
    e142:	784a      	ldrb	r2, [r1, #1]
    e144:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
    e148:	780a      	ldrb	r2, [r1, #0]
    e14a:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
    e14c:	4a07      	ldr	r2, [pc, #28]	; (e16c <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
    e14e:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
    e152:	4770      	bx	lr
    switch (length)
    e154:	2300      	movs	r3, #0
    e156:	e7e4      	b.n	e122 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
    e158:	2300      	movs	r3, #0
    e15a:	e7e5      	b.n	e128 <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
    e15c:	2300      	movs	r3, #0
    e15e:	e7e6      	b.n	e12e <nrf_qspi_cinstrdata_set.constprop.0+0x22>
    e160:	2300      	movs	r3, #0
    e162:	e7eb      	b.n	e13c <nrf_qspi_cinstrdata_set.constprop.0+0x30>
    e164:	2300      	movs	r3, #0
    e166:	e7ec      	b.n	e142 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
    e168:	2300      	movs	r3, #0
    e16a:	e7ed      	b.n	e148 <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
    e16c:	4002b000 	.word	0x4002b000

0000e170 <nrfx_qspi_init>:
{
    e170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    e174:	4d6d      	ldr	r5, [pc, #436]	; (e32c <nrfx_qspi_init+0x1bc>)
{
    e176:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    e178:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
{
    e17c:	460e      	mov	r6, r1
    e17e:	4617      	mov	r7, r2
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    e180:	2b00      	cmp	r3, #0
    e182:	f040 80ce 	bne.w	e322 <nrfx_qspi_init+0x1b2>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    e186:	7cc2      	ldrb	r2, [r0, #19]
    e188:	b112      	cbz	r2, e190 <nrfx_qspi_init+0x20>
    e18a:	7d03      	ldrb	r3, [r0, #20]
    e18c:	2b00      	cmp	r3, #0
    e18e:	d16c      	bne.n	e26a <nrfx_qspi_init+0xfa>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    e190:	7920      	ldrb	r0, [r4, #4]
    e192:	28ff      	cmp	r0, #255	; 0xff
    e194:	f000 80c8 	beq.w	e328 <nrfx_qspi_init+0x1b8>
    e198:	7963      	ldrb	r3, [r4, #5]
    e19a:	2bff      	cmp	r3, #255	; 0xff
    e19c:	f000 80c4 	beq.w	e328 <nrfx_qspi_init+0x1b8>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    e1a0:	79a3      	ldrb	r3, [r4, #6]
    e1a2:	2bff      	cmp	r3, #255	; 0xff
    e1a4:	f000 80c0 	beq.w	e328 <nrfx_qspi_init+0x1b8>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
    e1a8:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    e1aa:	29ff      	cmp	r1, #255	; 0xff
    e1ac:	f000 80bc 	beq.w	e328 <nrfx_qspi_init+0x1b8>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
    e1b0:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
    e1b2:	f8df c17c 	ldr.w	ip, [pc, #380]	; e330 <nrfx_qspi_init+0x1c0>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
    e1b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
    e1ba:	4563      	cmp	r3, ip
    e1bc:	f040 80b4 	bne.w	e328 <nrfx_qspi_init+0x1b8>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
    e1c0:	290e      	cmp	r1, #14
    e1c2:	f040 80b1 	bne.w	e328 <nrfx_qspi_init+0x1b8>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    e1c6:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
    e1c8:	2bff      	cmp	r3, #255	; 0xff
    e1ca:	d002      	beq.n	e1d2 <nrfx_qspi_init+0x62>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    e1cc:	2b0f      	cmp	r3, #15
    e1ce:	f040 80ab 	bne.w	e328 <nrfx_qspi_init+0x1b8>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    e1d2:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
    e1d4:	2bff      	cmp	r3, #255	; 0xff
    e1d6:	d002      	beq.n	e1de <nrfx_qspi_init+0x6e>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    e1d8:	2b10      	cmp	r3, #16
    e1da:	f040 80a5 	bne.w	e328 <nrfx_qspi_init+0x1b8>
    if (!p_config->skip_gpio_cfg)
    e1de:	b9b2      	cbnz	r2, e20e <nrfx_qspi_init+0x9e>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
    e1e0:	2103      	movs	r1, #3
    e1e2:	f7ff ff59 	bl	e098 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
    e1e6:	7960      	ldrb	r0, [r4, #5]
    e1e8:	f7ff ff56 	bl	e098 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
    e1ec:	79a0      	ldrb	r0, [r4, #6]
    e1ee:	f7ff ff53 	bl	e098 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
    e1f2:	79e0      	ldrb	r0, [r4, #7]
    e1f4:	f7ff ff50 	bl	e098 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    e1f8:	7a20      	ldrb	r0, [r4, #8]
    e1fa:	28ff      	cmp	r0, #255	; 0xff
    e1fc:	d001      	beq.n	e202 <nrfx_qspi_init+0x92>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
    e1fe:	f7ff ff4b 	bl	e098 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    e202:	7a60      	ldrb	r0, [r4, #9]
    e204:	28ff      	cmp	r0, #255	; 0xff
    e206:	d002      	beq.n	e20e <nrfx_qspi_init+0x9e>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
    e208:	2103      	movs	r1, #3
    e20a:	f7ff ff45 	bl	e098 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
    e20e:	7d23      	ldrb	r3, [r4, #20]
    e210:	bb5b      	cbnz	r3, e26a <nrfx_qspi_init+0xfa>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
    e212:	7923      	ldrb	r3, [r4, #4]
    e214:	2bff      	cmp	r3, #255	; 0xff
    e216:	bf14      	ite	ne
    e218:	461a      	movne	r2, r3
    e21a:	f04f 32ff 	moveq.w	r2, #4294967295
    e21e:	4b45      	ldr	r3, [pc, #276]	; (e334 <nrfx_qspi_init+0x1c4>)
    e220:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
    e224:	7962      	ldrb	r2, [r4, #5]
    e226:	2aff      	cmp	r2, #255	; 0xff
    e228:	bf08      	it	eq
    e22a:	f04f 32ff 	moveq.w	r2, #4294967295
    e22e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
    e232:	79a2      	ldrb	r2, [r4, #6]
    e234:	2aff      	cmp	r2, #255	; 0xff
    e236:	bf08      	it	eq
    e238:	f04f 32ff 	moveq.w	r2, #4294967295
    e23c:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
    e240:	79e2      	ldrb	r2, [r4, #7]
    e242:	2aff      	cmp	r2, #255	; 0xff
    e244:	bf08      	it	eq
    e246:	f04f 32ff 	moveq.w	r2, #4294967295
    e24a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
    e24e:	7a22      	ldrb	r2, [r4, #8]
    e250:	2aff      	cmp	r2, #255	; 0xff
    e252:	bf08      	it	eq
    e254:	f04f 32ff 	moveq.w	r2, #4294967295
    e258:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
    e25c:	7a62      	ldrb	r2, [r4, #9]
    e25e:	2aff      	cmp	r2, #255	; 0xff
    e260:	bf08      	it	eq
    e262:	f04f 32ff 	moveq.w	r2, #4294967295
    e266:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    p_reg->INTENCLR = mask;
    e26a:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e26c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    e26e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; e334 <nrfx_qspi_init+0x1c4>
    e272:	f8c8 3308 	str.w	r3, [r8, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e276:	f8c8 2100 	str.w	r2, [r8, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e27a:	f8c8 3000 	str.w	r3, [r8]
        if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
    e27e:	f7ff fee1 	bl	e044 <qspi_ready_wait>
    e282:	4b2d      	ldr	r3, [pc, #180]	; (e338 <nrfx_qspi_init+0x1c8>)
    e284:	4298      	cmp	r0, r3
    e286:	d04d      	beq.n	e324 <nrfx_qspi_init+0x1b4>
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
    e288:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
    e28a:	f8c8 3540 	str.w	r3, [r8, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
    e28e:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
    e290:	7ae1      	ldrb	r1, [r4, #11]
    uint32_t config = p_config->readoc;
    e292:	7aa2      	ldrb	r2, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
    e294:	019b      	lsls	r3, r3, #6
    e296:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
    e29a:	4313      	orrs	r3, r2
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
    e29c:	7b62      	ldrb	r2, [r4, #13]
    e29e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    p_reg->IFCONFIG0 = config;
    e2a2:	f8c8 3544 	str.w	r3, [r8, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
    e2a6:	7c62      	ldrb	r2, [r4, #17]
    return p_reg->IFCONFIG0;
    e2a8:	f8d8 3544 	ldr.w	r3, [r8, #1348]	; 0x544
    e2ac:	bba2      	cbnz	r2, e318 <nrfx_qspi_init+0x1a8>
        regval |= ((1 << 16) | (1 << 17));
    e2ae:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
    e2b2:	4920      	ldr	r1, [pc, #128]	; (e334 <nrfx_qspi_init+0x1c4>)
    e2b4:	f8c1 3544 	str.w	r3, [r1, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
    e2b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    e2bc:	f8c1 3640 	str.w	r3, [r1, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
    e2c0:	f8d1 2600 	ldr.w	r2, [r1, #1536]	; 0x600
    config |= p_config->sck_delay;
    e2c4:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
    e2c6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    e2ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    config |= p_config->sck_delay;
    e2ce:	4313      	orrs	r3, r2
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
    e2d0:	7be2      	ldrb	r2, [r4, #15]
    e2d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
    e2d6:	7c22      	ldrb	r2, [r4, #16]
    e2d8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
    e2dc:	7c62      	ldrb	r2, [r4, #17]
    e2de:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    p_reg->IFCONFIG1 = config;
    e2e2:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
    e2e6:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
    e2e8:	e9c5 6700 	strd	r6, r7, [r5]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
    e2ec:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    if (handler)
    e2f0:	b116      	cbz	r6, e2f8 <nrfx_qspi_init+0x188>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
    e2f2:	202b      	movs	r0, #43	; 0x2b
    e2f4:	f7fc fba8 	bl	aa48 <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
    e2f8:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
    e2fa:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
    e2fc:	e9c5 1102 	strd	r1, r1, [r5, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
    e300:	4b0c      	ldr	r3, [pc, #48]	; (e334 <nrfx_qspi_init+0x1c4>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
    e302:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
    e306:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e30a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e30e:	601a      	str	r2, [r3, #0]
}
    e310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return qspi_ready_wait();
    e314:	f7ff be96 	b.w	e044 <qspi_ready_wait>
        regval &= ~(1 << 17);
    e318:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
    e31c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    e320:	e7c7      	b.n	e2b2 <nrfx_qspi_init+0x142>
        return NRFX_ERROR_INVALID_STATE;
    e322:	4806      	ldr	r0, [pc, #24]	; (e33c <nrfx_qspi_init+0x1cc>)
}
    e324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NRFX_ERROR_INVALID_PARAM;
    e328:	4805      	ldr	r0, [pc, #20]	; (e340 <nrfx_qspi_init+0x1d0>)
    e32a:	e7fb      	b.n	e324 <nrfx_qspi_init+0x1b4>
    e32c:	200084e4 	.word	0x200084e4
    e330:	000d1211 	.word	0x000d1211
    e334:	4002b000 	.word	0x4002b000
    e338:	0bad0007 	.word	0x0bad0007
    e33c:	0bad0005 	.word	0x0bad0005
    e340:	0bad0004 	.word	0x0bad0004

0000e344 <nrfx_qspi_cinstr_xfer>:
{
    e344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e348:	4615      	mov	r5, r2
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
    e34a:	4a1f      	ldr	r2, [pc, #124]	; (e3c8 <nrfx_qspi_cinstr_xfer+0x84>)
{
    e34c:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
    e34e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    e352:	2a01      	cmp	r2, #1
    e354:	d135      	bne.n	e3c2 <nrfx_qspi_cinstr_xfer+0x7e>
    if (p_tx_buffer)
    e356:	b111      	cbz	r1, e35e <nrfx_qspi_cinstr_xfer+0x1a>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
    e358:	7840      	ldrb	r0, [r0, #1]
    e35a:	f7ff fed7 	bl	e10c <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
    e35e:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e360:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
    e362:	4e1a      	ldr	r6, [pc, #104]	; (e3cc <nrfx_qspi_cinstr_xfer+0x88>)
        if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
    e364:	f8df 8068 	ldr.w	r8, [pc, #104]	; e3d0 <nrfx_qspi_cinstr_xfer+0x8c>
    e368:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e36c:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e370:	6033      	str	r3, [r6, #0]
    e372:	f7ff fe67 	bl	e044 <qspi_ready_wait>
    e376:	4540      	cmp	r0, r8
    e378:	d102      	bne.n	e380 <nrfx_qspi_cinstr_xfer+0x3c>
            return NRFX_ERROR_TIMEOUT;
    e37a:	4815      	ldr	r0, [pc, #84]	; (e3d0 <nrfx_qspi_cinstr_xfer+0x8c>)
}
    e37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e380:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    e384:	78a3      	ldrb	r3, [r4, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    e386:	7862      	ldrb	r2, [r4, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    e388:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    e38a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
    e38e:	7822      	ldrb	r2, [r4, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    e390:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
    e392:	78e2      	ldrb	r2, [r4, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    e394:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
    e398:	7922      	ldrb	r2, [r4, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
    e39a:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
    e39e:	7962      	ldrb	r2, [r4, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
    e3a0:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
    e3a4:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
    e3a8:	f7ff fe4c 	bl	e044 <qspi_ready_wait>
    e3ac:	4540      	cmp	r0, r8
    e3ae:	d0e4      	beq.n	e37a <nrfx_qspi_cinstr_xfer+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e3b0:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
    if (p_rx_buffer)
    e3b4:	b11d      	cbz	r5, e3be <nrfx_qspi_cinstr_xfer+0x7a>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
    e3b6:	4629      	mov	r1, r5
    e3b8:	7860      	ldrb	r0, [r4, #1]
    e3ba:	f7ff fe87 	bl	e0cc <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
    e3be:	4805      	ldr	r0, [pc, #20]	; (e3d4 <nrfx_qspi_cinstr_xfer+0x90>)
    e3c0:	e7dc      	b.n	e37c <nrfx_qspi_cinstr_xfer+0x38>
        return NRFX_ERROR_BUSY;
    e3c2:	4805      	ldr	r0, [pc, #20]	; (e3d8 <nrfx_qspi_cinstr_xfer+0x94>)
    e3c4:	e7da      	b.n	e37c <nrfx_qspi_cinstr_xfer+0x38>
    e3c6:	bf00      	nop
    e3c8:	200084e4 	.word	0x200084e4
    e3cc:	4002b000 	.word	0x4002b000
    e3d0:	0bad0007 	.word	0x0bad0007
    e3d4:	0bad0000 	.word	0x0bad0000
    e3d8:	0bad000b 	.word	0x0bad000b

0000e3dc <nrfx_qspi_mem_busy_check>:
{
    e3dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
    e3de:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
    e3e0:	4a0c      	ldr	r2, [pc, #48]	; (e414 <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    e3e2:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
    e3e4:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    e3e6:	f10d 0207 	add.w	r2, sp, #7
    e3ea:	4611      	mov	r1, r2
    uint8_t status_value = 0;
    e3ec:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
    e3f0:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    e3f4:	f7ff ffa6 	bl	e344 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
    e3f8:	4b07      	ldr	r3, [pc, #28]	; (e418 <nrfx_qspi_mem_busy_check+0x3c>)
    e3fa:	4298      	cmp	r0, r3
    e3fc:	d106      	bne.n	e40c <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
    e3fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
    e402:	f013 0f01 	tst.w	r3, #1
    e406:	4b05      	ldr	r3, [pc, #20]	; (e41c <nrfx_qspi_mem_busy_check+0x40>)
    e408:	bf18      	it	ne
    e40a:	4618      	movne	r0, r3
}
    e40c:	b005      	add	sp, #20
    e40e:	f85d fb04 	ldr.w	pc, [sp], #4
    e412:	bf00      	nop
    e414:	01000205 	.word	0x01000205
    e418:	0bad0000 	.word	0x0bad0000
    e41c:	0bad000b 	.word	0x0bad000b

0000e420 <nrfx_qspi_uninit>:
{
    e420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_IRQ_DISABLE(QSPI_IRQn);
    e424:	202b      	movs	r0, #43	; 0x2b
    e426:	f7fc fb1d 	bl	aa64 <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
    e42a:	4b21      	ldr	r3, [pc, #132]	; (e4b0 <nrfx_qspi_uninit+0x90>)
    if (!m_cb.skip_gpio_cfg)
    e42c:	4e21      	ldr	r6, [pc, #132]	; (e4b4 <nrfx_qspi_uninit+0x94>)
    e42e:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
    e432:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
    e436:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
    e43a:	bf04      	itt	eq
    e43c:	4a1e      	ldreq	r2, [pc, #120]	; (e4b8 <nrfx_qspi_uninit+0x98>)
    e43e:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
    e442:	2201      	movs	r2, #1
    e444:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e448:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
    e44a:	2200      	movs	r2, #0
    e44c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e450:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
    e454:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
    e458:	bb22      	cbnz	r2, e4a4 <nrfx_qspi_uninit+0x84>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
    e45a:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
    e45e:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
    e462:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
    e464:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
    e468:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
    e46c:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
    e470:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
    e474:	f001 ff82 	bl	1037c <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
    e478:	fa5f f089 	uxtb.w	r0, r9
    e47c:	f001 ff7e 	bl	1037c <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
    e480:	fa5f f088 	uxtb.w	r0, r8
    e484:	f001 ff7a 	bl	1037c <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
    e488:	b2f8      	uxtb	r0, r7
    e48a:	f001 ff77 	bl	1037c <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    e48e:	b2e8      	uxtb	r0, r5
    e490:	28ff      	cmp	r0, #255	; 0xff
    e492:	b2e4      	uxtb	r4, r4
    e494:	d001      	beq.n	e49a <nrfx_qspi_uninit+0x7a>
        nrf_gpio_cfg_default(pins.io2_pin);
    e496:	f001 ff71 	bl	1037c <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    e49a:	2cff      	cmp	r4, #255	; 0xff
    e49c:	d002      	beq.n	e4a4 <nrfx_qspi_uninit+0x84>
        nrf_gpio_cfg_default(pins.io3_pin);
    e49e:	4620      	mov	r0, r4
    e4a0:	f001 ff6c 	bl	1037c <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
    e4a4:	2300      	movs	r3, #0
    e4a6:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    e4aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e4ae:	bf00      	nop
    e4b0:	4002b000 	.word	0x4002b000
    e4b4:	200084e4 	.word	0x200084e4
    e4b8:	00030100 	.word	0x00030100

0000e4bc <nrfx_qspi_erase>:
    if (!nrfx_is_word_aligned((void const *)start_address))
    e4bc:	078b      	lsls	r3, r1, #30
    e4be:	d121      	bne.n	e504 <nrfx_qspi_erase+0x48>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
    e4c0:	4a12      	ldr	r2, [pc, #72]	; (e50c <nrfx_qspi_erase+0x50>)
    e4c2:	6813      	ldr	r3, [r2, #0]
    e4c4:	b11b      	cbz	r3, e4ce <nrfx_qspi_erase+0x12>
    e4c6:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    e4ca:	2b01      	cmp	r3, #1
    e4cc:	d11c      	bne.n	e508 <nrfx_qspi_erase+0x4c>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
    e4ce:	2304      	movs	r3, #4
    e4d0:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
    e4d4:	4b0e      	ldr	r3, [pc, #56]	; (e510 <nrfx_qspi_erase+0x54>)
    e4d6:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e4da:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
    e4dc:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e4e0:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e4e4:	2101      	movs	r1, #1
    e4e6:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
    e4e8:	6810      	ldr	r0, [r2, #0]
    e4ea:	b940      	cbnz	r0, e4fe <nrfx_qspi_erase+0x42>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e4ec:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    e4f0:	2900      	cmp	r1, #0
    e4f2:	d0fb      	beq.n	e4ec <nrfx_qspi_erase+0x30>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
    e4f4:	2301      	movs	r3, #1
    e4f6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
    e4fa:	4806      	ldr	r0, [pc, #24]	; (e514 <nrfx_qspi_erase+0x58>)
    e4fc:	4770      	bx	lr
    p_reg->INTENSET = mask;
    e4fe:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
    e502:	e7fa      	b.n	e4fa <nrfx_qspi_erase+0x3e>
        return NRFX_ERROR_INVALID_ADDR;
    e504:	4804      	ldr	r0, [pc, #16]	; (e518 <nrfx_qspi_erase+0x5c>)
    e506:	4770      	bx	lr
        return NRFX_ERROR_BUSY;
    e508:	4804      	ldr	r0, [pc, #16]	; (e51c <nrfx_qspi_erase+0x60>)
}
    e50a:	4770      	bx	lr
    e50c:	200084e4 	.word	0x200084e4
    e510:	4002b000 	.word	0x4002b000
    e514:	0bad0000 	.word	0x0bad0000
    e518:	0bad000a 	.word	0x0bad000a
    e51c:	0bad000b 	.word	0x0bad000b

0000e520 <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
    e520:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e522:	4b17      	ldr	r3, [pc, #92]	; (e580 <nrfx_qspi_irq_handler+0x60>)
    e524:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    e528:	b1e2      	cbz	r2, e564 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e52a:	2200      	movs	r2, #0
    switch (m_cb.state)
    e52c:	4c15      	ldr	r4, [pc, #84]	; (e584 <nrfx_qspi_irq_handler+0x64>)
    e52e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    e532:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    e536:	2a03      	cmp	r2, #3
    e538:	d015      	beq.n	e566 <nrfx_qspi_irq_handler+0x46>
    e53a:	2a04      	cmp	r2, #4
    e53c:	d015      	beq.n	e56a <nrfx_qspi_irq_handler+0x4a>
    e53e:	2a02      	cmp	r2, #2
    e540:	d104      	bne.n	e54c <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
    e542:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
    e544:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
    e548:	f7ff fd92 	bl	e070 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
    e54c:	68a3      	ldr	r3, [r4, #8]
    e54e:	b913      	cbnz	r3, e556 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
    e550:	2301      	movs	r3, #1
    e552:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
    e556:	e9d4 3100 	ldrd	r3, r1, [r4]
    e55a:	2000      	movs	r0, #0
    e55c:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
    e55e:	2300      	movs	r3, #0
    e560:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
    e564:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
    e566:	2302      	movs	r3, #2
    e568:	e7ec      	b.n	e544 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
    e56a:	2203      	movs	r2, #3
    e56c:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
    e570:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
    e574:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
    e576:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    e57a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
    e57e:	e7e5      	b.n	e54c <nrfx_qspi_irq_handler+0x2c>
    e580:	4002b000 	.word	0x4002b000
    e584:	200084e4 	.word	0x200084e4

0000e588 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    e588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e58c:	4606      	mov	r6, r0
    e58e:	b086      	sub	sp, #24
    e590:	460f      	mov	r7, r1
	__asm__ volatile(
    e592:	f04f 0320 	mov.w	r3, #32
    e596:	f3ef 8811 	mrs	r8, BASEPRI
    e59a:	f383 8812 	msr	BASEPRI_MAX, r3
    e59e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    e5a2:	f000 fdc5 	bl	f130 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    e5a6:	2400      	movs	r4, #0
    e5a8:	2e04      	cmp	r6, #4
    e5aa:	bf96      	itet	ls
    e5ac:	4b21      	ldrls	r3, [pc, #132]	; (e634 <z_fatal_error+0xac>)
    e5ae:	4b22      	ldrhi	r3, [pc, #136]	; (e638 <z_fatal_error+0xb0>)
    e5b0:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
    e5b4:	4605      	mov	r5, r0
    e5b6:	e9cd 3404 	strd	r3, r4, [sp, #16]
    e5ba:	4b20      	ldr	r3, [pc, #128]	; (e63c <z_fatal_error+0xb4>)
    e5bc:	2201      	movs	r2, #1
    e5be:	e9cd 4301 	strd	r4, r3, [sp, #4]
    e5c2:	4620      	mov	r0, r4
    e5c4:	4623      	mov	r3, r4
    e5c6:	491e      	ldr	r1, [pc, #120]	; (e640 <z_fatal_error+0xb8>)
    e5c8:	9603      	str	r6, [sp, #12]
    e5ca:	9400      	str	r4, [sp, #0]
    e5cc:	f001 feef 	bl	103ae <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    e5d0:	b16f      	cbz	r7, e5ee <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    e5d2:	69fb      	ldr	r3, [r7, #28]
    e5d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
    e5d8:	b14b      	cbz	r3, e5ee <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    e5da:	4b1a      	ldr	r3, [pc, #104]	; (e644 <z_fatal_error+0xbc>)
    e5dc:	2201      	movs	r2, #1
    e5de:	e9cd 4301 	strd	r4, r3, [sp, #4]
    e5e2:	4620      	mov	r0, r4
    e5e4:	4623      	mov	r3, r4
    e5e6:	4916      	ldr	r1, [pc, #88]	; (e640 <z_fatal_error+0xb8>)
    e5e8:	9400      	str	r4, [sp, #0]
    e5ea:	f001 fee0 	bl	103ae <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    e5ee:	b12d      	cbz	r5, e5fc <z_fatal_error+0x74>
    e5f0:	4628      	mov	r0, r5
    e5f2:	f001 fef6 	bl	103e2 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    e5f6:	b108      	cbz	r0, e5fc <z_fatal_error+0x74>
    e5f8:	7803      	ldrb	r3, [r0, #0]
    e5fa:	b903      	cbnz	r3, e5fe <z_fatal_error+0x76>
		thread_name = "unknown";
    e5fc:	4812      	ldr	r0, [pc, #72]	; (e648 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    e5fe:	4b13      	ldr	r3, [pc, #76]	; (e64c <z_fatal_error+0xc4>)
    e600:	2201      	movs	r2, #1
    e602:	9302      	str	r3, [sp, #8]
    e604:	2300      	movs	r3, #0
    e606:	e9cd 5003 	strd	r5, r0, [sp, #12]
    e60a:	e9cd 3300 	strd	r3, r3, [sp]
    e60e:	4618      	mov	r0, r3
    e610:	490b      	ldr	r1, [pc, #44]	; (e640 <z_fatal_error+0xb8>)
    e612:	f001 fecc 	bl	103ae <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    e616:	4639      	mov	r1, r7
    e618:	4630      	mov	r0, r6
    e61a:	f7fe fe03 	bl	d224 <k_sys_fatal_error_handler>
	__asm__ volatile(
    e61e:	f388 8811 	msr	BASEPRI, r8
    e622:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    e626:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    e628:	b006      	add	sp, #24
    e62a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e62e:	f7fc be97 	b.w	b360 <z_impl_k_thread_abort>
    e632:	bf00      	nop
    e634:	00010c64 	.word	0x00010c64
    e638:	00011973 	.word	0x00011973
    e63c:	00011989 	.word	0x00011989
    e640:	000109d4 	.word	0x000109d4
    e644:	000119b1 	.word	0x000119b1
    e648:	00011981 	.word	0x00011981
    e64c:	000119d2 	.word	0x000119d2

0000e650 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    e650:	4b10      	ldr	r3, [pc, #64]	; (e694 <z_sys_init_run_level+0x44>)
{
    e652:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    e654:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    e658:	3001      	adds	r0, #1
    e65a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    e65e:	42a6      	cmp	r6, r4
    e660:	d800      	bhi.n	e664 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    e662:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    e664:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    e668:	b18d      	cbz	r5, e68e <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    e66a:	4628      	mov	r0, r5
    e66c:	4798      	blx	r3
			if (rc != 0) {
    e66e:	b138      	cbz	r0, e680 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    e670:	2800      	cmp	r0, #0
    e672:	bfb8      	it	lt
    e674:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    e676:	28ff      	cmp	r0, #255	; 0xff
    e678:	bfa8      	it	ge
    e67a:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    e67c:	68eb      	ldr	r3, [r5, #12]
    e67e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    e680:	68ea      	ldr	r2, [r5, #12]
    e682:	7853      	ldrb	r3, [r2, #1]
    e684:	f043 0301 	orr.w	r3, r3, #1
    e688:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    e68a:	3408      	adds	r4, #8
    e68c:	e7e7      	b.n	e65e <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    e68e:	4798      	blx	r3
    e690:	e7fb      	b.n	e68a <z_sys_init_run_level+0x3a>
    e692:	bf00      	nop
    e694:	00010c78 	.word	0x00010c78

0000e698 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    e698:	2201      	movs	r2, #1
{
    e69a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    e69c:	4b09      	ldr	r3, [pc, #36]	; (e6c4 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    e69e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    e6a0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    e6a2:	f7ff ffd5 	bl	e650 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    e6a6:	f000 ff03 	bl	f4b0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    e6aa:	2004      	movs	r0, #4
    e6ac:	f7ff ffd0 	bl	e650 <z_sys_init_run_level>

	z_init_static_threads();
    e6b0:	f000 f8ec 	bl	e88c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    e6b4:	f7f9 feb6 	bl	8424 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    e6b8:	4a03      	ldr	r2, [pc, #12]	; (e6c8 <bg_thread_main+0x30>)
    e6ba:	7b13      	ldrb	r3, [r2, #12]
    e6bc:	f023 0301 	bic.w	r3, r3, #1
    e6c0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    e6c2:	bd08      	pop	{r3, pc}
    e6c4:	20008556 	.word	0x20008556
    e6c8:	20008208 	.word	0x20008208

0000e6cc <z_bss_zero>:
{
    e6cc:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    e6ce:	4803      	ldr	r0, [pc, #12]	; (e6dc <z_bss_zero+0x10>)
    e6d0:	4a03      	ldr	r2, [pc, #12]	; (e6e0 <z_bss_zero+0x14>)
    e6d2:	2100      	movs	r1, #0
    e6d4:	1a12      	subs	r2, r2, r0
    e6d6:	f001 fe7a 	bl	103ce <z_early_memset>
}
    e6da:	bd08      	pop	{r3, pc}
    e6dc:	20008158 	.word	0x20008158
    e6e0:	20008558 	.word	0x20008558

0000e6e4 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    e6e4:	2300      	movs	r3, #0
    e6e6:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    e6e8:	b570      	push	{r4, r5, r6, lr}
    e6ea:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    e6ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
    e6f0:	220f      	movs	r2, #15
    e6f2:	9301      	str	r3, [sp, #4]
    e6f4:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    e6f8:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
    e6fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    e6fe:	4d0e      	ldr	r5, [pc, #56]	; (e738 <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    e700:	4e0e      	ldr	r6, [pc, #56]	; (e73c <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    e702:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    e706:	490e      	ldr	r1, [pc, #56]	; (e740 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    e708:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    e70c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    e70e:	fb02 1100 	mla	r1, r2, r0, r1
    e712:	4b0c      	ldr	r3, [pc, #48]	; (e744 <z_init_cpu+0x60>)
    e714:	4630      	mov	r0, r6
    e716:	9500      	str	r5, [sp, #0]
    e718:	f000 f888 	bl	e82c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e71c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    e71e:	742c      	strb	r4, [r5, #16]
    e720:	f023 0304 	bic.w	r3, r3, #4
    e724:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    e726:	4b08      	ldr	r3, [pc, #32]	; (e748 <z_init_cpu+0x64>)
    e728:	3401      	adds	r4, #1
    e72a:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    e72e:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    e730:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    e732:	b006      	add	sp, #24
    e734:	bd70      	pop	{r4, r5, r6, pc}
    e736:	bf00      	nop
    e738:	20008518 	.word	0x20008518
    e73c:	20008188 	.word	0x20008188
    e740:	20008d58 	.word	0x20008d58
    e744:	0000e945 	.word	0x0000e945
    e748:	20008558 	.word	0x20008558

0000e74c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    e74c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    e74e:	2000      	movs	r0, #0
{
    e750:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    e752:	f7ff ff7d 	bl	e650 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    e756:	4b2e      	ldr	r3, [pc, #184]	; (e810 <z_cstart+0xc4>)
	uint32_t msp =
    e758:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    e75c:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    e760:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e764:	2400      	movs	r4, #0
    e766:	23e0      	movs	r3, #224	; 0xe0
    e768:	4d2a      	ldr	r5, [pc, #168]	; (e814 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    e76a:	4e2b      	ldr	r6, [pc, #172]	; (e818 <z_cstart+0xcc>)
    e76c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    e770:	77ec      	strb	r4, [r5, #31]
    e772:	762c      	strb	r4, [r5, #24]
    e774:	766c      	strb	r4, [r5, #25]
    e776:	76ac      	strb	r4, [r5, #26]
    e778:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    e77c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    e77e:	4f27      	ldr	r7, [pc, #156]	; (e81c <z_cstart+0xd0>)
    e780:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    e784:	626b      	str	r3, [r5, #36]	; 0x24
    e786:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    e78a:	f7fc fd4d 	bl	b228 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    e78e:	f7fc f8df 	bl	a950 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    e792:	f04f 33ff 	mov.w	r3, #4294967295
    e796:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    e798:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    e79a:	f7fc ff7d 	bl	b698 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    e79e:	f7fc fdf5 	bl	b38c <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    e7a2:	f7fb fceb 	bl	a17c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    e7a6:	f240 1301 	movw	r3, #257	; 0x101
    e7aa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    e7ae:	ab06      	add	r3, sp, #24
    e7b0:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    e7b2:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    e7b6:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    e7b8:	f001 fded 	bl	10396 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    e7bc:	2001      	movs	r0, #1
    e7be:	f7ff ff47 	bl	e650 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    e7c2:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    e7c4:	4d16      	ldr	r5, [pc, #88]	; (e820 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    e7c6:	f7ff ff43 	bl	e650 <z_sys_init_run_level>
	z_sched_init();
    e7ca:	f000 fc0d 	bl	efe8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    e7ce:	4b15      	ldr	r3, [pc, #84]	; (e824 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    e7d0:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    e7d2:	9305      	str	r3, [sp, #20]
    e7d4:	2301      	movs	r3, #1
    e7d6:	4914      	ldr	r1, [pc, #80]	; (e828 <z_cstart+0xdc>)
    e7d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e7dc:	e9cd 4303 	strd	r4, r3, [sp, #12]
    e7e0:	4628      	mov	r0, r5
    e7e2:	463b      	mov	r3, r7
    e7e4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    e7e8:	9400      	str	r4, [sp, #0]
    e7ea:	f000 f81f 	bl	e82c <z_setup_new_thread>
    e7ee:	4606      	mov	r6, r0
    e7f0:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    e7f2:	4628      	mov	r0, r5
    e7f4:	f022 0204 	bic.w	r2, r2, #4
    e7f8:	736a      	strb	r2, [r5, #13]
    e7fa:	f001 fe50 	bl	1049e <z_ready_thread>
	z_init_cpu(0);
    e7fe:	4620      	mov	r0, r4
    e800:	f7ff ff70 	bl	e6e4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    e804:	463a      	mov	r2, r7
    e806:	4631      	mov	r1, r6
    e808:	4628      	mov	r0, r5
    e80a:	f7fc f9fb 	bl	ac04 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    e80e:	bf00      	nop
    e810:	20008558 	.word	0x20008558
    e814:	e000ed00 	.word	0xe000ed00
    e818:	20008518 	.word	0x20008518
    e81c:	0000e699 	.word	0x0000e699
    e820:	20008208 	.word	0x20008208
    e824:	00010d43 	.word	0x00010d43
    e828:	20008e98 	.word	0x20008e98

0000e82c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    e82c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    e830:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    e832:	f100 0558 	add.w	r5, r0, #88	; 0x58
    e836:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    e838:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    e83a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    e83e:	2500      	movs	r5, #0
{
    e840:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    e842:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    e844:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    e846:	e9c0 5506 	strd	r5, r5, [r0, #24]
    e84a:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    e84c:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    e84e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    e850:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    e854:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    e858:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    e85a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    e85c:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    e85e:	9202      	str	r2, [sp, #8]
    e860:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    e862:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    e866:	9201      	str	r2, [sp, #4]
    e868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e86a:	9200      	str	r2, [sp, #0]
    e86c:	4642      	mov	r2, r8
    e86e:	f7fc f9ab 	bl	abc8 <arch_new_thread>
	if (!_current) {
    e872:	4b05      	ldr	r3, [pc, #20]	; (e888 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    e874:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    e876:	689b      	ldr	r3, [r3, #8]
    e878:	b103      	cbz	r3, e87c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    e87a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    e87c:	4640      	mov	r0, r8
    e87e:	6723      	str	r3, [r4, #112]	; 0x70
    e880:	b004      	add	sp, #16
    e882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e886:	bf00      	nop
    e888:	20008518 	.word	0x20008518

0000e88c <z_init_static_threads>:
{
    e88c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e890:	4c29      	ldr	r4, [pc, #164]	; (e938 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    e892:	4d2a      	ldr	r5, [pc, #168]	; (e93c <z_init_static_threads+0xb0>)
{
    e894:	b087      	sub	sp, #28
    e896:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    e898:	42ae      	cmp	r6, r5
    e89a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    e89e:	d30f      	bcc.n	e8c0 <z_init_static_threads+0x34>
	k_sched_lock();
    e8a0:	f000 fb72 	bl	ef88 <k_sched_lock>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    e8a4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    e8a8:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    e8ac:	4c22      	ldr	r4, [pc, #136]	; (e938 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    e8ae:	f8df 9090 	ldr.w	r9, [pc, #144]	; e940 <z_init_static_threads+0xb4>
    e8b2:	42ac      	cmp	r4, r5
    e8b4:	d320      	bcc.n	e8f8 <z_init_static_threads+0x6c>
}
    e8b6:	b007      	add	sp, #28
    e8b8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    e8bc:	f000 bb78 	b.w	efb0 <k_sched_unlock>
		z_setup_new_thread(
    e8c0:	f854 3c04 	ldr.w	r3, [r4, #-4]
    e8c4:	9305      	str	r3, [sp, #20]
    e8c6:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    e8ca:	9304      	str	r3, [sp, #16]
    e8cc:	f854 3c10 	ldr.w	r3, [r4, #-16]
    e8d0:	9303      	str	r3, [sp, #12]
    e8d2:	f854 3c14 	ldr.w	r3, [r4, #-20]
    e8d6:	9302      	str	r3, [sp, #8]
    e8d8:	f854 3c18 	ldr.w	r3, [r4, #-24]
    e8dc:	9301      	str	r3, [sp, #4]
    e8de:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    e8e2:	9300      	str	r3, [sp, #0]
    e8e4:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    e8e8:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    e8ec:	f7ff ff9e 	bl	e82c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    e8f0:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    e8f4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    e8f6:	e7ce      	b.n	e896 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    e8f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e8fa:	1c5a      	adds	r2, r3, #1
    e8fc:	d00d      	beq.n	e91a <z_init_static_threads+0x8e>
    e8fe:	2100      	movs	r1, #0
    e900:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    e902:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e906:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    e90a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    e90e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    e912:	d104      	bne.n	e91e <z_init_static_threads+0x92>
	z_sched_start(thread);
    e914:	4640      	mov	r0, r8
    e916:	f000 fae7 	bl	eee8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    e91a:	342c      	adds	r4, #44	; 0x2c
    e91c:	e7c9      	b.n	e8b2 <z_init_static_threads+0x26>
    e91e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e922:	2300      	movs	r3, #0
    e924:	f7f9 fc16 	bl	8154 <__aeabi_uldivmod>
    e928:	4602      	mov	r2, r0
    e92a:	460b      	mov	r3, r1
    e92c:	f108 0018 	add.w	r0, r8, #24
    e930:	4649      	mov	r1, r9
    e932:	f000 fcc3 	bl	f2bc <z_add_timeout>
    e936:	e7f0      	b.n	e91a <z_init_static_threads+0x8e>
    e938:	0001092c 	.word	0x0001092c
    e93c:	0001092c 	.word	0x0001092c
    e940:	00010503 	.word	0x00010503

0000e944 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    e944:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    e946:	4c0b      	ldr	r4, [pc, #44]	; (e974 <idle+0x30>)
    e948:	4d0b      	ldr	r5, [pc, #44]	; (e978 <idle+0x34>)
	__asm__ volatile(
    e94a:	f04f 0220 	mov.w	r2, #32
    e94e:	f3ef 8311 	mrs	r3, BASEPRI
    e952:	f382 8812 	msr	BASEPRI_MAX, r2
    e956:	f3bf 8f6f 	isb	sy
    e95a:	f001 fe1e 	bl	1059a <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    e95e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    e960:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    e962:	b913      	cbnz	r3, e96a <idle+0x26>
	arch_cpu_idle();
    e964:	f7fb fffa 	bl	a95c <arch_cpu_idle>
}
    e968:	e7ef      	b.n	e94a <idle+0x6>
    e96a:	f7fb ff29 	bl	a7c0 <pm_system_suspend>
    e96e:	2800      	cmp	r0, #0
    e970:	d1eb      	bne.n	e94a <idle+0x6>
    e972:	e7f7      	b.n	e964 <idle+0x20>
    e974:	20008518 	.word	0x20008518
    e978:	20008556 	.word	0x20008556

0000e97c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    e97c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e980:	4604      	mov	r4, r0
    e982:	4617      	mov	r7, r2
    e984:	461e      	mov	r6, r3
    e986:	f04f 0320 	mov.w	r3, #32
    e98a:	f3ef 8811 	mrs	r8, BASEPRI
    e98e:	f383 8812 	msr	BASEPRI_MAX, r3
    e992:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    e996:	68c3      	ldr	r3, [r0, #12]
    e998:	4a33      	ldr	r2, [pc, #204]	; (ea68 <z_impl_k_mutex_lock+0xec>)
    e99a:	b17b      	cbz	r3, e9bc <z_impl_k_mutex_lock+0x40>
    e99c:	6880      	ldr	r0, [r0, #8]
    e99e:	6891      	ldr	r1, [r2, #8]
    e9a0:	4288      	cmp	r0, r1
    e9a2:	d019      	beq.n	e9d8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    e9a4:	ea57 0306 	orrs.w	r3, r7, r6
    e9a8:	d118      	bne.n	e9dc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    e9aa:	f388 8811 	msr	BASEPRI, r8
    e9ae:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    e9b2:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    e9b6:	b002      	add	sp, #8
    e9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    e9bc:	6891      	ldr	r1, [r2, #8]
    e9be:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    e9c2:	3301      	adds	r3, #1
    e9c4:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    e9c6:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    e9c8:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    e9ca:	60a3      	str	r3, [r4, #8]
    e9cc:	f388 8811 	msr	BASEPRI, r8
    e9d0:	f3bf 8f6f 	isb	sy
		return 0;
    e9d4:	2000      	movs	r0, #0
    e9d6:	e7ee      	b.n	e9b6 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    e9d8:	6921      	ldr	r1, [r4, #16]
    e9da:	e7f2      	b.n	e9c2 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    e9dc:	f991 100e 	ldrsb.w	r1, [r1, #14]
    e9e0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    e9e4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    e9e8:	4299      	cmp	r1, r3
    e9ea:	bfa8      	it	ge
    e9ec:	4619      	movge	r1, r3
    e9ee:	4291      	cmp	r1, r2
    e9f0:	bfb8      	it	lt
    e9f2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    e9f4:	428b      	cmp	r3, r1
    e9f6:	dd2e      	ble.n	ea56 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    e9f8:	f001 fcfc 	bl	103f4 <adjust_owner_prio.isra.0>
    e9fc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    e9fe:	4622      	mov	r2, r4
    ea00:	4641      	mov	r1, r8
    ea02:	e9cd 7600 	strd	r7, r6, [sp]
    ea06:	4819      	ldr	r0, [pc, #100]	; (ea6c <z_impl_k_mutex_lock+0xf0>)
    ea08:	f000 f9f8 	bl	edfc <z_pend_curr>
	if (got_mutex == 0) {
    ea0c:	2800      	cmp	r0, #0
    ea0e:	d0e1      	beq.n	e9d4 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    ea10:	f04f 0320 	mov.w	r3, #32
    ea14:	f3ef 8611 	mrs	r6, BASEPRI
    ea18:	f383 8812 	msr	BASEPRI_MAX, r3
    ea1c:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    ea20:	68a0      	ldr	r0, [r4, #8]
    ea22:	b1d0      	cbz	r0, ea5a <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    ea24:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    ea26:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ea28:	429c      	cmp	r4, r3
    ea2a:	d00a      	beq.n	ea42 <z_impl_k_mutex_lock+0xc6>
    ea2c:	b14b      	cbz	r3, ea42 <z_impl_k_mutex_lock+0xc6>
    ea2e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    ea32:	4299      	cmp	r1, r3
    ea34:	bfa8      	it	ge
    ea36:	4619      	movge	r1, r3
    ea38:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    ea3c:	4299      	cmp	r1, r3
    ea3e:	bfb8      	it	lt
    ea40:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    ea42:	f001 fcd7 	bl	103f4 <adjust_owner_prio.isra.0>
    ea46:	b140      	cbz	r0, ea5a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    ea48:	4631      	mov	r1, r6
    ea4a:	4808      	ldr	r0, [pc, #32]	; (ea6c <z_impl_k_mutex_lock+0xf0>)
    ea4c:	f000 fa3a 	bl	eec4 <z_reschedule>
	return -EAGAIN;
    ea50:	f06f 000a 	mvn.w	r0, #10
    ea54:	e7af      	b.n	e9b6 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    ea56:	2500      	movs	r5, #0
    ea58:	e7d1      	b.n	e9fe <z_impl_k_mutex_lock+0x82>
	if (resched) {
    ea5a:	2d00      	cmp	r5, #0
    ea5c:	d1f4      	bne.n	ea48 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    ea5e:	f386 8811 	msr	BASEPRI, r6
    ea62:	f3bf 8f6f 	isb	sy
    ea66:	e7f3      	b.n	ea50 <z_impl_k_mutex_lock+0xd4>
    ea68:	20008518 	.word	0x20008518
    ea6c:	20008557 	.word	0x20008557

0000ea70 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    ea70:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    ea72:	6883      	ldr	r3, [r0, #8]
{
    ea74:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    ea76:	b36b      	cbz	r3, ead4 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    ea78:	4a19      	ldr	r2, [pc, #100]	; (eae0 <z_impl_k_mutex_unlock+0x70>)
    ea7a:	6892      	ldr	r2, [r2, #8]
    ea7c:	4293      	cmp	r3, r2
    ea7e:	d12c      	bne.n	eada <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    ea80:	68c3      	ldr	r3, [r0, #12]
    ea82:	2b01      	cmp	r3, #1
    ea84:	d903      	bls.n	ea8e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    ea86:	3b01      	subs	r3, #1
    ea88:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    ea8a:	2000      	movs	r0, #0
}
    ea8c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    ea8e:	f04f 0320 	mov.w	r3, #32
    ea92:	f3ef 8511 	mrs	r5, BASEPRI
    ea96:	f383 8812 	msr	BASEPRI_MAX, r3
    ea9a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    ea9e:	6901      	ldr	r1, [r0, #16]
    eaa0:	6880      	ldr	r0, [r0, #8]
    eaa2:	f001 fca7 	bl	103f4 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    eaa6:	4620      	mov	r0, r4
    eaa8:	f001 fd2f 	bl	1050a <z_unpend_first_thread>
	mutex->owner = new_owner;
    eaac:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    eaae:	b158      	cbz	r0, eac8 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    eab0:	f990 200e 	ldrsb.w	r2, [r0, #14]
    eab4:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    eab6:	2200      	movs	r2, #0
    eab8:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    eaba:	f001 fcf0 	bl	1049e <z_ready_thread>
		z_reschedule(&lock, key);
    eabe:	4629      	mov	r1, r5
    eac0:	4808      	ldr	r0, [pc, #32]	; (eae4 <z_impl_k_mutex_unlock+0x74>)
    eac2:	f000 f9ff 	bl	eec4 <z_reschedule>
    eac6:	e7e0      	b.n	ea8a <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    eac8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    eaca:	f385 8811 	msr	BASEPRI, r5
    eace:	f3bf 8f6f 	isb	sy
    ead2:	e7da      	b.n	ea8a <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    ead4:	f06f 0015 	mvn.w	r0, #21
    ead8:	e7d8      	b.n	ea8c <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    eada:	f04f 30ff 	mov.w	r0, #4294967295
    eade:	e7d5      	b.n	ea8c <z_impl_k_mutex_unlock+0x1c>
    eae0:	20008518 	.word	0x20008518
    eae4:	20008557 	.word	0x20008557

0000eae8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    eae8:	b538      	push	{r3, r4, r5, lr}
    eaea:	4604      	mov	r4, r0
	__asm__ volatile(
    eaec:	f04f 0320 	mov.w	r3, #32
    eaf0:	f3ef 8511 	mrs	r5, BASEPRI
    eaf4:	f383 8812 	msr	BASEPRI_MAX, r3
    eaf8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    eafc:	f001 fd05 	bl	1050a <z_unpend_first_thread>

	if (thread != NULL) {
    eb00:	b148      	cbz	r0, eb16 <z_impl_k_sem_give+0x2e>
    eb02:	2200      	movs	r2, #0
    eb04:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    eb06:	f001 fcca 	bl	1049e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    eb0a:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    eb0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    eb10:	4804      	ldr	r0, [pc, #16]	; (eb24 <z_impl_k_sem_give+0x3c>)
    eb12:	f000 b9d7 	b.w	eec4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    eb16:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    eb1a:	429a      	cmp	r2, r3
    eb1c:	bf18      	it	ne
    eb1e:	3301      	addne	r3, #1
    eb20:	60a3      	str	r3, [r4, #8]
}
    eb22:	e7f2      	b.n	eb0a <z_impl_k_sem_give+0x22>
    eb24:	20008557 	.word	0x20008557

0000eb28 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    eb28:	b513      	push	{r0, r1, r4, lr}
    eb2a:	f04f 0420 	mov.w	r4, #32
    eb2e:	f3ef 8111 	mrs	r1, BASEPRI
    eb32:	f384 8812 	msr	BASEPRI_MAX, r4
    eb36:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    eb3a:	6884      	ldr	r4, [r0, #8]
    eb3c:	b144      	cbz	r4, eb50 <z_impl_k_sem_take+0x28>
		sem->count--;
    eb3e:	3c01      	subs	r4, #1
    eb40:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    eb42:	f381 8811 	msr	BASEPRI, r1
    eb46:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    eb4a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    eb4c:	b002      	add	sp, #8
    eb4e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    eb50:	ea52 0403 	orrs.w	r4, r2, r3
    eb54:	d106      	bne.n	eb64 <z_impl_k_sem_take+0x3c>
    eb56:	f381 8811 	msr	BASEPRI, r1
    eb5a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    eb5e:	f06f 000f 	mvn.w	r0, #15
    eb62:	e7f3      	b.n	eb4c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    eb64:	e9cd 2300 	strd	r2, r3, [sp]
    eb68:	4602      	mov	r2, r0
    eb6a:	4802      	ldr	r0, [pc, #8]	; (eb74 <z_impl_k_sem_take+0x4c>)
    eb6c:	f000 f946 	bl	edfc <z_pend_curr>
	return ret;
    eb70:	e7ec      	b.n	eb4c <z_impl_k_sem_take+0x24>
    eb72:	bf00      	nop
    eb74:	20008557 	.word	0x20008557

0000eb78 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    eb78:	89c3      	ldrh	r3, [r0, #14]
    eb7a:	2b7f      	cmp	r3, #127	; 0x7f
    eb7c:	d812      	bhi.n	eba4 <sliceable+0x2c>
	int ret = slice_ticks;
    eb7e:	4b0a      	ldr	r3, [pc, #40]	; (eba8 <sliceable+0x30>)
    eb80:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    eb82:	b163      	cbz	r3, eb9e <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    eb84:	4b09      	ldr	r3, [pc, #36]	; (ebac <sliceable+0x34>)
    eb86:	f990 200e 	ldrsb.w	r2, [r0, #14]
    eb8a:	681b      	ldr	r3, [r3, #0]
    eb8c:	429a      	cmp	r2, r3
    eb8e:	db09      	blt.n	eba4 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    eb90:	7b43      	ldrb	r3, [r0, #13]
    eb92:	06db      	lsls	r3, r3, #27
    eb94:	d106      	bne.n	eba4 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    eb96:	4b06      	ldr	r3, [pc, #24]	; (ebb0 <sliceable+0x38>)
    eb98:	1ac3      	subs	r3, r0, r3
    eb9a:	bf18      	it	ne
    eb9c:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    eb9e:	f003 0001 	and.w	r0, r3, #1
    eba2:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    eba4:	2300      	movs	r3, #0
    eba6:	e7fa      	b.n	eb9e <sliceable+0x26>
    eba8:	20008544 	.word	0x20008544
    ebac:	20008540 	.word	0x20008540
    ebb0:	20008188 	.word	0x20008188

0000ebb4 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
    ebb4:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    ebb6:	4b04      	ldr	r3, [pc, #16]	; (ebc8 <slice_timeout+0x14>)
    ebb8:	1ac0      	subs	r0, r0, r3
    ebba:	4b04      	ldr	r3, [pc, #16]	; (ebcc <slice_timeout+0x18>)
    ebbc:	10c0      	asrs	r0, r0, #3
    ebbe:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
    ebc0:	4b03      	ldr	r3, [pc, #12]	; (ebd0 <slice_timeout+0x1c>)
    ebc2:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    ebc4:	4770      	bx	lr
    ebc6:	bf00      	nop
    ebc8:	20008288 	.word	0x20008288
    ebcc:	aaaaaaab 	.word	0xaaaaaaab
    ebd0:	20008557 	.word	0x20008557

0000ebd4 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    ebd4:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    ebd6:	4b0e      	ldr	r3, [pc, #56]	; (ec10 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    ebd8:	4c0e      	ldr	r4, [pc, #56]	; (ec14 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    ebda:	7c1e      	ldrb	r6, [r3, #16]
{
    ebdc:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    ebde:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    ebe2:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    ebe6:	4620      	mov	r0, r4
    ebe8:	f001 fcc1 	bl	1056e <z_abort_timeout>
	slice_expired[cpu] = false;
    ebec:	2200      	movs	r2, #0
    ebee:	4b0a      	ldr	r3, [pc, #40]	; (ec18 <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
    ebf0:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    ebf2:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    ebf4:	f7ff ffc0 	bl	eb78 <sliceable>
    ebf8:	b148      	cbz	r0, ec0e <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    ebfa:	4b08      	ldr	r3, [pc, #32]	; (ec1c <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    ebfc:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
    ebfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
    ec02:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    ec04:	4906      	ldr	r1, [pc, #24]	; (ec20 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    ec06:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    ec08:	17d3      	asrs	r3, r2, #31
    ec0a:	f000 bb57 	b.w	f2bc <z_add_timeout>
}
    ec0e:	bd70      	pop	{r4, r5, r6, pc}
    ec10:	20008518 	.word	0x20008518
    ec14:	20008288 	.word	0x20008288
    ec18:	20008557 	.word	0x20008557
    ec1c:	20008544 	.word	0x20008544
    ec20:	0000ebb5 	.word	0x0000ebb5

0000ec24 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    ec24:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    ec26:	4d0d      	ldr	r5, [pc, #52]	; (ec5c <update_cache+0x38>)
    ec28:	462b      	mov	r3, r5
    ec2a:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ec2e:	429c      	cmp	r4, r3
    ec30:	d000      	beq.n	ec34 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    ec32:	b904      	cbnz	r4, ec36 <update_cache+0x12>
    ec34:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    ec36:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    ec38:	b938      	cbnz	r0, ec4a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    ec3a:	7b5a      	ldrb	r2, [r3, #13]
    ec3c:	06d2      	lsls	r2, r2, #27
    ec3e:	d104      	bne.n	ec4a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    ec40:	69a2      	ldr	r2, [r4, #24]
    ec42:	b912      	cbnz	r2, ec4a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    ec44:	89da      	ldrh	r2, [r3, #14]
    ec46:	2a7f      	cmp	r2, #127	; 0x7f
    ec48:	d805      	bhi.n	ec56 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    ec4a:	429c      	cmp	r4, r3
    ec4c:	d002      	beq.n	ec54 <update_cache+0x30>
			z_reset_time_slice(thread);
    ec4e:	4620      	mov	r0, r4
    ec50:	f7ff ffc0 	bl	ebd4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    ec54:	4623      	mov	r3, r4
    ec56:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    ec58:	bd38      	pop	{r3, r4, r5, pc}
    ec5a:	bf00      	nop
    ec5c:	20008518 	.word	0x20008518

0000ec60 <move_thread_to_end_of_prio_q>:
{
    ec60:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    ec62:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    ec66:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    ec68:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    ec6a:	7b43      	ldrb	r3, [r0, #13]
    ec6c:	da04      	bge.n	ec78 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ec6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ec72:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    ec74:	f001 fbd9 	bl	1042a <sys_dlist_remove>
	return list->head == list;
    ec78:	4a15      	ldr	r2, [pc, #84]	; (ecd0 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
    ec7a:	7b4b      	ldrb	r3, [r1, #13]
    ec7c:	4610      	mov	r0, r2
    ec7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ec82:	734b      	strb	r3, [r1, #13]
    ec84:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    ec88:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ec8a:	4283      	cmp	r3, r0
    ec8c:	bf08      	it	eq
    ec8e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ec90:	b923      	cbnz	r3, ec9c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    ec92:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    ec96:	6021      	str	r1, [r4, #0]
	list->tail = node;
    ec98:	6211      	str	r1, [r2, #32]
}
    ec9a:	e00c      	b.n	ecb6 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    ec9c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    eca0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    eca4:	42b5      	cmp	r5, r6
    eca6:	d00e      	beq.n	ecc6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    eca8:	42ae      	cmp	r6, r5
    ecaa:	dd0c      	ble.n	ecc6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    ecac:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    ecae:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    ecb2:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    ecb4:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    ecb6:	6890      	ldr	r0, [r2, #8]
}
    ecb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    ecbc:	1a43      	subs	r3, r0, r1
    ecbe:	4258      	negs	r0, r3
    ecc0:	4158      	adcs	r0, r3
    ecc2:	f7ff bfaf 	b.w	ec24 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    ecc6:	429c      	cmp	r4, r3
    ecc8:	d0e3      	beq.n	ec92 <move_thread_to_end_of_prio_q+0x32>
    ecca:	681b      	ldr	r3, [r3, #0]
    eccc:	e7e0      	b.n	ec90 <move_thread_to_end_of_prio_q+0x30>
    ecce:	bf00      	nop
    ecd0:	20008518 	.word	0x20008518

0000ecd4 <ready_thread>:
{
    ecd4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    ecd6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    ecda:	7b42      	ldrb	r2, [r0, #13]
    ecdc:	2b00      	cmp	r3, #0
    ecde:	db29      	blt.n	ed34 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ece0:	06d3      	lsls	r3, r2, #27
    ece2:	d127      	bne.n	ed34 <ready_thread+0x60>
	return node->next != NULL;
    ece4:	6983      	ldr	r3, [r0, #24]
    ece6:	bb2b      	cbnz	r3, ed34 <ready_thread+0x60>
	return list->head == list;
    ece8:	4913      	ldr	r1, [pc, #76]	; (ed38 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    ecea:	f062 027f 	orn	r2, r2, #127	; 0x7f
    ecee:	7342      	strb	r2, [r0, #13]
    ecf0:	460a      	mov	r2, r1
    ecf2:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ecf6:	4294      	cmp	r4, r2
    ecf8:	bf18      	it	ne
    ecfa:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    ecfc:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ecfe:	b923      	cbnz	r3, ed0a <ready_thread+0x36>
	node->prev = tail;
    ed00:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    ed04:	6020      	str	r0, [r4, #0]
	list->tail = node;
    ed06:	6208      	str	r0, [r1, #32]
}
    ed08:	e00c      	b.n	ed24 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    ed0a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    ed0e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    ed12:	42b5      	cmp	r5, r6
    ed14:	d00a      	beq.n	ed2c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    ed16:	42ae      	cmp	r6, r5
    ed18:	dd08      	ble.n	ed2c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    ed1a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    ed1c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    ed20:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    ed22:	6058      	str	r0, [r3, #4]
		update_cache(0);
    ed24:	2000      	movs	r0, #0
}
    ed26:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    ed28:	f7ff bf7c 	b.w	ec24 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    ed2c:	42a3      	cmp	r3, r4
    ed2e:	d0e7      	beq.n	ed00 <ready_thread+0x2c>
    ed30:	681b      	ldr	r3, [r3, #0]
    ed32:	e7e4      	b.n	ecfe <ready_thread+0x2a>
}
    ed34:	bc70      	pop	{r4, r5, r6}
    ed36:	4770      	bx	lr
    ed38:	20008518 	.word	0x20008518

0000ed3c <unready_thread>:
{
    ed3c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    ed3e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    ed42:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    ed44:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    ed46:	7b43      	ldrb	r3, [r0, #13]
    ed48:	da04      	bge.n	ed54 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ed4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ed4e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    ed50:	f001 fb6b 	bl	1042a <sys_dlist_remove>
	update_cache(thread == _current);
    ed54:	4b04      	ldr	r3, [pc, #16]	; (ed68 <unready_thread+0x2c>)
    ed56:	6898      	ldr	r0, [r3, #8]
    ed58:	1a43      	subs	r3, r0, r1
    ed5a:	4258      	negs	r0, r3
    ed5c:	4158      	adcs	r0, r3
}
    ed5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    ed62:	f7ff bf5f 	b.w	ec24 <update_cache>
    ed66:	bf00      	nop
    ed68:	20008518 	.word	0x20008518

0000ed6c <pend_locked>:
{
    ed6c:	b570      	push	{r4, r5, r6, lr}
    ed6e:	4615      	mov	r5, r2
    ed70:	461c      	mov	r4, r3
    ed72:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    ed74:	f001 fb6b 	bl	1044e <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ed78:	f1b4 3fff 	cmp.w	r4, #4294967295
    ed7c:	bf08      	it	eq
    ed7e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    ed82:	d008      	beq.n	ed96 <pend_locked+0x2a>
    ed84:	462a      	mov	r2, r5
    ed86:	4623      	mov	r3, r4
    ed88:	f106 0018 	add.w	r0, r6, #24
    ed8c:	4902      	ldr	r1, [pc, #8]	; (ed98 <pend_locked+0x2c>)
}
    ed8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ed92:	f000 ba93 	b.w	f2bc <z_add_timeout>
    ed96:	bd70      	pop	{r4, r5, r6, pc}
    ed98:	00010503 	.word	0x00010503

0000ed9c <z_time_slice>:
{
    ed9c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    ed9e:	f04f 0320 	mov.w	r3, #32
    eda2:	f3ef 8511 	mrs	r5, BASEPRI
    eda6:	f383 8812 	msr	BASEPRI_MAX, r3
    edaa:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    edae:	4b10      	ldr	r3, [pc, #64]	; (edf0 <z_time_slice+0x54>)
	if (pending_current == curr) {
    edb0:	4a10      	ldr	r2, [pc, #64]	; (edf4 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    edb2:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    edb4:	6810      	ldr	r0, [r2, #0]
    edb6:	42a0      	cmp	r0, r4
    edb8:	d106      	bne.n	edc8 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    edba:	f7ff ff0b 	bl	ebd4 <z_reset_time_slice>
	__asm__ volatile(
    edbe:	f385 8811 	msr	BASEPRI, r5
    edc2:	f3bf 8f6f 	isb	sy
}
    edc6:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    edc8:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    edca:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    edcc:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    edce:	4a0a      	ldr	r2, [pc, #40]	; (edf8 <z_time_slice+0x5c>)
    edd0:	5cd3      	ldrb	r3, [r2, r3]
    edd2:	2b00      	cmp	r3, #0
    edd4:	d0f3      	beq.n	edbe <z_time_slice+0x22>
    edd6:	4620      	mov	r0, r4
    edd8:	f7ff fece 	bl	eb78 <sliceable>
    eddc:	2800      	cmp	r0, #0
    edde:	d0ee      	beq.n	edbe <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    ede0:	7b63      	ldrb	r3, [r4, #13]
    ede2:	06db      	lsls	r3, r3, #27
    ede4:	d102      	bne.n	edec <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    ede6:	4620      	mov	r0, r4
    ede8:	f7ff ff3a 	bl	ec60 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    edec:	4620      	mov	r0, r4
    edee:	e7e4      	b.n	edba <z_time_slice+0x1e>
    edf0:	20008518 	.word	0x20008518
    edf4:	2000853c 	.word	0x2000853c
    edf8:	20008557 	.word	0x20008557

0000edfc <z_pend_curr>:
{
    edfc:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    edfe:	480c      	ldr	r0, [pc, #48]	; (ee30 <z_pend_curr+0x34>)
    ee00:	4d0c      	ldr	r5, [pc, #48]	; (ee34 <z_pend_curr+0x38>)
    ee02:	6886      	ldr	r6, [r0, #8]
{
    ee04:	460c      	mov	r4, r1
	pending_current = _current;
    ee06:	602e      	str	r6, [r5, #0]
{
    ee08:	4611      	mov	r1, r2
    ee0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    ee0e:	f04f 0620 	mov.w	r6, #32
    ee12:	f3ef 8511 	mrs	r5, BASEPRI
    ee16:	f386 8812 	msr	BASEPRI_MAX, r6
    ee1a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    ee1e:	6880      	ldr	r0, [r0, #8]
    ee20:	f7ff ffa4 	bl	ed6c <pend_locked>
	ret = arch_swap(key);
    ee24:	4620      	mov	r0, r4
}
    ee26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ee2a:	f7fb be73 	b.w	ab14 <arch_swap>
    ee2e:	bf00      	nop
    ee30:	20008518 	.word	0x20008518
    ee34:	2000853c 	.word	0x2000853c

0000ee38 <z_set_prio>:
{
    ee38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ee3a:	4604      	mov	r4, r0
    ee3c:	f04f 0320 	mov.w	r3, #32
    ee40:	f3ef 8611 	mrs	r6, BASEPRI
    ee44:	f383 8812 	msr	BASEPRI_MAX, r3
    ee48:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    ee4c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    ee4e:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ee50:	06da      	lsls	r2, r3, #27
    ee52:	d119      	bne.n	ee88 <z_set_prio+0x50>
	return node->next != NULL;
    ee54:	6985      	ldr	r5, [r0, #24]
    ee56:	b9bd      	cbnz	r5, ee88 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ee58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ee5c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    ee5e:	f001 fae4 	bl	1042a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    ee62:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    ee64:	4a16      	ldr	r2, [pc, #88]	; (eec0 <z_set_prio+0x88>)
    ee66:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ee6a:	7343      	strb	r3, [r0, #13]
    ee6c:	4613      	mov	r3, r2
				thread->base.prio = prio;
    ee6e:	7381      	strb	r1, [r0, #14]
    ee70:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ee74:	4298      	cmp	r0, r3
    ee76:	bf18      	it	ne
    ee78:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    ee7a:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ee7c:	b95d      	cbnz	r5, ee96 <z_set_prio+0x5e>
	node->prev = tail;
    ee7e:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    ee82:	6004      	str	r4, [r0, #0]
	list->tail = node;
    ee84:	6214      	str	r4, [r2, #32]
}
    ee86:	e011      	b.n	eeac <z_set_prio+0x74>
    ee88:	2000      	movs	r0, #0
			thread->base.prio = prio;
    ee8a:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    ee8c:	f386 8811 	msr	BASEPRI, r6
    ee90:	f3bf 8f6f 	isb	sy
}
    ee94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    ee96:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    ee9a:	42b9      	cmp	r1, r7
    ee9c:	d00b      	beq.n	eeb6 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    ee9e:	428f      	cmp	r7, r1
    eea0:	dd09      	ble.n	eeb6 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    eea2:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    eea4:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    eea8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    eeaa:	606c      	str	r4, [r5, #4]
			update_cache(1);
    eeac:	2001      	movs	r0, #1
    eeae:	f7ff feb9 	bl	ec24 <update_cache>
    eeb2:	2001      	movs	r0, #1
    eeb4:	e7ea      	b.n	ee8c <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    eeb6:	42a8      	cmp	r0, r5
    eeb8:	d0e1      	beq.n	ee7e <z_set_prio+0x46>
    eeba:	682d      	ldr	r5, [r5, #0]
    eebc:	e7de      	b.n	ee7c <z_set_prio+0x44>
    eebe:	bf00      	nop
    eec0:	20008518 	.word	0x20008518

0000eec4 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    eec4:	b949      	cbnz	r1, eeda <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    eec6:	f3ef 8005 	mrs	r0, IPSR
    eeca:	b930      	cbnz	r0, eeda <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    eecc:	4b05      	ldr	r3, [pc, #20]	; (eee4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    eece:	699a      	ldr	r2, [r3, #24]
    eed0:	689b      	ldr	r3, [r3, #8]
    eed2:	429a      	cmp	r2, r3
    eed4:	d001      	beq.n	eeda <z_reschedule+0x16>
    eed6:	f7fb be1d 	b.w	ab14 <arch_swap>
    eeda:	f381 8811 	msr	BASEPRI, r1
    eede:	f3bf 8f6f 	isb	sy
}
    eee2:	4770      	bx	lr
    eee4:	20008518 	.word	0x20008518

0000eee8 <z_sched_start>:
{
    eee8:	b510      	push	{r4, lr}
	__asm__ volatile(
    eeea:	f04f 0220 	mov.w	r2, #32
    eeee:	f3ef 8411 	mrs	r4, BASEPRI
    eef2:	f382 8812 	msr	BASEPRI_MAX, r2
    eef6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    eefa:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    eefc:	0751      	lsls	r1, r2, #29
    eefe:	d404      	bmi.n	ef0a <z_sched_start+0x22>
	__asm__ volatile(
    ef00:	f384 8811 	msr	BASEPRI, r4
    ef04:	f3bf 8f6f 	isb	sy
}
    ef08:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ef0a:	f022 0204 	bic.w	r2, r2, #4
    ef0e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    ef10:	f7ff fee0 	bl	ecd4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    ef14:	4621      	mov	r1, r4
}
    ef16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    ef1a:	4801      	ldr	r0, [pc, #4]	; (ef20 <z_sched_start+0x38>)
    ef1c:	f7ff bfd2 	b.w	eec4 <z_reschedule>
    ef20:	20008558 	.word	0x20008558

0000ef24 <z_impl_k_thread_suspend>:
{
    ef24:	b570      	push	{r4, r5, r6, lr}
    ef26:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    ef28:	3018      	adds	r0, #24
    ef2a:	f001 fb20 	bl	1056e <z_abort_timeout>
	__asm__ volatile(
    ef2e:	f04f 0320 	mov.w	r3, #32
    ef32:	f3ef 8611 	mrs	r6, BASEPRI
    ef36:	f383 8812 	msr	BASEPRI_MAX, r3
    ef3a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    ef3e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    ef42:	7b63      	ldrb	r3, [r4, #13]
    ef44:	2a00      	cmp	r2, #0
    ef46:	da05      	bge.n	ef54 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ef48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    ef4c:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ef4e:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    ef50:	f001 fa6b 	bl	1042a <sys_dlist_remove>
		update_cache(thread == _current);
    ef54:	4d0b      	ldr	r5, [pc, #44]	; (ef84 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    ef56:	7b63      	ldrb	r3, [r4, #13]
    ef58:	68a8      	ldr	r0, [r5, #8]
    ef5a:	f043 0310 	orr.w	r3, r3, #16
    ef5e:	7363      	strb	r3, [r4, #13]
    ef60:	1b03      	subs	r3, r0, r4
    ef62:	4258      	negs	r0, r3
    ef64:	4158      	adcs	r0, r3
    ef66:	f7ff fe5d 	bl	ec24 <update_cache>
	__asm__ volatile(
    ef6a:	f386 8811 	msr	BASEPRI, r6
    ef6e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    ef72:	68ab      	ldr	r3, [r5, #8]
    ef74:	42a3      	cmp	r3, r4
    ef76:	d103      	bne.n	ef80 <z_impl_k_thread_suspend+0x5c>
}
    ef78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    ef7c:	f001 baed 	b.w	1055a <z_reschedule_unlocked>
}
    ef80:	bd70      	pop	{r4, r5, r6, pc}
    ef82:	bf00      	nop
    ef84:	20008518 	.word	0x20008518

0000ef88 <k_sched_lock>:
	__asm__ volatile(
    ef88:	f04f 0320 	mov.w	r3, #32
    ef8c:	f3ef 8111 	mrs	r1, BASEPRI
    ef90:	f383 8812 	msr	BASEPRI_MAX, r3
    ef94:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    ef98:	4b04      	ldr	r3, [pc, #16]	; (efac <k_sched_lock+0x24>)
    ef9a:	689a      	ldr	r2, [r3, #8]
    ef9c:	7bd3      	ldrb	r3, [r2, #15]
    ef9e:	3b01      	subs	r3, #1
    efa0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    efa2:	f381 8811 	msr	BASEPRI, r1
    efa6:	f3bf 8f6f 	isb	sy
}
    efaa:	4770      	bx	lr
    efac:	20008518 	.word	0x20008518

0000efb0 <k_sched_unlock>:
{
    efb0:	b510      	push	{r4, lr}
	__asm__ volatile(
    efb2:	f04f 0320 	mov.w	r3, #32
    efb6:	f3ef 8411 	mrs	r4, BASEPRI
    efba:	f383 8812 	msr	BASEPRI_MAX, r3
    efbe:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    efc2:	4b08      	ldr	r3, [pc, #32]	; (efe4 <k_sched_unlock+0x34>)
		update_cache(0);
    efc4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    efc6:	689a      	ldr	r2, [r3, #8]
    efc8:	7bd3      	ldrb	r3, [r2, #15]
    efca:	3301      	adds	r3, #1
    efcc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    efce:	f7ff fe29 	bl	ec24 <update_cache>
	__asm__ volatile(
    efd2:	f384 8811 	msr	BASEPRI, r4
    efd6:	f3bf 8f6f 	isb	sy
}
    efda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    efde:	f001 babc 	b.w	1055a <z_reschedule_unlocked>
    efe2:	bf00      	nop
    efe4:	20008518 	.word	0x20008518

0000efe8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    efe8:	4b02      	ldr	r3, [pc, #8]	; (eff4 <z_sched_init+0xc>)
    efea:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    efee:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    eff2:	4770      	bx	lr
    eff4:	20008518 	.word	0x20008518

0000eff8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    eff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    effa:	f04f 0320 	mov.w	r3, #32
    effe:	f3ef 8511 	mrs	r5, BASEPRI
    f002:	f383 8812 	msr	BASEPRI_MAX, r3
    f006:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    f00a:	4919      	ldr	r1, [pc, #100]	; (f070 <z_impl_k_yield+0x78>)
    f00c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f00e:	7b43      	ldrb	r3, [r0, #13]
    f010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f014:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    f016:	f001 fa08 	bl	1042a <sys_dlist_remove>
	return list->head == list;
    f01a:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    f01c:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    f01e:	7b5a      	ldrb	r2, [r3, #13]
    f020:	f062 027f 	orn	r2, r2, #127	; 0x7f
    f024:	735a      	strb	r2, [r3, #13]
    f026:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    f02a:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f02c:	4282      	cmp	r2, r0
    f02e:	bf08      	it	eq
    f030:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f032:	b922      	cbnz	r2, f03e <z_impl_k_yield+0x46>
	node->prev = tail;
    f034:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    f038:	6023      	str	r3, [r4, #0]
	list->tail = node;
    f03a:	620b      	str	r3, [r1, #32]
}
    f03c:	e00c      	b.n	f058 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    f03e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    f042:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    f046:	42be      	cmp	r6, r7
    f048:	d00e      	beq.n	f068 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f04a:	42b7      	cmp	r7, r6
    f04c:	dd0c      	ble.n	f068 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    f04e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    f050:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    f054:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    f056:	6053      	str	r3, [r2, #4]
	update_cache(1);
    f058:	2001      	movs	r0, #1
    f05a:	f7ff fde3 	bl	ec24 <update_cache>
    f05e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    f060:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    f064:	f7fb bd56 	b.w	ab14 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    f068:	42a2      	cmp	r2, r4
    f06a:	d0e3      	beq.n	f034 <z_impl_k_yield+0x3c>
    f06c:	6812      	ldr	r2, [r2, #0]
    f06e:	e7e0      	b.n	f032 <z_impl_k_yield+0x3a>
    f070:	20008518 	.word	0x20008518

0000f074 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    f074:	ea50 0301 	orrs.w	r3, r0, r1
{
    f078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f07c:	4605      	mov	r5, r0
    f07e:	460e      	mov	r6, r1
	if (ticks == 0) {
    f080:	d103      	bne.n	f08a <z_tick_sleep+0x16>
	z_impl_k_yield();
    f082:	f7ff ffb9 	bl	eff8 <z_impl_k_yield>
		k_yield();
		return 0;
    f086:	2000      	movs	r0, #0
    f088:	e02c      	b.n	f0e4 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    f08a:	1c83      	adds	r3, r0, #2
    f08c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    f090:	db2a      	blt.n	f0e8 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    f092:	f001 fa92 	bl	105ba <sys_clock_tick_get_32>
    f096:	182c      	adds	r4, r5, r0
    f098:	f04f 0320 	mov.w	r3, #32
    f09c:	f3ef 8811 	mrs	r8, BASEPRI
    f0a0:	f383 8812 	msr	BASEPRI_MAX, r3
    f0a4:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    f0a8:	4f11      	ldr	r7, [pc, #68]	; (f0f0 <z_tick_sleep+0x7c>)
    f0aa:	4b12      	ldr	r3, [pc, #72]	; (f0f4 <z_tick_sleep+0x80>)
    f0ac:	68b8      	ldr	r0, [r7, #8]
    f0ae:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    f0b0:	f7ff fe44 	bl	ed3c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    f0b4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    f0b6:	4910      	ldr	r1, [pc, #64]	; (f0f8 <z_tick_sleep+0x84>)
    f0b8:	462a      	mov	r2, r5
    f0ba:	4633      	mov	r3, r6
    f0bc:	3018      	adds	r0, #24
    f0be:	f000 f8fd 	bl	f2bc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    f0c2:	68ba      	ldr	r2, [r7, #8]
    f0c4:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    f0c6:	7b53      	ldrb	r3, [r2, #13]
    f0c8:	f043 0310 	orr.w	r3, r3, #16
    f0cc:	7353      	strb	r3, [r2, #13]
    f0ce:	f7fb fd21 	bl	ab14 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    f0d2:	f001 fa72 	bl	105ba <sys_clock_tick_get_32>
    f0d6:	1a20      	subs	r0, r4, r0
    f0d8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    f0dc:	2801      	cmp	r0, #1
    f0de:	f173 0300 	sbcs.w	r3, r3, #0
    f0e2:	dbd0      	blt.n	f086 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    f0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    f0e8:	f06f 0401 	mvn.w	r4, #1
    f0ec:	1a24      	subs	r4, r4, r0
    f0ee:	e7d3      	b.n	f098 <z_tick_sleep+0x24>
    f0f0:	20008518 	.word	0x20008518
    f0f4:	2000853c 	.word	0x2000853c
    f0f8:	00010503 	.word	0x00010503

0000f0fc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f0fc:	f1b1 3fff 	cmp.w	r1, #4294967295
    f100:	bf08      	it	eq
    f102:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    f106:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f108:	d106      	bne.n	f118 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    f10a:	4b08      	ldr	r3, [pc, #32]	; (f12c <z_impl_k_sleep+0x30>)
    f10c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    f10e:	f7ff ff09 	bl	ef24 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    f112:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    f116:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    f118:	f7ff ffac 	bl	f074 <z_tick_sleep>
    f11c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f120:	fb80 0303 	smull	r0, r3, r0, r3
    f124:	0bc0      	lsrs	r0, r0, #15
    f126:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    f12a:	e7f4      	b.n	f116 <z_impl_k_sleep+0x1a>
    f12c:	20008518 	.word	0x20008518

0000f130 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    f130:	4b01      	ldr	r3, [pc, #4]	; (f138 <z_impl_z_current_get+0x8>)
    f132:	6898      	ldr	r0, [r3, #8]
    f134:	4770      	bx	lr
    f136:	bf00      	nop
    f138:	20008518 	.word	0x20008518

0000f13c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    f13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f140:	4604      	mov	r4, r0
    f142:	f04f 0320 	mov.w	r3, #32
    f146:	f3ef 8611 	mrs	r6, BASEPRI
    f14a:	f383 8812 	msr	BASEPRI_MAX, r3
    f14e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    f152:	7b03      	ldrb	r3, [r0, #12]
    f154:	07d9      	lsls	r1, r3, #31
    f156:	d50b      	bpl.n	f170 <z_thread_abort+0x34>
	__asm__ volatile(
    f158:	f386 8811 	msr	BASEPRI, r6
    f15c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    f160:	4040      	eors	r0, r0
    f162:	f380 8811 	msr	BASEPRI, r0
    f166:	f04f 0004 	mov.w	r0, #4
    f16a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    f16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    f170:	7b43      	ldrb	r3, [r0, #13]
    f172:	071a      	lsls	r2, r3, #28
    f174:	d504      	bpl.n	f180 <z_thread_abort+0x44>
    f176:	f386 8811 	msr	BASEPRI, r6
    f17a:	f3bf 8f6f 	isb	sy
    f17e:	e7f5      	b.n	f16c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    f180:	f023 0220 	bic.w	r2, r3, #32
    f184:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    f188:	09d2      	lsrs	r2, r2, #7
    f18a:	d120      	bne.n	f1ce <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    f18c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    f18e:	68a3      	ldr	r3, [r4, #8]
    f190:	b113      	cbz	r3, f198 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    f192:	4620      	mov	r0, r4
    f194:	f001 f951 	bl	1043a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    f198:	f104 0018 	add.w	r0, r4, #24
    f19c:	f001 f9e7 	bl	1056e <z_abort_timeout>
    f1a0:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    f1a4:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    f1a8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f1aa:	42bd      	cmp	r5, r7
    f1ac:	d000      	beq.n	f1b0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    f1ae:	b9b5      	cbnz	r5, f1de <z_thread_abort+0xa2>
		update_cache(1);
    f1b0:	2001      	movs	r0, #1
    f1b2:	f7ff fd37 	bl	ec24 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    f1b6:	4b10      	ldr	r3, [pc, #64]	; (f1f8 <z_thread_abort+0xbc>)
    f1b8:	689b      	ldr	r3, [r3, #8]
    f1ba:	42a3      	cmp	r3, r4
    f1bc:	d1db      	bne.n	f176 <z_thread_abort+0x3a>
    f1be:	f3ef 8305 	mrs	r3, IPSR
    f1c2:	2b00      	cmp	r3, #0
    f1c4:	d1d7      	bne.n	f176 <z_thread_abort+0x3a>
    f1c6:	4630      	mov	r0, r6
    f1c8:	f7fb fca4 	bl	ab14 <arch_swap>
	return ret;
    f1cc:	e7d3      	b.n	f176 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f1ce:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    f1d2:	f043 0308 	orr.w	r3, r3, #8
    f1d6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    f1d8:	f001 f927 	bl	1042a <sys_dlist_remove>
}
    f1dc:	e7d7      	b.n	f18e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    f1de:	4628      	mov	r0, r5
    f1e0:	f001 f92b 	bl	1043a <unpend_thread_no_timeout>
    f1e4:	f105 0018 	add.w	r0, r5, #24
    f1e8:	f001 f9c1 	bl	1056e <z_abort_timeout>
		ready_thread(thread);
    f1ec:	4628      	mov	r0, r5
    f1ee:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    f1f2:	f7ff fd6f 	bl	ecd4 <ready_thread>
    f1f6:	e7d7      	b.n	f1a8 <z_thread_abort+0x6c>
    f1f8:	20008518 	.word	0x20008518

0000f1fc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    f1fc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    f1fe:	4806      	ldr	r0, [pc, #24]	; (f218 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    f200:	4a06      	ldr	r2, [pc, #24]	; (f21c <z_data_copy+0x20>)
    f202:	4907      	ldr	r1, [pc, #28]	; (f220 <z_data_copy+0x24>)
    f204:	1a12      	subs	r2, r2, r0
    f206:	f001 f8e4 	bl	103d2 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    f20a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    f20e:	4a05      	ldr	r2, [pc, #20]	; (f224 <z_data_copy+0x28>)
    f210:	4905      	ldr	r1, [pc, #20]	; (f228 <z_data_copy+0x2c>)
    f212:	4806      	ldr	r0, [pc, #24]	; (f22c <z_data_copy+0x30>)
    f214:	f001 b8dd 	b.w	103d2 <z_early_memcpy>
    f218:	20008000 	.word	0x20008000
    f21c:	20008154 	.word	0x20008154
    f220:	00011a68 	.word	0x00011a68
    f224:	00000000 	.word	0x00000000
    f228:	00011a68 	.word	0x00011a68
    f22c:	20008000 	.word	0x20008000

0000f230 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    f230:	4b03      	ldr	r3, [pc, #12]	; (f240 <elapsed+0x10>)
    f232:	681b      	ldr	r3, [r3, #0]
    f234:	b90b      	cbnz	r3, f23a <elapsed+0xa>
    f236:	f7fd bfd9 	b.w	d1ec <sys_clock_elapsed>
}
    f23a:	2000      	movs	r0, #0
    f23c:	4770      	bx	lr
    f23e:	bf00      	nop
    f240:	20008548 	.word	0x20008548

0000f244 <next_timeout>:

static int32_t next_timeout(void)
{
    f244:	b510      	push	{r4, lr}
	return list->head == list;
    f246:	4b0e      	ldr	r3, [pc, #56]	; (f280 <next_timeout+0x3c>)
    f248:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f24a:	429c      	cmp	r4, r3
    f24c:	d104      	bne.n	f258 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    f24e:	f7ff ffef 	bl	f230 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    f252:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    f256:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    f258:	f7ff ffea 	bl	f230 <elapsed>
	if ((to == NULL) ||
    f25c:	2c00      	cmp	r4, #0
    f25e:	d0f8      	beq.n	f252 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    f260:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    f264:	1a1b      	subs	r3, r3, r0
    f266:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    f26a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    f26e:	f172 0100 	sbcs.w	r1, r2, #0
    f272:	daee      	bge.n	f252 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    f274:	2a00      	cmp	r2, #0
    f276:	bfac      	ite	ge
    f278:	4618      	movge	r0, r3
    f27a:	2000      	movlt	r0, #0
	return ret;
    f27c:	e7eb      	b.n	f256 <next_timeout+0x12>
    f27e:	bf00      	nop
    f280:	20008124 	.word	0x20008124

0000f284 <remove_timeout>:
{
    f284:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f286:	b170      	cbz	r0, f2a6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    f288:	4b0b      	ldr	r3, [pc, #44]	; (f2b8 <remove_timeout+0x34>)
    f28a:	685b      	ldr	r3, [r3, #4]
    f28c:	4298      	cmp	r0, r3
    f28e:	d00a      	beq.n	f2a6 <remove_timeout+0x22>
    f290:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    f292:	b143      	cbz	r3, f2a6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    f294:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    f298:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    f29c:	1912      	adds	r2, r2, r4
    f29e:	eb41 0105 	adc.w	r1, r1, r5
    f2a2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    f2a6:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    f2aa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    f2ac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    f2ae:	2300      	movs	r3, #0
	node->prev = NULL;
    f2b0:	e9c0 3300 	strd	r3, r3, [r0]
}
    f2b4:	bd30      	pop	{r4, r5, pc}
    f2b6:	bf00      	nop
    f2b8:	20008124 	.word	0x20008124

0000f2bc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    f2c0:	bf08      	it	eq
    f2c2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    f2c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f2c8:	4604      	mov	r4, r0
    f2ca:	461d      	mov	r5, r3
    f2cc:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f2ce:	d05c      	beq.n	f38a <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    f2d0:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    f2d2:	f04f 0320 	mov.w	r3, #32
    f2d6:	f3ef 8711 	mrs	r7, BASEPRI
    f2da:	f383 8812 	msr	BASEPRI_MAX, r3
    f2de:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    f2e2:	3201      	adds	r2, #1
    f2e4:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    f2e8:	da24      	bge.n	f334 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    f2ea:	f06f 0301 	mvn.w	r3, #1
    f2ee:	492c      	ldr	r1, [pc, #176]	; (f3a0 <z_add_timeout+0xe4>)
    f2f0:	e9d1 2000 	ldrd	r2, r0, [r1]
    f2f4:	1a9b      	subs	r3, r3, r2
    f2f6:	f04f 32ff 	mov.w	r2, #4294967295
    f2fa:	eb62 0000 	sbc.w	r0, r2, r0
    f2fe:	1b9e      	subs	r6, r3, r6
    f300:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    f304:	2e01      	cmp	r6, #1
    f306:	f170 0300 	sbcs.w	r3, r0, #0
    f30a:	da01      	bge.n	f310 <z_add_timeout+0x54>
    f30c:	2601      	movs	r6, #1
    f30e:	2000      	movs	r0, #0
    f310:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    f314:	4e23      	ldr	r6, [pc, #140]	; (f3a4 <z_add_timeout+0xe8>)
    f316:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    f31a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f31c:	45b4      	cmp	ip, r6
    f31e:	bf08      	it	eq
    f320:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    f324:	f1bc 0f00 	cmp.w	ip, #0
    f328:	d10d      	bne.n	f346 <z_add_timeout+0x8a>
	node->prev = tail;
    f32a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    f32e:	602c      	str	r4, [r5, #0]
	list->tail = node;
    f330:	6074      	str	r4, [r6, #4]
}
    f332:	e01c      	b.n	f36e <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    f334:	f7ff ff7c 	bl	f230 <elapsed>
    f338:	3601      	adds	r6, #1
    f33a:	f145 0500 	adc.w	r5, r5, #0
    f33e:	1836      	adds	r6, r6, r0
    f340:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    f344:	e7e4      	b.n	f310 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    f346:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    f34a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    f34e:	4293      	cmp	r3, r2
    f350:	eb71 0e00 	sbcs.w	lr, r1, r0
    f354:	da1a      	bge.n	f38c <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    f356:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    f358:	f8dc 3004 	ldr.w	r3, [ip, #4]
    f35c:	eb60 0001 	sbc.w	r0, r0, r1
    f360:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    f364:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    f368:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    f36a:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    f36e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f370:	42b3      	cmp	r3, r6
    f372:	d006      	beq.n	f382 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    f374:	429c      	cmp	r4, r3
    f376:	d104      	bne.n	f382 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    f378:	f7ff ff64 	bl	f244 <next_timeout>
    f37c:	2100      	movs	r1, #0
    f37e:	f7fd ff03 	bl	d188 <sys_clock_set_timeout>
	__asm__ volatile(
    f382:	f387 8811 	msr	BASEPRI, r7
    f386:	f3bf 8f6f 	isb	sy
		}
	}
}
    f38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    f38c:	1a9b      	subs	r3, r3, r2
    f38e:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    f392:	45ac      	cmp	ip, r5
    f394:	e9c4 3104 	strd	r3, r1, [r4, #16]
    f398:	d0c7      	beq.n	f32a <z_add_timeout+0x6e>
    f39a:	f8dc c000 	ldr.w	ip, [ip]
    f39e:	e7c1      	b.n	f324 <z_add_timeout+0x68>
    f3a0:	200082a0 	.word	0x200082a0
    f3a4:	20008124 	.word	0x20008124

0000f3a8 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    f3a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    f3ac:	f04f 0320 	mov.w	r3, #32
    f3b0:	f3ef 8c11 	mrs	ip, BASEPRI
    f3b4:	f383 8812 	msr	BASEPRI_MAX, r3
    f3b8:	f3bf 8f6f 	isb	sy
	return list->head == list;
    f3bc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; f470 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    f3c0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; f474 <sys_clock_announce+0xcc>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
    f3c4:	2400      	movs	r4, #0
	announce_remaining = ticks;
    f3c6:	f8c9 0000 	str.w	r0, [r9]
    f3ca:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    f3ce:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f3d0:	4550      	cmp	r0, sl
    f3d2:	bf08      	it	eq
    f3d4:	2000      	moveq	r0, #0
		curr_tick += dt;
    f3d6:	4f28      	ldr	r7, [pc, #160]	; (f478 <sys_clock_announce+0xd0>)
    f3d8:	46e0      	mov	r8, ip
    f3da:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    f3de:	f8d9 3000 	ldr.w	r3, [r9]
    f3e2:	b380      	cbz	r0, f446 <sys_clock_announce+0x9e>
    f3e4:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    f3e8:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    f3ec:	42b3      	cmp	r3, r6
    f3ee:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    f3f2:	da05      	bge.n	f400 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    f3f4:	1af6      	subs	r6, r6, r3
    f3f6:	eb6c 040e 	sbc.w	r4, ip, lr
    f3fa:	e9c0 6404 	strd	r6, r4, [r0, #16]
    f3fe:	e022      	b.n	f446 <sys_clock_announce+0x9e>
		curr_tick += dt;
    f400:	18b2      	adds	r2, r6, r2
    f402:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    f406:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    f40a:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    f40e:	f7ff ff39 	bl	f284 <remove_timeout>
	__asm__ volatile(
    f412:	f388 8811 	msr	BASEPRI, r8
    f416:	f3bf 8f6f 	isb	sy
		t->fn(t);
    f41a:	6883      	ldr	r3, [r0, #8]
    f41c:	4798      	blx	r3
	__asm__ volatile(
    f41e:	f04f 0320 	mov.w	r3, #32
    f422:	f3ef 8811 	mrs	r8, BASEPRI
    f426:	f383 8812 	msr	BASEPRI_MAX, r3
    f42a:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    f42e:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    f432:	f8da 0000 	ldr.w	r0, [sl]
    f436:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f438:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    f43a:	46c4      	mov	ip, r8
    f43c:	f8c9 3000 	str.w	r3, [r9]
    f440:	d1ca      	bne.n	f3d8 <sys_clock_announce+0x30>
		curr_tick += dt;
    f442:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    f446:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    f448:	189a      	adds	r2, r3, r2
    f44a:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
    f44e:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    f452:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    f456:	f7ff fef5 	bl	f244 <next_timeout>
    f45a:	4621      	mov	r1, r4
    f45c:	f7fd fe94 	bl	d188 <sys_clock_set_timeout>
	__asm__ volatile(
    f460:	f388 8811 	msr	BASEPRI, r8
    f464:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    f468:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    f46c:	f7ff bc96 	b.w	ed9c <z_time_slice>
    f470:	20008124 	.word	0x20008124
    f474:	20008548 	.word	0x20008548
    f478:	200082a0 	.word	0x200082a0

0000f47c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    f47c:	b510      	push	{r4, lr}
	__asm__ volatile(
    f47e:	f04f 0320 	mov.w	r3, #32
    f482:	f3ef 8411 	mrs	r4, BASEPRI
    f486:	f383 8812 	msr	BASEPRI_MAX, r3
    f48a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    f48e:	f7ff fecf 	bl	f230 <elapsed>
    f492:	4603      	mov	r3, r0
    f494:	4a05      	ldr	r2, [pc, #20]	; (f4ac <sys_clock_tick_get+0x30>)
    f496:	e9d2 0100 	ldrd	r0, r1, [r2]
    f49a:	1818      	adds	r0, r3, r0
    f49c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    f4a0:	f384 8811 	msr	BASEPRI, r4
    f4a4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    f4a8:	bd10      	pop	{r4, pc}
    f4aa:	bf00      	nop
    f4ac:	200082a0 	.word	0x200082a0

0000f4b0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    f4b0:	4801      	ldr	r0, [pc, #4]	; (f4b8 <boot_banner+0x8>)
    f4b2:	f000 b856 	b.w	f562 <printk>
    f4b6:	bf00      	nop
    f4b8:	00011a37 	.word	0x00011a37

0000f4bc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    f4bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    f4be:	ab0b      	add	r3, sp, #44	; 0x2c
    f4c0:	9305      	str	r3, [sp, #20]
    f4c2:	9303      	str	r3, [sp, #12]
    f4c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f4c6:	9302      	str	r3, [sp, #8]
    f4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f4ca:	9301      	str	r3, [sp, #4]
    f4cc:	2300      	movs	r3, #0
    f4ce:	4618      	mov	r0, r3
    f4d0:	9300      	str	r3, [sp, #0]
    f4d2:	f7fa fed7 	bl	a284 <z_impl_z_log_msg_runtime_vcreate>
}
    f4d6:	b007      	add	sp, #28
    f4d8:	f85d fb04 	ldr.w	pc, [sp], #4

0000f4dc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    f4dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    f4de:	ab0b      	add	r3, sp, #44	; 0x2c
    f4e0:	9305      	str	r3, [sp, #20]
    f4e2:	9303      	str	r3, [sp, #12]
    f4e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f4e6:	9302      	str	r3, [sp, #8]
    f4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f4ea:	9301      	str	r3, [sp, #4]
    f4ec:	2300      	movs	r3, #0
    f4ee:	4618      	mov	r0, r3
    f4f0:	9300      	str	r3, [sp, #0]
    f4f2:	f7fa fec7 	bl	a284 <z_impl_z_log_msg_runtime_vcreate>
}
    f4f6:	b007      	add	sp, #28
    f4f8:	f85d fb04 	ldr.w	pc, [sp], #4

0000f4fc <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
    f4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f500:	4606      	mov	r6, r0
    f502:	460d      	mov	r5, r1
    f504:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    f506:	4698      	mov	r8, r3
    f508:	b32b      	cbz	r3, f556 <cbpprintf_external+0x5a>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    f50a:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
    f50e:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    f512:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    f516:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    f518:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    f51a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    f51e:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    f522:	441c      	add	r4, r3
    f524:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
    f526:	45ca      	cmp	sl, r9
    f528:	d309      	bcc.n	f53e <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    f52a:	4639      	mov	r1, r7
    f52c:	4630      	mov	r0, r6
    f52e:	46ac      	mov	ip, r5
    f530:	f8d8 2004 	ldr.w	r2, [r8, #4]
    f534:	f108 0308 	add.w	r3, r8, #8
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
    f538:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    f53c:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    f53e:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
    f542:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
    f546:	4620      	mov	r0, r4
		*ps = s;
    f548:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    f54c:	f000 fbe1 	bl	fd12 <strlen>
    f550:	3001      	adds	r0, #1
    f552:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    f554:	e7e7      	b.n	f526 <cbpprintf_external+0x2a>
}
    f556:	f06f 0015 	mvn.w	r0, #21
    f55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f55e <arch_printk_char_out>:
}
    f55e:	2000      	movs	r0, #0
    f560:	4770      	bx	lr

0000f562 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    f562:	b40f      	push	{r0, r1, r2, r3}
    f564:	b507      	push	{r0, r1, r2, lr}
    f566:	a904      	add	r1, sp, #16
    f568:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    f56c:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    f56e:	f000 fb01 	bl	fb74 <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    f572:	b003      	add	sp, #12
    f574:	f85d eb04 	ldr.w	lr, [sp], #4
    f578:	b004      	add	sp, #16
    f57a:	4770      	bx	lr

0000f57c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    f57c:	4604      	mov	r4, r0
    f57e:	b508      	push	{r3, lr}
    f580:	4608      	mov	r0, r1
    f582:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    f584:	461a      	mov	r2, r3
    f586:	47a0      	blx	r4
	return z_impl_z_current_get();
    f588:	f7ff fdd2 	bl	f130 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    f58c:	f7fb fee8 	bl	b360 <z_impl_k_thread_abort>

0000f590 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f590:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    f592:	f013 0307 	ands.w	r3, r3, #7
    f596:	d105      	bne.n	f5a4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    f598:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    f59a:	2b00      	cmp	r3, #0
    f59c:	bf0c      	ite	eq
    f59e:	2000      	moveq	r0, #0
    f5a0:	2003      	movne	r0, #3
    f5a2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    f5a4:	2b02      	cmp	r3, #2
    f5a6:	d105      	bne.n	f5b4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    f5a8:	8b40      	ldrh	r0, [r0, #26]
    f5aa:	fab0 f080 	clz	r0, r0
    f5ae:	0940      	lsrs	r0, r0, #5
    f5b0:	0080      	lsls	r0, r0, #2
    f5b2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    f5b4:	2b01      	cmp	r3, #1
    f5b6:	d105      	bne.n	f5c4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    f5b8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    f5ba:	2b00      	cmp	r3, #0
    f5bc:	bf0c      	ite	eq
    f5be:	2000      	moveq	r0, #0
    f5c0:	2005      	movne	r0, #5
    f5c2:	4770      	bx	lr
	int evt = EVT_NOP;
    f5c4:	2000      	movs	r0, #0
}
    f5c6:	4770      	bx	lr

0000f5c8 <validate_args>:
{
    f5c8:	b510      	push	{r4, lr}
    f5ca:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    f5cc:	b100      	cbz	r0, f5d0 <validate_args+0x8>
    f5ce:	b911      	cbnz	r1, f5d6 <validate_args+0xe>
		return -EINVAL;
    f5d0:	f06f 0015 	mvn.w	r0, #21
}
    f5d4:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    f5d6:	1d08      	adds	r0, r1, #4
    f5d8:	f000 f895 	bl	f706 <sys_notify_validate>
	if ((rv == 0)
    f5dc:	2800      	cmp	r0, #0
    f5de:	d1f9      	bne.n	f5d4 <validate_args+0xc>
	    && ((cli->notify.flags
    f5e0:	68a3      	ldr	r3, [r4, #8]
    f5e2:	2b03      	cmp	r3, #3
    f5e4:	d9f6      	bls.n	f5d4 <validate_args+0xc>
    f5e6:	e7f3      	b.n	f5d0 <validate_args+0x8>

0000f5e8 <notify_one>:
{
    f5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f5ec:	460d      	mov	r5, r1
    f5ee:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    f5f0:	4619      	mov	r1, r3
    f5f2:	1d28      	adds	r0, r5, #4
{
    f5f4:	4690      	mov	r8, r2
    f5f6:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    f5f8:	f000 f896 	bl	f728 <sys_notify_finalize>
	if (cb) {
    f5fc:	4604      	mov	r4, r0
    f5fe:	b138      	cbz	r0, f610 <notify_one+0x28>
		cb(mgr, cli, state, res);
    f600:	4633      	mov	r3, r6
    f602:	4642      	mov	r2, r8
    f604:	4629      	mov	r1, r5
    f606:	4638      	mov	r0, r7
    f608:	46a4      	mov	ip, r4
}
    f60a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    f60e:	4760      	bx	ip
}
    f610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f614 <transition_complete>:
{
    f614:	b410      	push	{r4}
	__asm__ volatile(
    f616:	f04f 0420 	mov.w	r4, #32
    f61a:	f3ef 8211 	mrs	r2, BASEPRI
    f61e:	f384 8812 	msr	BASEPRI_MAX, r4
    f622:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    f626:	6141      	str	r1, [r0, #20]
}
    f628:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    f62a:	2101      	movs	r1, #1
    f62c:	f7f9 ba90 	b.w	8b50 <process_event>

0000f630 <onoff_manager_init>:
{
    f630:	b538      	push	{r3, r4, r5, lr}
    f632:	460c      	mov	r4, r1
	if ((mgr == NULL)
    f634:	4605      	mov	r5, r0
    f636:	b158      	cbz	r0, f650 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    f638:	b151      	cbz	r1, f650 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    f63a:	680b      	ldr	r3, [r1, #0]
    f63c:	b143      	cbz	r3, f650 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    f63e:	684b      	ldr	r3, [r1, #4]
    f640:	b133      	cbz	r3, f650 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    f642:	221c      	movs	r2, #28
    f644:	2100      	movs	r1, #0
    f646:	f000 fbb2 	bl	fdae <memset>
	return 0;
    f64a:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    f64c:	612c      	str	r4, [r5, #16]
}
    f64e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    f650:	f06f 0015 	mvn.w	r0, #21
    f654:	e7fb      	b.n	f64e <onoff_manager_init+0x1e>

0000f656 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    f656:	b570      	push	{r4, r5, r6, lr}
    f658:	4605      	mov	r5, r0
    f65a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    f65c:	f7ff ffb4 	bl	f5c8 <validate_args>

	if (rv < 0) {
    f660:	1e04      	subs	r4, r0, #0
    f662:	db15      	blt.n	f690 <onoff_request+0x3a>
    f664:	f04f 0320 	mov.w	r3, #32
    f668:	f3ef 8211 	mrs	r2, BASEPRI
    f66c:	f383 8812 	msr	BASEPRI_MAX, r3
    f670:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    f674:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f678:	8b6b      	ldrh	r3, [r5, #26]
    f67a:	8b2c      	ldrh	r4, [r5, #24]
    f67c:	428b      	cmp	r3, r1
    f67e:	f004 0407 	and.w	r4, r4, #7
    f682:	d107      	bne.n	f694 <onoff_request+0x3e>
	__asm__ volatile(
    f684:	f382 8811 	msr	BASEPRI, r2
    f688:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    f68c:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    f690:	4620      	mov	r0, r4
    f692:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    f694:	2c02      	cmp	r4, #2
    f696:	d10c      	bne.n	f6b2 <onoff_request+0x5c>
		mgr->refs += 1U;
    f698:	3301      	adds	r3, #1
    f69a:	836b      	strh	r3, [r5, #26]
    f69c:	f382 8811 	msr	BASEPRI, r2
    f6a0:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    f6a4:	2300      	movs	r3, #0
    f6a6:	4622      	mov	r2, r4
    f6a8:	4631      	mov	r1, r6
    f6aa:	4628      	mov	r0, r5
    f6ac:	f7ff ff9c 	bl	f5e8 <notify_one>
    f6b0:	e7ee      	b.n	f690 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    f6b2:	2c06      	cmp	r4, #6
    f6b4:	d814      	bhi.n	f6e0 <onoff_request+0x8a>
    f6b6:	e8df f004 	tbb	[pc, r4]
    f6ba:	1304      	.short	0x1304
    f6bc:	1a041313 	.word	0x1a041313
    f6c0:	04          	.byte	0x04
    f6c1:	00          	.byte	0x00
	parent->next = child;
    f6c2:	2300      	movs	r3, #0
    f6c4:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    f6c6:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    f6c8:	b93b      	cbnz	r3, f6da <onoff_request+0x84>
	list->head = node;
    f6ca:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    f6ce:	b9ac      	cbnz	r4, f6fc <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    f6d0:	2102      	movs	r1, #2
    f6d2:	4628      	mov	r0, r5
    f6d4:	f7f9 fa3c 	bl	8b50 <process_event>
    f6d8:	e7da      	b.n	f690 <onoff_request+0x3a>
	parent->next = child;
    f6da:	601e      	str	r6, [r3, #0]
	list->tail = node;
    f6dc:	606e      	str	r6, [r5, #4]
}
    f6de:	e7f6      	b.n	f6ce <onoff_request+0x78>
    f6e0:	f382 8811 	msr	BASEPRI, r2
    f6e4:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    f6e8:	f06f 0404 	mvn.w	r4, #4
    f6ec:	e7d0      	b.n	f690 <onoff_request+0x3a>
    f6ee:	f382 8811 	msr	BASEPRI, r2
    f6f2:	f3bf 8f6f 	isb	sy
    f6f6:	f06f 0485 	mvn.w	r4, #133	; 0x85
    f6fa:	e7c9      	b.n	f690 <onoff_request+0x3a>
    f6fc:	f382 8811 	msr	BASEPRI, r2
    f700:	f3bf 8f6f 	isb	sy
		if (notify) {
    f704:	e7c4      	b.n	f690 <onoff_request+0x3a>

0000f706 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    f706:	4603      	mov	r3, r0
    f708:	b158      	cbz	r0, f722 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    f70a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    f70c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    f710:	2a01      	cmp	r2, #1
    f712:	d003      	beq.n	f71c <sys_notify_validate+0x16>
    f714:	2a03      	cmp	r2, #3
    f716:	d104      	bne.n	f722 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    f718:	6802      	ldr	r2, [r0, #0]
    f71a:	b112      	cbz	r2, f722 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    f71c:	2000      	movs	r0, #0
    f71e:	6098      	str	r0, [r3, #8]
    f720:	4770      	bx	lr
    f722:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    f726:	4770      	bx	lr

0000f728 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    f728:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    f72a:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    f72c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    f730:	2a03      	cmp	r2, #3
    f732:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    f736:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    f738:	bf14      	ite	ne
    f73a:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    f73c:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    f73e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    f740:	4770      	bx	lr

0000f742 <encode_uint>:
{
    f742:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f746:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    f748:	78d3      	ldrb	r3, [r2, #3]
{
    f74a:	4680      	mov	r8, r0
	switch (specifier) {
    f74c:	2b6f      	cmp	r3, #111	; 0x6f
{
    f74e:	460f      	mov	r7, r1
    f750:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    f752:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    f756:	d029      	beq.n	f7ac <encode_uint+0x6a>
    f758:	d824      	bhi.n	f7a4 <encode_uint+0x62>
		return 10;
    f75a:	2b58      	cmp	r3, #88	; 0x58
    f75c:	bf0c      	ite	eq
    f75e:	2610      	moveq	r6, #16
    f760:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    f762:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    f766:	4632      	mov	r2, r6
    f768:	2300      	movs	r3, #0
    f76a:	4640      	mov	r0, r8
    f76c:	4639      	mov	r1, r7
    f76e:	f7f8 fcf1 	bl	8154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    f772:	2a09      	cmp	r2, #9
    f774:	b2d4      	uxtb	r4, r2
    f776:	d81e      	bhi.n	f7b6 <encode_uint+0x74>
    f778:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    f77a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    f77c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    f77e:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    f782:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    f786:	d301      	bcc.n	f78c <encode_uint+0x4a>
    f788:	45d1      	cmp	r9, sl
    f78a:	d811      	bhi.n	f7b0 <encode_uint+0x6e>
	if (conv->flag_hash) {
    f78c:	782b      	ldrb	r3, [r5, #0]
    f78e:	069b      	lsls	r3, r3, #26
    f790:	d505      	bpl.n	f79e <encode_uint+0x5c>
		if (radix == 8) {
    f792:	2e08      	cmp	r6, #8
    f794:	d115      	bne.n	f7c2 <encode_uint+0x80>
			conv->altform_0 = true;
    f796:	78ab      	ldrb	r3, [r5, #2]
    f798:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    f79c:	70ab      	strb	r3, [r5, #2]
}
    f79e:	4648      	mov	r0, r9
    f7a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    f7a4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    f7a8:	2b70      	cmp	r3, #112	; 0x70
    f7aa:	e7d7      	b.n	f75c <encode_uint+0x1a>
	switch (specifier) {
    f7ac:	2608      	movs	r6, #8
    f7ae:	e7d8      	b.n	f762 <encode_uint+0x20>
		value /= radix;
    f7b0:	4680      	mov	r8, r0
    f7b2:	460f      	mov	r7, r1
    f7b4:	e7d7      	b.n	f766 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    f7b6:	f1bb 0f19 	cmp.w	fp, #25
    f7ba:	bf94      	ite	ls
    f7bc:	3437      	addls	r4, #55	; 0x37
    f7be:	3457      	addhi	r4, #87	; 0x57
    f7c0:	e7db      	b.n	f77a <encode_uint+0x38>
		} else if (radix == 16) {
    f7c2:	2e10      	cmp	r6, #16
    f7c4:	d1eb      	bne.n	f79e <encode_uint+0x5c>
			conv->altform_0c = true;
    f7c6:	78ab      	ldrb	r3, [r5, #2]
    f7c8:	f043 0310 	orr.w	r3, r3, #16
    f7cc:	e7e6      	b.n	f79c <encode_uint+0x5a>

0000f7ce <outs>:
{
    f7ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7d2:	4607      	mov	r7, r0
    f7d4:	4688      	mov	r8, r1
    f7d6:	4615      	mov	r5, r2
    f7d8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    f7da:	4614      	mov	r4, r2
    f7dc:	42b4      	cmp	r4, r6
    f7de:	d305      	bcc.n	f7ec <outs+0x1e>
    f7e0:	b10e      	cbz	r6, f7e6 <outs+0x18>
	return (int)count;
    f7e2:	1b60      	subs	r0, r4, r5
    f7e4:	e008      	b.n	f7f8 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    f7e6:	7823      	ldrb	r3, [r4, #0]
    f7e8:	2b00      	cmp	r3, #0
    f7ea:	d0fa      	beq.n	f7e2 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    f7ec:	4641      	mov	r1, r8
    f7ee:	f814 0b01 	ldrb.w	r0, [r4], #1
    f7f2:	47b8      	blx	r7
		if (rc < 0) {
    f7f4:	2800      	cmp	r0, #0
    f7f6:	daf1      	bge.n	f7dc <outs+0xe>
}
    f7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f7fc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    f7fc:	4770      	bx	lr

0000f7fe <nordicsemi_nrf53_init>:
	__asm__ volatile(
    f7fe:	f04f 0320 	mov.w	r3, #32
    f802:	f3ef 8111 	mrs	r1, BASEPRI
    f806:	f383 8812 	msr	BASEPRI_MAX, r3
    f80a:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    f80e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f812:	2202      	movs	r2, #2
    f814:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    f818:	2201      	movs	r2, #1
    f81a:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    f81e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    f822:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
    f826:	f381 8811 	msr	BASEPRI, r1
    f82a:	f3bf 8f6f 	isb	sy
}
    f82e:	2000      	movs	r0, #0
    f830:	4770      	bx	lr

0000f832 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    f832:	2806      	cmp	r0, #6
    f834:	d108      	bne.n	f848 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    f836:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f83a:	2201      	movs	r2, #1
    f83c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    f840:	f3bf 8f4f 	dsb	sy
        __WFE();
    f844:	bf20      	wfe
    while (true)
    f846:	e7fd      	b.n	f844 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    f848:	4770      	bx	lr

0000f84a <pm_state_exit_post_ops>:
    f84a:	2300      	movs	r3, #0
    f84c:	f383 8811 	msr	BASEPRI, r3
    f850:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    f854:	4770      	bx	lr

0000f856 <soc_secure_mem_read>:
	__ASSERT(result == 0, "GPIO service error (%d)", result);
}
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
    f856:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
    f858:	ab01      	add	r3, sp, #4
    f85a:	f000 fd10 	bl	1027e <tfm_platform_mem_read>

	switch (status) {
    f85e:	2802      	cmp	r0, #2
    f860:	d00a      	beq.n	f878 <soc_secure_mem_read+0x22>
    f862:	2803      	cmp	r0, #3
    f864:	d00b      	beq.n	f87e <soc_secure_mem_read+0x28>
    f866:	b968      	cbnz	r0, f884 <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
    f868:	9801      	ldr	r0, [sp, #4]
    f86a:	3800      	subs	r0, #0
    f86c:	bf18      	it	ne
    f86e:	2001      	movne	r0, #1
    f870:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
    f872:	b003      	add	sp, #12
    f874:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
    f878:	f06f 0015 	mvn.w	r0, #21
    f87c:	e7f9      	b.n	f872 <soc_secure_mem_read+0x1c>
	switch (status) {
    f87e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f882:	e7f6      	b.n	f872 <soc_secure_mem_read+0x1c>
		return -EPERM;
    f884:	f04f 30ff 	mov.w	r0, #4294967295
    f888:	e7f3      	b.n	f872 <soc_secure_mem_read+0x1c>

0000f88a <nvs_flash_rd>:
{
    f88a:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
    f88c:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    f88e:	8984      	ldrh	r4, [r0, #12]
    f890:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
    f892:	fa16 f181 	uxtah	r1, r6, r1
    f896:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
    f89a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
    f89c:	6884      	ldr	r4, [r0, #8]
    f89e:	6824      	ldr	r4, [r4, #0]
    f8a0:	46a4      	mov	ip, r4
}
    f8a2:	bc70      	pop	{r4, r5, r6}
    f8a4:	4760      	bx	ip

0000f8a6 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
    f8a6:	680b      	ldr	r3, [r1, #0]
    f8a8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    f8ac:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
    f8ae:	89c0      	ldrh	r0, [r0, #14]
    f8b0:	0c1a      	lsrs	r2, r3, #16
    f8b2:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
    f8b6:	bf04      	itt	eq
    f8b8:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
    f8bc:	600b      	streq	r3, [r1, #0]
}
    f8be:	4770      	bx	lr

0000f8c0 <nvs_flash_block_cmp>:
{
    f8c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f8c4:	4681      	mov	r9, r0
    f8c6:	460e      	mov	r6, r1
    f8c8:	4617      	mov	r7, r2
    f8ca:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    f8cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
    f8ce:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    f8d0:	681d      	ldr	r5, [r3, #0]
    f8d2:	426d      	negs	r5, r5
	block_size =
    f8d4:	f005 0520 	and.w	r5, r5, #32
	while (len) {
    f8d8:	b91c      	cbnz	r4, f8e2 <nvs_flash_block_cmp+0x22>
	return 0;
    f8da:	4620      	mov	r0, r4
}
    f8dc:	b009      	add	sp, #36	; 0x24
    f8de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
    f8e2:	42ac      	cmp	r4, r5
    f8e4:	46a0      	mov	r8, r4
    f8e6:	bf28      	it	cs
    f8e8:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
    f8ea:	466a      	mov	r2, sp
    f8ec:	4643      	mov	r3, r8
    f8ee:	4631      	mov	r1, r6
    f8f0:	4648      	mov	r0, r9
    f8f2:	f7ff ffca 	bl	f88a <nvs_flash_rd>
		if (rc) {
    f8f6:	2800      	cmp	r0, #0
    f8f8:	d1f0      	bne.n	f8dc <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
    f8fa:	4642      	mov	r2, r8
    f8fc:	4669      	mov	r1, sp
    f8fe:	4638      	mov	r0, r7
    f900:	f000 fa23 	bl	fd4a <memcmp>
		if (rc) {
    f904:	b920      	cbnz	r0, f910 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
    f906:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
    f90a:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
    f90c:	4447      	add	r7, r8
    f90e:	e7e3      	b.n	f8d8 <nvs_flash_block_cmp+0x18>
			return 1;
    f910:	2001      	movs	r0, #1
    f912:	e7e3      	b.n	f8dc <nvs_flash_block_cmp+0x1c>

0000f914 <nvs_flash_cmp_const>:
{
    f914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f918:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    f91a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
    f91c:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    f91e:	681d      	ldr	r5, [r3, #0]
{
    f920:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    f922:	426d      	negs	r5, r5
	block_size =
    f924:	f005 0520 	and.w	r5, r5, #32
{
    f928:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
    f92a:	4668      	mov	r0, sp
{
    f92c:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
    f92e:	462a      	mov	r2, r5
    f930:	f000 fa3d 	bl	fdae <memset>
	while (len) {
    f934:	b91c      	cbnz	r4, f93e <nvs_flash_cmp_const+0x2a>
	return 0;
    f936:	4620      	mov	r0, r4
}
    f938:	b008      	add	sp, #32
    f93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
    f93e:	42ac      	cmp	r4, r5
    f940:	46a0      	mov	r8, r4
    f942:	bf28      	it	cs
    f944:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
    f946:	466a      	mov	r2, sp
    f948:	4643      	mov	r3, r8
    f94a:	4631      	mov	r1, r6
    f94c:	4638      	mov	r0, r7
    f94e:	f7ff ffb7 	bl	f8c0 <nvs_flash_block_cmp>
		if (rc) {
    f952:	2800      	cmp	r0, #0
    f954:	d1f0      	bne.n	f938 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
    f956:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
    f95a:	4446      	add	r6, r8
    f95c:	e7ea      	b.n	f934 <nvs_flash_cmp_const+0x20>

0000f95e <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
    f95e:	4601      	mov	r1, r0
{
    f960:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
    f962:	2207      	movs	r2, #7
{
    f964:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
    f966:	20ff      	movs	r0, #255	; 0xff
    f968:	f7f9 fa00 	bl	8d6c <crc8_ccitt>
	entry->crc8 = crc8;
    f96c:	71e0      	strb	r0, [r4, #7]
}
    f96e:	bd10      	pop	{r4, pc}

0000f970 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    f970:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    f972:	ab0b      	add	r3, sp, #44	; 0x2c
    f974:	9305      	str	r3, [sp, #20]
    f976:	9303      	str	r3, [sp, #12]
    f978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f97a:	9302      	str	r3, [sp, #8]
    f97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f97e:	9301      	str	r3, [sp, #4]
    f980:	2300      	movs	r3, #0
    f982:	4618      	mov	r0, r3
    f984:	9300      	str	r3, [sp, #0]
    f986:	f7fa fc7d 	bl	a284 <z_impl_z_log_msg_runtime_vcreate>
}
    f98a:	b007      	add	sp, #28
    f98c:	f85d fb04 	ldr.w	pc, [sp], #4

0000f990 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
    f990:	7803      	ldrb	r3, [r0, #0]
    f992:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
    f994:	bf81      	itttt	hi
    f996:	f101 31ff 	addhi.w	r1, r1, #4294967295
    f99a:	18c9      	addhi	r1, r1, r3
    f99c:	425b      	neghi	r3, r3
    f99e:	4019      	andhi	r1, r3
}
    f9a0:	4608      	mov	r0, r1
    f9a2:	4770      	bx	lr

0000f9a4 <nvs_ate_valid>:
{
    f9a4:	b570      	push	{r4, r5, r6, lr}
    f9a6:	460c      	mov	r4, r1
    f9a8:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f9aa:	2108      	movs	r1, #8
    f9ac:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f9ae:	f7ff ffef 	bl	f990 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
    f9b2:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f9b4:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
    f9b6:	4621      	mov	r1, r4
    f9b8:	20ff      	movs	r0, #255	; 0xff
    f9ba:	f7f9 f9d7 	bl	8d6c <crc8_ccitt>
	if (crc8 == entry->crc8) {
    f9be:	79e3      	ldrb	r3, [r4, #7]
    f9c0:	4283      	cmp	r3, r0
    f9c2:	d107      	bne.n	f9d4 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
    f9c4:	89aa      	ldrh	r2, [r5, #12]
    f9c6:	8863      	ldrh	r3, [r4, #2]
    f9c8:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
    f9ca:	4283      	cmp	r3, r0
    f9cc:	bf2c      	ite	cs
    f9ce:	2000      	movcs	r0, #0
    f9d0:	2001      	movcc	r0, #1
}
    f9d2:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
    f9d4:	2000      	movs	r0, #0
    f9d6:	e7fc      	b.n	f9d2 <nvs_ate_valid+0x2e>

0000f9d8 <nvs_close_ate_valid>:
{
    f9d8:	b538      	push	{r3, r4, r5, lr}
    f9da:	4605      	mov	r5, r0
    f9dc:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
    f9de:	f7ff ffe1 	bl	f9a4 <nvs_ate_valid>
    f9e2:	b1a0      	cbz	r0, fa0e <nvs_close_ate_valid+0x36>
    f9e4:	88a0      	ldrh	r0, [r4, #4]
    f9e6:	b998      	cbnz	r0, fa10 <nvs_close_ate_valid+0x38>
    f9e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f9ec:	8822      	ldrh	r2, [r4, #0]
    f9ee:	429a      	cmp	r2, r3
    f9f0:	d10d      	bne.n	fa0e <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f9f2:	2108      	movs	r1, #8
    f9f4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    f9f6:	f7ff ffcb 	bl	f990 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
    f9fa:	8862      	ldrh	r2, [r4, #2]
    f9fc:	89ab      	ldrh	r3, [r5, #12]
    f9fe:	1a9b      	subs	r3, r3, r2
    fa00:	fbb3 f2f0 	udiv	r2, r3, r0
    fa04:	fb02 3010 	mls	r0, r2, r0, r3
    fa08:	fab0 f080 	clz	r0, r0
    fa0c:	0940      	lsrs	r0, r0, #5
}
    fa0e:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    fa10:	2000      	movs	r0, #0
    fa12:	e7fc      	b.n	fa0e <nvs_close_ate_valid+0x36>

0000fa14 <nvs_prev_ate>:
{
    fa14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fa16:	4604      	mov	r4, r0
    fa18:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fa1a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    fa1c:	2108      	movs	r1, #8
    fa1e:	f7ff ffb7 	bl	f990 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fa22:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fa24:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fa26:	6829      	ldr	r1, [r5, #0]
    fa28:	4620      	mov	r0, r4
    fa2a:	f7ff ff2e 	bl	f88a <nvs_flash_rd>
	if (rc) {
    fa2e:	4606      	mov	r6, r0
    fa30:	2800      	cmp	r0, #0
    fa32:	d136      	bne.n	faa2 <nvs_prev_ate+0x8e>
	*addr += ate_size;
    fa34:	682b      	ldr	r3, [r5, #0]
    fa36:	443b      	add	r3, r7
    fa38:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    fa3a:	89a2      	ldrh	r2, [r4, #12]
    fa3c:	b299      	uxth	r1, r3
    fa3e:	1bd2      	subs	r2, r2, r7
    fa40:	4291      	cmp	r1, r2
    fa42:	d12e      	bne.n	faa2 <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
    fa44:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
    fa46:	bf09      	itett	eq
    fa48:	89e2      	ldrheq	r2, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
    fa4a:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
    fa4e:	f102 32ff 	addeq.w	r2, r2, #4294967295
    fa52:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fa56:	4620      	mov	r0, r4
    fa58:	2308      	movs	r3, #8
    fa5a:	466a      	mov	r2, sp
    fa5c:	6029      	str	r1, [r5, #0]
    fa5e:	f7ff ff14 	bl	f88a <nvs_flash_rd>
	if (rc) {
    fa62:	b9e8      	cbnz	r0, faa0 <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    fa64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    fa66:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    fa68:	466b      	mov	r3, sp
		if (data8[i] != value) {
    fa6a:	f813 1b01 	ldrb.w	r1, [r3], #1
    fa6e:	428a      	cmp	r2, r1
    fa70:	d10c      	bne.n	fa8c <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    fa72:	3001      	adds	r0, #1
    fa74:	2808      	cmp	r0, #8
    fa76:	d1f8      	bne.n	fa6a <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
    fa78:	6863      	ldr	r3, [r4, #4]
    fa7a:	e005      	b.n	fa88 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
    fa7c:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
    fa7e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
    fa82:	0c1b      	lsrs	r3, r3, #16
    fa84:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
    fa86:	4413      	add	r3, r2
		*addr = fs->ate_wra;
    fa88:	602b      	str	r3, [r5, #0]
		return 0;
    fa8a:	e00a      	b.n	faa2 <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
    fa8c:	4669      	mov	r1, sp
    fa8e:	4620      	mov	r0, r4
    fa90:	f7ff ffa2 	bl	f9d8 <nvs_close_ate_valid>
    fa94:	2800      	cmp	r0, #0
    fa96:	d1f1      	bne.n	fa7c <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
    fa98:	4629      	mov	r1, r5
    fa9a:	4620      	mov	r0, r4
    fa9c:	f7f9 fe7a 	bl	9794 <nvs_recover_last_ate>
    faa0:	4606      	mov	r6, r0
}
    faa2:	4630      	mov	r0, r6
    faa4:	b003      	add	sp, #12
    faa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000faa8 <nvs_flash_al_wrt>:
{
    faa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    faac:	4607      	mov	r7, r0
    faae:	4690      	mov	r8, r2
	if (!len) {
    fab0:	461e      	mov	r6, r3
{
    fab2:	b089      	sub	sp, #36	; 0x24
	if (!len) {
    fab4:	b91b      	cbnz	r3, fabe <nvs_flash_al_wrt+0x16>
		return 0;
    fab6:	2000      	movs	r0, #0
}
    fab8:	b009      	add	sp, #36	; 0x24
    faba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
    fabe:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    fac0:	8983      	ldrh	r3, [r0, #12]
    fac2:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
    fac4:	fa14 f181 	uxtah	r1, r4, r1
    fac8:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
    facc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    face:	681d      	ldr	r5, [r3, #0]
    fad0:	426d      	negs	r5, r5
	if (blen > 0) {
    fad2:	4035      	ands	r5, r6
    fad4:	d00c      	beq.n	faf0 <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
    fad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
    fad8:	6883      	ldr	r3, [r0, #8]
    fada:	4621      	mov	r1, r4
    fadc:	f8d3 9004 	ldr.w	r9, [r3, #4]
    fae0:	462b      	mov	r3, r5
    fae2:	47c8      	blx	r9
		if (rc) {
    fae4:	2800      	cmp	r0, #0
    fae6:	d1e7      	bne.n	fab8 <nvs_flash_al_wrt+0x10>
	if (len) {
    fae8:	1b76      	subs	r6, r6, r5
    faea:	d0e4      	beq.n	fab6 <nvs_flash_al_wrt+0xe>
		offset += blen;
    faec:	442c      	add	r4, r5
		data8 += blen;
    faee:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
    faf0:	4632      	mov	r2, r6
    faf2:	4641      	mov	r1, r8
    faf4:	4668      	mov	r0, sp
    faf6:	f000 f94f 	bl	fd98 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
    fafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fafc:	eb0d 0006 	add.w	r0, sp, r6
    fb00:	681a      	ldr	r2, [r3, #0]
    fb02:	7919      	ldrb	r1, [r3, #4]
    fb04:	1b92      	subs	r2, r2, r6
    fb06:	f000 f952 	bl	fdae <memset>
				 fs->flash_parameters->write_block_size);
    fb0a:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
    fb0e:	681b      	ldr	r3, [r3, #0]
    fb10:	6882      	ldr	r2, [r0, #8]
    fb12:	4621      	mov	r1, r4
    fb14:	6855      	ldr	r5, [r2, #4]
    fb16:	466a      	mov	r2, sp
    fb18:	47a8      	blx	r5
	return rc;
    fb1a:	e7cd      	b.n	fab8 <nvs_flash_al_wrt+0x10>

0000fb1c <nvs_flash_ate_wrt>:
{
    fb1c:	b510      	push	{r4, lr}
    fb1e:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
    fb20:	2308      	movs	r3, #8
    fb22:	6841      	ldr	r1, [r0, #4]
{
    fb24:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
    fb26:	f7ff ffbf 	bl	faa8 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
    fb2a:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
    fb2c:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
    fb2e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fb30:	f7ff ff2e 	bl	f990 <nvs_al_size.isra.0>
    fb34:	6863      	ldr	r3, [r4, #4]
    fb36:	1a1b      	subs	r3, r3, r0
    fb38:	6063      	str	r3, [r4, #4]
}
    fb3a:	4610      	mov	r0, r2
    fb3c:	bd10      	pop	{r4, pc}

0000fb3e <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
    fb3e:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
    fb40:	2400      	movs	r4, #0
    fb42:	9400      	str	r4, [sp, #0]
    fb44:	f7fa fa2e 	bl	9fa4 <nvs_read_hist>
	return rc;
}
    fb48:	b002      	add	sp, #8
    fb4a:	bd10      	pop	{r4, pc}

0000fb4c <dummy_timestamp>:
}
    fb4c:	2000      	movs	r0, #0
    fb4e:	4770      	bx	lr

0000fb50 <default_get_timestamp>:
    fb50:	f000 bb8d 	b.w	1026e <sys_clock_cycle_get_32>

0000fb54 <atomic_inc>:
{
    fb54:	4603      	mov	r3, r0
}
    fb56:	e8d3 0fef 	ldaex	r0, [r3]
    fb5a:	1c42      	adds	r2, r0, #1
    fb5c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    fb60:	2900      	cmp	r1, #0
    fb62:	d1f8      	bne.n	fb56 <atomic_inc+0x2>
    fb64:	4770      	bx	lr

0000fb66 <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
    fb66:	2100      	movs	r1, #0
{
    fb68:	b508      	push	{r3, lr}
		(void)z_log_init(false, false);
    fb6a:	4608      	mov	r0, r1
    fb6c:	f7fa fa88 	bl	a080 <z_log_init.isra.0>
	}

	return 0;
}
    fb70:	2000      	movs	r0, #0
    fb72:	bd08      	pop	{r3, pc}

0000fb74 <z_log_vprintk>:
{
    fb74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    fb76:	2300      	movs	r3, #0
    fb78:	e9cd 0102 	strd	r0, r1, [sp, #8]
    fb7c:	461a      	mov	r2, r3
    fb7e:	4619      	mov	r1, r3
    fb80:	4618      	mov	r0, r3
    fb82:	e9cd 3300 	strd	r3, r3, [sp]
    fb86:	f7fa fb7d 	bl	a284 <z_impl_z_log_msg_runtime_vcreate>
}
    fb8a:	b005      	add	sp, #20
    fb8c:	f85d fb04 	ldr.w	pc, [sp], #4

0000fb90 <z_log_notify_backend_enabled>:
}
    fb90:	4770      	bx	lr

0000fb92 <z_log_get_tag>:
}
    fb92:	2000      	movs	r0, #0
    fb94:	4770      	bx	lr

0000fb96 <z_log_msg_finalize>:
{
    fb96:	b570      	push	{r4, r5, r6, lr}
    fb98:	460e      	mov	r6, r1
    fb9a:	4615      	mov	r5, r2
    fb9c:	4619      	mov	r1, r3
	if (!msg) {
    fb9e:	4604      	mov	r4, r0
    fba0:	b918      	cbnz	r0, fbaa <z_log_msg_finalize+0x14>
}
    fba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    fba6:	f7fa bb1b 	b.w	a1e0 <z_log_dropped>
	if (data) {
    fbaa:	b133      	cbz	r3, fbba <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
    fbac:	f3c2 234a 	ubfx	r3, r2, #9, #11
    fbb0:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    fbb2:	0d12      	lsrs	r2, r2, #20
    fbb4:	4418      	add	r0, r3
    fbb6:	f000 f8ef 	bl	fd98 <memcpy>
	msg->hdr.source = source;
    fbba:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    fbbe:	4620      	mov	r0, r4
}
    fbc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    fbc4:	f7fa bb20 	b.w	a208 <z_log_msg_commit>

0000fbc8 <out_func>:
{
    fbc8:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    fbca:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    fbce:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    fbd2:	2101      	movs	r1, #1
    fbd4:	6852      	ldr	r2, [r2, #4]
    fbd6:	f10d 0007 	add.w	r0, sp, #7
    fbda:	4798      	blx	r3
}
    fbdc:	2000      	movs	r0, #0
    fbde:	b003      	add	sp, #12
    fbe0:	f85d fb04 	ldr.w	pc, [sp], #4

0000fbe4 <cr_out_func>:
	if (c == '\n') {
    fbe4:	280a      	cmp	r0, #10
{
    fbe6:	b538      	push	{r3, r4, r5, lr}
    fbe8:	4604      	mov	r4, r0
    fbea:	460d      	mov	r5, r1
	if (c == '\n') {
    fbec:	d102      	bne.n	fbf4 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    fbee:	200d      	movs	r0, #13
    fbf0:	f7ff ffea 	bl	fbc8 <out_func>
	out_func(c, ctx);
    fbf4:	4629      	mov	r1, r5
    fbf6:	4620      	mov	r0, r4
    fbf8:	f7ff ffe6 	bl	fbc8 <out_func>
}
    fbfc:	2000      	movs	r0, #0
    fbfe:	bd38      	pop	{r3, r4, r5, pc}

0000fc00 <buffer_write>:
{
    fc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fc02:	4606      	mov	r6, r0
    fc04:	460d      	mov	r5, r1
    fc06:	4614      	mov	r4, r2
    fc08:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    fc0a:	4621      	mov	r1, r4
    fc0c:	4628      	mov	r0, r5
    fc0e:	463a      	mov	r2, r7
    fc10:	47b0      	blx	r6
	} while (len != 0);
    fc12:	1a24      	subs	r4, r4, r0
		buf += processed;
    fc14:	4405      	add	r5, r0
	} while (len != 0);
    fc16:	d1f8      	bne.n	fc0a <buffer_write+0xa>
}
    fc18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fc1a <cbvprintf>:
{
    fc1a:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    fc1c:	2400      	movs	r4, #0
    fc1e:	9400      	str	r4, [sp, #0]
    fc20:	f7f9 f8ba 	bl	8d98 <z_cbvprintf_impl>
}
    fc24:	b002      	add	sp, #8
    fc26:	bd10      	pop	{r4, pc}

0000fc28 <log_output_flush>:
{
    fc28:	b510      	push	{r4, lr}
		     output->control_block->offset,
    fc2a:	6842      	ldr	r2, [r0, #4]
{
    fc2c:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    fc2e:	e9d2 2300 	ldrd	r2, r3, [r2]
    fc32:	6881      	ldr	r1, [r0, #8]
    fc34:	6800      	ldr	r0, [r0, #0]
    fc36:	f7ff ffe3 	bl	fc00 <buffer_write>
	output->control_block->offset = 0;
    fc3a:	2200      	movs	r2, #0
    fc3c:	6863      	ldr	r3, [r4, #4]
    fc3e:	601a      	str	r2, [r3, #0]
}
    fc40:	bd10      	pop	{r4, pc}

0000fc42 <log_backend_uart_init>:
}
    fc42:	4770      	bx	lr

0000fc44 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    fc44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    fc46:	ab0b      	add	r3, sp, #44	; 0x2c
    fc48:	9305      	str	r3, [sp, #20]
    fc4a:	9303      	str	r3, [sp, #12]
    fc4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fc4e:	2201      	movs	r2, #1
    fc50:	9302      	str	r3, [sp, #8]
    fc52:	2300      	movs	r3, #0
    fc54:	4618      	mov	r0, r3
    fc56:	e9cd 3300 	strd	r3, r3, [sp]
    fc5a:	f7fa fb13 	bl	a284 <z_impl_z_log_msg_runtime_vcreate>
}
    fc5e:	b007      	add	sp, #28
    fc60:	f85d fb04 	ldr.w	pc, [sp], #4

0000fc64 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    fc64:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    fc66:	6800      	ldr	r0, [r0, #0]
    fc68:	f7fa be9e 	b.w	a9a8 <z_arm_fatal_error>

0000fc6c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    fc6c:	2100      	movs	r1, #0
    fc6e:	2001      	movs	r0, #1
    fc70:	f7fa be9a 	b.w	a9a8 <z_arm_fatal_error>

0000fc74 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    fc74:	b508      	push	{r3, lr}
	handler();
    fc76:	f7fa ff2d 	bl	aad4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    fc7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    fc7e:	f7fa bff5 	b.w	ac6c <z_arm_exc_exit>

0000fc82 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    fc82:	6e43      	ldr	r3, [r0, #100]	; 0x64
    fc84:	f383 880b 	msr	PSPLIM, r3
}
    fc88:	4770      	bx	lr

0000fc8a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    fc8a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    fc8c:	ab0b      	add	r3, sp, #44	; 0x2c
    fc8e:	9305      	str	r3, [sp, #20]
    fc90:	9303      	str	r3, [sp, #12]
    fc92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fc94:	2201      	movs	r2, #1
    fc96:	9302      	str	r3, [sp, #8]
    fc98:	2300      	movs	r3, #0
    fc9a:	4618      	mov	r0, r3
    fc9c:	e9cd 3300 	strd	r3, r3, [sp]
    fca0:	f7fa faf0 	bl	a284 <z_impl_z_log_msg_runtime_vcreate>
}
    fca4:	b007      	add	sp, #28
    fca6:	f85d fb04 	ldr.w	pc, [sp], #4

0000fcaa <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
    fcaa:	4770      	bx	lr

0000fcac <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
    fcac:	4770      	bx	lr

0000fcae <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    fcae:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    fcb2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    fcb6:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    fcb8:	bf08      	it	eq
    fcba:	f06f 0015 	mvneq.w	r0, #21
    fcbe:	4770      	bx	lr

0000fcc0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    fcc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    fcc2:	ab0b      	add	r3, sp, #44	; 0x2c
    fcc4:	9305      	str	r3, [sp, #20]
    fcc6:	9303      	str	r3, [sp, #12]
    fcc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fcca:	2201      	movs	r2, #1
    fccc:	9302      	str	r3, [sp, #8]
    fcce:	2300      	movs	r3, #0
    fcd0:	4618      	mov	r0, r3
    fcd2:	e9cd 3300 	strd	r3, r3, [sp]
    fcd6:	f7fa fad5 	bl	a284 <z_impl_z_log_msg_runtime_vcreate>
}
    fcda:	b007      	add	sp, #28
    fcdc:	f85d fb04 	ldr.w	pc, [sp], #4

0000fce0 <mpu_configure_region>:
{
    fce0:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
    fce2:	680c      	ldr	r4, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
    fce4:	684b      	ldr	r3, [r1, #4]
{
    fce6:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
    fce8:	890a      	ldrh	r2, [r1, #8]
    fcea:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    fcec:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    fcee:	3b01      	subs	r3, #1
    fcf0:	f024 041f 	bic.w	r4, r4, #31
    fcf4:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    fcf6:	f002 021f 	and.w	r2, r2, #31
    fcfa:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    fcfe:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
    fd02:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
    fd04:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    fd08:	9303      	str	r3, [sp, #12]
    fd0a:	f7fb fb75 	bl	b3f8 <region_allocate_and_init>
}
    fd0e:	b005      	add	sp, #20
    fd10:	bd30      	pop	{r4, r5, pc}

0000fd12 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    fd12:	4603      	mov	r3, r0
	size_t n = 0;
    fd14:	2000      	movs	r0, #0

	while (*s != '\0') {
    fd16:	5c1a      	ldrb	r2, [r3, r0]
    fd18:	b902      	cbnz	r2, fd1c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    fd1a:	4770      	bx	lr
		n++;
    fd1c:	3001      	adds	r0, #1
    fd1e:	e7fa      	b.n	fd16 <strlen+0x4>

0000fd20 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    fd20:	4603      	mov	r3, r0
	size_t n = 0;
    fd22:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    fd24:	5c1a      	ldrb	r2, [r3, r0]
    fd26:	b10a      	cbz	r2, fd2c <strnlen+0xc>
    fd28:	4288      	cmp	r0, r1
    fd2a:	d100      	bne.n	fd2e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    fd2c:	4770      	bx	lr
		n++;
    fd2e:	3001      	adds	r0, #1
    fd30:	e7f8      	b.n	fd24 <strnlen+0x4>

0000fd32 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    fd32:	1e43      	subs	r3, r0, #1
    fd34:	3901      	subs	r1, #1
    fd36:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    fd3a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    fd3e:	4282      	cmp	r2, r0
    fd40:	d101      	bne.n	fd46 <strcmp+0x14>
    fd42:	2a00      	cmp	r2, #0
    fd44:	d1f7      	bne.n	fd36 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    fd46:	1a10      	subs	r0, r2, r0
    fd48:	4770      	bx	lr

0000fd4a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    fd4a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    fd4c:	b15a      	cbz	r2, fd66 <memcmp+0x1c>
    fd4e:	3901      	subs	r1, #1
    fd50:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    fd52:	f810 2b01 	ldrb.w	r2, [r0], #1
    fd56:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    fd5a:	42a0      	cmp	r0, r4
    fd5c:	d001      	beq.n	fd62 <memcmp+0x18>
    fd5e:	429a      	cmp	r2, r3
    fd60:	d0f7      	beq.n	fd52 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    fd62:	1ad0      	subs	r0, r2, r3
}
    fd64:	bd10      	pop	{r4, pc}
		return 0;
    fd66:	4610      	mov	r0, r2
    fd68:	e7fc      	b.n	fd64 <memcmp+0x1a>

0000fd6a <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    fd6a:	1a43      	subs	r3, r0, r1
    fd6c:	4293      	cmp	r3, r2
{
    fd6e:	b510      	push	{r4, lr}
    fd70:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    fd74:	d308      	bcc.n	fd88 <memmove+0x1e>
	char *dest = d;
    fd76:	4602      	mov	r2, r0
    fd78:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    fd7a:	429a      	cmp	r2, r3
    fd7c:	d00b      	beq.n	fd96 <memmove+0x2c>
			*dest = *src;
    fd7e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    fd82:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    fd86:	e7f8      	b.n	fd7a <memmove+0x10>
    fd88:	440a      	add	r2, r1
			dest[n] = src[n];
    fd8a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    fd8e:	428a      	cmp	r2, r1
			dest[n] = src[n];
    fd90:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    fd94:	d1f9      	bne.n	fd8a <memmove+0x20>
		}
	}

	return d;
}
    fd96:	bd10      	pop	{r4, pc}

0000fd98 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    fd98:	b510      	push	{r4, lr}
    fd9a:	1e43      	subs	r3, r0, #1
    fd9c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    fd9e:	4291      	cmp	r1, r2
    fda0:	d100      	bne.n	fda4 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    fda2:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    fda4:	f811 4b01 	ldrb.w	r4, [r1], #1
    fda8:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    fdac:	e7f7      	b.n	fd9e <memcpy+0x6>

0000fdae <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    fdae:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    fdb0:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    fdb2:	4402      	add	r2, r0
    fdb4:	4293      	cmp	r3, r2
    fdb6:	d100      	bne.n	fdba <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    fdb8:	4770      	bx	lr
		*(d_byte++) = c_byte;
    fdba:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    fdbe:	e7f9      	b.n	fdb4 <memset+0x6>

0000fdc0 <_stdout_hook_default>:
}
    fdc0:	f04f 30ff 	mov.w	r0, #4294967295
    fdc4:	4770      	bx	lr

0000fdc6 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    fdc6:	220c      	movs	r2, #12
    fdc8:	6903      	ldr	r3, [r0, #16]
    fdca:	b2c9      	uxtb	r1, r1
    fdcc:	fb01 3302 	mla	r3, r1, r2, r3
    fdd0:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    fdd2:	f000 0007 	and.w	r0, r0, #7
    fdd6:	4770      	bx	lr

0000fdd8 <set_on_state>:
	__asm__ volatile(
    fdd8:	f04f 0320 	mov.w	r3, #32
    fddc:	f3ef 8211 	mrs	r2, BASEPRI
    fde0:	f383 8812 	msr	BASEPRI_MAX, r3
    fde4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    fde8:	6803      	ldr	r3, [r0, #0]
    fdea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fdee:	f043 0302 	orr.w	r3, r3, #2
    fdf2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    fdf4:	f382 8811 	msr	BASEPRI, r2
    fdf8:	f3bf 8f6f 	isb	sy
}
    fdfc:	4770      	bx	lr

0000fdfe <stop>:
{
    fdfe:	b570      	push	{r4, r5, r6, lr}
    fe00:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    fe02:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    fe04:	f04f 0420 	mov.w	r4, #32
    fe08:	f3ef 8511 	mrs	r5, BASEPRI
    fe0c:	f384 8812 	msr	BASEPRI_MAX, r4
    fe10:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    fe14:	260c      	movs	r6, #12
    fe16:	fb06 3401 	mla	r4, r6, r1, r3
    fe1a:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    fe1c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    fe20:	d008      	beq.n	fe34 <stop+0x36>
    fe22:	42a2      	cmp	r2, r4
    fe24:	d006      	beq.n	fe34 <stop+0x36>
	__asm__ volatile(
    fe26:	f385 8811 	msr	BASEPRI, r5
    fe2a:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    fe2e:	f04f 30ff 	mov.w	r0, #4294967295
}
    fe32:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    fe34:	2201      	movs	r2, #1
    fe36:	4371      	muls	r1, r6
    fe38:	440b      	add	r3, r1
    fe3a:	679a      	str	r2, [r3, #120]	; 0x78
    fe3c:	f385 8811 	msr	BASEPRI, r5
    fe40:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    fe44:	6843      	ldr	r3, [r0, #4]
    fe46:	440b      	add	r3, r1
    fe48:	685b      	ldr	r3, [r3, #4]
    fe4a:	4798      	blx	r3
	return 0;
    fe4c:	2000      	movs	r0, #0
    fe4e:	e7f0      	b.n	fe32 <stop+0x34>

0000fe50 <api_stop>:
	return stop(dev, subsys, CTX_API);
    fe50:	2280      	movs	r2, #128	; 0x80
    fe52:	f7ff bfd4 	b.w	fdfe <stop>

0000fe56 <async_start>:
{
    fe56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe58:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    fe5a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    fe5c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    fe5e:	f04f 0520 	mov.w	r5, #32
    fe62:	f3ef 8611 	mrs	r6, BASEPRI
    fe66:	f385 8812 	msr	BASEPRI_MAX, r5
    fe6a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    fe6e:	250c      	movs	r5, #12
    fe70:	4369      	muls	r1, r5
    fe72:	440c      	add	r4, r1
    fe74:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    fe76:	f005 0c07 	and.w	ip, r5, #7
    fe7a:	f1bc 0f01 	cmp.w	ip, #1
    fe7e:	d10b      	bne.n	fe98 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    fe80:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
    fe82:	f386 8811 	msr	BASEPRI, r6
    fe86:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    fe8a:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    fe8e:	6843      	ldr	r3, [r0, #4]
    fe90:	585b      	ldr	r3, [r3, r1]
    fe92:	4798      	blx	r3
	return 0;
    fe94:	2000      	movs	r0, #0
}
    fe96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    fe98:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    fe9c:	42af      	cmp	r7, r5
    fe9e:	f386 8811 	msr	BASEPRI, r6
    fea2:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    fea6:	bf0c      	ite	eq
    fea8:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    feac:	f04f 30ff 	movne.w	r0, #4294967295
    feb0:	e7f1      	b.n	fe96 <async_start+0x40>

0000feb2 <api_start>:
{
    feb2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    feb4:	2480      	movs	r4, #128	; 0x80
    feb6:	9400      	str	r4, [sp, #0]
    feb8:	f7ff ffcd 	bl	fe56 <async_start>
}
    febc:	b002      	add	sp, #8
    febe:	bd10      	pop	{r4, pc}

0000fec0 <onoff_started_callback>:
{
    fec0:	b410      	push	{r4}
	notify(mgr, 0);
    fec2:	241c      	movs	r4, #28
	return &data->mgr[type];
    fec4:	6900      	ldr	r0, [r0, #16]
    fec6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    fec8:	fb03 0004 	mla	r0, r3, r4, r0
    fecc:	2100      	movs	r1, #0
}
    fece:	bc10      	pop	{r4}
	notify(mgr, 0);
    fed0:	4710      	bx	r2

0000fed2 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    fed2:	2003      	movs	r0, #3
    fed4:	f7fd bb6a 	b.w	d5ac <nrfx_clock_start>

0000fed8 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    fed8:	2002      	movs	r0, #2
    feda:	f7fd bb67 	b.w	d5ac <nrfx_clock_start>

0000fede <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    fede:	2000      	movs	r0, #0
    fee0:	f7fd bb64 	b.w	d5ac <nrfx_clock_start>

0000fee4 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    fee4:	2003      	movs	r0, #3
    fee6:	f000 b9e6 	b.w	102b6 <nrfx_clock_stop>

0000feea <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    feea:	2002      	movs	r0, #2
    feec:	f000 b9e3 	b.w	102b6 <nrfx_clock_stop>

0000fef0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    fef0:	2000      	movs	r0, #0
    fef2:	f000 b9e0 	b.w	102b6 <nrfx_clock_stop>

0000fef6 <blocking_start_callback>:
{
    fef6:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    fef8:	f7fe bdf6 	b.w	eae8 <z_impl_k_sem_give>

0000fefc <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
    fefc:	4608      	mov	r0, r1
    fefe:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
    ff00:	4611      	mov	r1, r2
    ff02:	f7fd f9fd 	bl	d300 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
    ff06:	2800      	cmp	r0, #0
	}

	return 0;
}
    ff08:	bf18      	it	ne
    ff0a:	f06f 0004 	mvnne.w	r0, #4
    ff0e:	bd08      	pop	{r3, pc}

0000ff10 <entropy_psa_crypto_rng_init>:
{
    ff10:	b508      	push	{r3, lr}
	status = psa_crypto_init();
    ff12:	f000 f9b2 	bl	1027a <psa_crypto_init>
		return -EIO;
    ff16:	2800      	cmp	r0, #0
}
    ff18:	bf18      	it	ne
    ff1a:	f06f 0004 	mvnne.w	r0, #4
    ff1e:	bd08      	pop	{r3, pc}

0000ff20 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
    ff20:	b918      	cbnz	r0, ff2a <qspi_handler+0xa>
    ff22:	f101 0020 	add.w	r0, r1, #32
    ff26:	f7fe bddf 	b.w	eae8 <z_impl_k_sem_give>
}
    ff2a:	4770      	bx	lr

0000ff2c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    ff2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    ff2e:	ab0b      	add	r3, sp, #44	; 0x2c
    ff30:	9305      	str	r3, [sp, #20]
    ff32:	9303      	str	r3, [sp, #12]
    ff34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ff36:	9302      	str	r3, [sp, #8]
    ff38:	2300      	movs	r3, #0
    ff3a:	4618      	mov	r0, r3
    ff3c:	e9cd 3300 	strd	r3, r3, [sp]
    ff40:	f7fa f9a0 	bl	a284 <z_impl_z_log_msg_runtime_vcreate>
}
    ff44:	b007      	add	sp, #28
    ff46:	f85d fb04 	ldr.w	pc, [sp], #4

0000ff4a <qspi_trans_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
    ff4a:	f04f 32ff 	mov.w	r2, #4294967295
    ff4e:	f04f 33ff 	mov.w	r3, #4294967295
    ff52:	f7fe bde9 	b.w	eb28 <z_impl_k_sem_take>

0000ff56 <qspi_nor_write_protection_set>:
{
    ff56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
    ff58:	2200      	movs	r2, #0
    ff5a:	4291      	cmp	r1, r2
    ff5c:	bf0c      	ite	eq
    ff5e:	2306      	moveq	r3, #6
    ff60:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
    ff62:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
    ff64:	e9cd 2201 	strd	r2, r2, [sp, #4]
    ff68:	9203      	str	r2, [sp, #12]
    ff6a:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
    ff6e:	f7fb fdaf 	bl	bad0 <qspi_send_cmd>
		ret = -EIO;
    ff72:	2800      	cmp	r0, #0
}
    ff74:	bf18      	it	ne
    ff76:	f06f 0004 	mvnne.w	r0, #4
    ff7a:	b005      	add	sp, #20
    ff7c:	f85d fb04 	ldr.w	pc, [sp], #4

0000ff80 <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
    ff80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
    ff82:	23ff      	movs	r3, #255	; 0xff
    ff84:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
    ff88:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
    ff8c:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
    ff8e:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
    ff90:	2301      	movs	r3, #1
    ff92:	e9cd 3202 	strd	r3, r2, [sp, #8]
    ff96:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
    ff98:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
    ff9a:	f88d 300c 	strb.w	r3, [sp, #12]
    ff9e:	ab01      	add	r3, sp, #4
    ffa0:	9204      	str	r2, [sp, #16]
    ffa2:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
    ffa4:	f7fb fd94 	bl	bad0 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
    ffa8:	2800      	cmp	r0, #0
    ffaa:	bfa8      	it	ge
    ffac:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
    ffb0:	b007      	add	sp, #28
    ffb2:	f85d fb04 	ldr.w	pc, [sp], #4

0000ffb6 <is_regular_addr_valid>:
{
    ffb6:	b538      	push	{r3, r4, r5, lr}
    ffb8:	4605      	mov	r5, r0
    ffba:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    ffbc:	f000 f9d5 	bl	1036a <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    ffc0:	2d00      	cmp	r5, #0
    ffc2:	db07      	blt.n	ffd4 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    ffc4:	42a8      	cmp	r0, r5
    ffc6:	d905      	bls.n	ffd4 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    ffc8:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    ffca:	4284      	cmp	r4, r0
    ffcc:	bf8c      	ite	hi
    ffce:	2000      	movhi	r0, #0
    ffd0:	2001      	movls	r0, #1
}
    ffd2:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    ffd4:	2000      	movs	r0, #0
    ffd6:	e7fc      	b.n	ffd2 <is_regular_addr_valid+0x1c>

0000ffd8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    ffd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    ffda:	ab0b      	add	r3, sp, #44	; 0x2c
    ffdc:	9305      	str	r3, [sp, #20]
    ffde:	9303      	str	r3, [sp, #12]
    ffe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ffe2:	2201      	movs	r2, #1
    ffe4:	9302      	str	r3, [sp, #8]
    ffe6:	2300      	movs	r3, #0
    ffe8:	4618      	mov	r0, r3
    ffea:	e9cd 3300 	strd	r3, r3, [sp]
    ffee:	f7fa f949 	bl	a284 <z_impl_z_log_msg_runtime_vcreate>
}
    fff2:	b007      	add	sp, #28
    fff4:	f85d fb04 	ldr.w	pc, [sp], #4

0000fff8 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    fff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fffa:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    fffc:	2300      	movs	r3, #0
{
    fffe:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
   10000:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   10002:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   10004:	60a3      	str	r3, [r4, #8]
{
   10006:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
   10008:	6913      	ldr	r3, [r2, #16]
   1000a:	4669      	mov	r1, sp
   1000c:	aa01      	add	r2, sp, #4
   1000e:	4798      	blx	r3

	while (layout_size--) {
   10010:	9b01      	ldr	r3, [sp, #4]
   10012:	1e5a      	subs	r2, r3, #1
   10014:	9201      	str	r2, [sp, #4]
   10016:	b91b      	cbnz	r3, 10020 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   10018:	f06f 0015 	mvn.w	r0, #21
}
   1001c:	b003      	add	sp, #12
   1001e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   10020:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   10022:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   10024:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   10026:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   10028:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   1002a:	b985      	cbnz	r5, 1004e <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   1002c:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   1002e:	f8d0 c000 	ldr.w	ip, [r0]
   10032:	4563      	cmp	r3, ip
   10034:	bf28      	it	cs
   10036:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
   10038:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
   1003c:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   1003e:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   10040:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   10042:	6802      	ldr	r2, [r0, #0]
   10044:	429a      	cmp	r2, r3
   10046:	d806      	bhi.n	10056 <flash_get_page_info+0x5e>
		layout++;
   10048:	3008      	adds	r0, #8
   1004a:	9000      	str	r0, [sp, #0]
   1004c:	e7e0      	b.n	10010 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   1004e:	1a6b      	subs	r3, r5, r1
   10050:	fbb3 f3f7 	udiv	r3, r3, r7
   10054:	e7eb      	b.n	1002e <flash_get_page_info+0x36>
			return 0;
   10056:	2000      	movs	r0, #0
   10058:	e7e0      	b.n	1001c <flash_get_page_info+0x24>

0001005a <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   1005a:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   1005c:	2200      	movs	r2, #0
   1005e:	f7ff bfcb 	b.w	fff8 <flash_get_page_info>

00010062 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10062:	6843      	ldr	r3, [r0, #4]
}
   10064:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10066:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   10068:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1006a:	600b      	str	r3, [r1, #0]
}
   1006c:	4770      	bx	lr

0001006e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1006e:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   10070:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10074:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   10076:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   1007a:	6098      	str	r0, [r3, #8]
}
   1007c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1007e:	60d9      	str	r1, [r3, #12]
   10080:	4770      	bx	lr

00010082 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10082:	6843      	ldr	r3, [r0, #4]
}
   10084:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10086:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   10088:	6099      	str	r1, [r3, #8]
}
   1008a:	4770      	bx	lr

0001008c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1008c:	6843      	ldr	r3, [r0, #4]
}
   1008e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10090:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   10092:	60d9      	str	r1, [r3, #12]
}
   10094:	4770      	bx	lr

00010096 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10096:	6843      	ldr	r3, [r0, #4]
   10098:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1009a:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   1009c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   100a0:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   100a2:	6090      	str	r0, [r2, #8]
}
   100a4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   100a6:	60d3      	str	r3, [r2, #12]
   100a8:	4770      	bx	lr

000100aa <gpio_nrfx_manage_callback>:
{
   100aa:	b510      	push	{r4, lr}
	return port->data;
   100ac:	6903      	ldr	r3, [r0, #16]
	return list->head;
   100ae:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   100b0:	b1f8      	cbz	r0, 100f2 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   100b2:	4288      	cmp	r0, r1
   100b4:	d119      	bne.n	100ea <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   100b6:	689c      	ldr	r4, [r3, #8]
	return node->next;
   100b8:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   100ba:	42a1      	cmp	r1, r4
	list->head = node;
   100bc:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   100be:	d100      	bne.n	100c2 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   100c0:	6098      	str	r0, [r3, #8]
	parent->next = child;
   100c2:	2000      	movs	r0, #0
   100c4:	6008      	str	r0, [r1, #0]
	if (set) {
   100c6:	b12a      	cbz	r2, 100d4 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   100c8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   100ca:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   100cc:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   100ce:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   100d0:	b902      	cbnz	r2, 100d4 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   100d2:	6099      	str	r1, [r3, #8]
	return 0;
   100d4:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   100d6:	e010      	b.n	100fa <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   100d8:	4281      	cmp	r1, r0
   100da:	d106      	bne.n	100ea <gpio_nrfx_manage_callback+0x40>
	return node->next;
   100dc:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   100de:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   100e0:	6898      	ldr	r0, [r3, #8]
   100e2:	4281      	cmp	r1, r0
   100e4:	d1ed      	bne.n	100c2 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   100e6:	609c      	str	r4, [r3, #8]
}
   100e8:	e7eb      	b.n	100c2 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   100ea:	4604      	mov	r4, r0
   100ec:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   100ee:	2800      	cmp	r0, #0
   100f0:	d1f2      	bne.n	100d8 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   100f2:	2a00      	cmp	r2, #0
   100f4:	d1e8      	bne.n	100c8 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   100f6:	f06f 0015 	mvn.w	r0, #21
}
   100fa:	bd10      	pop	{r4, pc}

000100fc <mbox_nrf_register_callback>:
{
   100fc:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   100fe:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   10100:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   10102:	bf9f      	itttt	ls
   10104:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   10108:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   1010c:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   1010e:	2000      	movls	r0, #0
		return -EINVAL;
   10110:	bf88      	it	hi
   10112:	f06f 0015 	mvnhi.w	r0, #21
}
   10116:	bd10      	pop	{r4, pc}

00010118 <mbox_nrf_mtu_get>:
}
   10118:	2000      	movs	r0, #0
   1011a:	4770      	bx	lr

0001011c <mbox_nrf_max_channels_get>:
}
   1011c:	2010      	movs	r0, #16
   1011e:	4770      	bx	lr

00010120 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   10120:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   10122:	ab0b      	add	r3, sp, #44	; 0x2c
   10124:	9305      	str	r3, [sp, #20]
   10126:	9303      	str	r3, [sp, #12]
   10128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1012a:	2202      	movs	r2, #2
   1012c:	9302      	str	r3, [sp, #8]
   1012e:	2300      	movs	r3, #0
   10130:	4618      	mov	r0, r3
   10132:	e9cd 3300 	strd	r3, r3, [sp]
   10136:	f7fa f8a5 	bl	a284 <z_impl_z_log_msg_runtime_vcreate>
}
   1013a:	b007      	add	sp, #28
   1013c:	f85d fb04 	ldr.w	pc, [sp], #4

00010140 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   10140:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   10142:	6843      	ldr	r3, [r0, #4]
   10144:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   10146:	7a05      	ldrb	r5, [r0, #8]
   10148:	6844      	ldr	r4, [r0, #4]
   1014a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1014e:	42a3      	cmp	r3, r4
   10150:	d302      	bcc.n	10158 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   10152:	f06f 0001 	mvn.w	r0, #1
}
   10156:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   10158:	795c      	ldrb	r4, [r3, #5]
   1015a:	428c      	cmp	r4, r1
   1015c:	d001      	beq.n	10162 <pinctrl_lookup_state+0x22>
		(*state)++;
   1015e:	3308      	adds	r3, #8
   10160:	e7f0      	b.n	10144 <pinctrl_lookup_state+0x4>
			return 0;
   10162:	2000      	movs	r0, #0
   10164:	e7f7      	b.n	10156 <pinctrl_lookup_state+0x16>

00010166 <uarte_nrfx_config_get>:
{
   10166:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   10168:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   1016a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1016e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   10172:	2000      	movs	r0, #0
   10174:	4770      	bx	lr

00010176 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   10176:	6843      	ldr	r3, [r0, #4]
   10178:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1017a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1017e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   10182:	4770      	bx	lr

00010184 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   10184:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   10186:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   10188:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1018a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1018e:	b150      	cbz	r0, 101a6 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10190:	2000      	movs	r0, #0
	*c = *data->rx_data;
   10192:	6952      	ldr	r2, [r2, #20]
   10194:	7812      	ldrb	r2, [r2, #0]
   10196:	700a      	strb	r2, [r1, #0]
   10198:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1019c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   101a0:	2201      	movs	r2, #1
   101a2:	601a      	str	r2, [r3, #0]
	return 0;
   101a4:	4770      	bx	lr
		return -1;
   101a6:	f04f 30ff 	mov.w	r0, #4294967295
}
   101aa:	4770      	bx	lr

000101ac <is_tx_ready.isra.0>:
	return config->uarte_regs;
   101ac:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   101ae:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   101b0:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   101b4:	b940      	cbnz	r0, 101c8 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   101b6:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   101b8:	079b      	lsls	r3, r3, #30
   101ba:	d406      	bmi.n	101ca <is_tx_ready.isra.0+0x1e>
   101bc:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   101c0:	3800      	subs	r0, #0
   101c2:	bf18      	it	ne
   101c4:	2001      	movne	r0, #1
   101c6:	4770      	bx	lr
   101c8:	2001      	movs	r0, #1
}
   101ca:	4770      	bx	lr

000101cc <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   101cc:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   101ce:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   101d0:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   101d4:	05c9      	lsls	r1, r1, #23
   101d6:	d518      	bpl.n	1020a <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   101d8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   101dc:	b1a9      	cbz	r1, 1020a <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   101de:	f04f 0020 	mov.w	r0, #32
   101e2:	f3ef 8111 	mrs	r1, BASEPRI
   101e6:	f380 8812 	msr	BASEPRI_MAX, r0
   101ea:	f3bf 8f6f 	isb	sy
   101ee:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   101f2:	b130      	cbz	r0, 10202 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   101f4:	2000      	movs	r0, #0
   101f6:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   101fa:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   101fe:	2001      	movs	r0, #1
   10200:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   10202:	f381 8811 	msr	BASEPRI, r1
   10206:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1020a:	6852      	ldr	r2, [r2, #4]
   1020c:	06d2      	lsls	r2, r2, #27
   1020e:	d515      	bpl.n	1023c <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   10210:	f04f 0120 	mov.w	r1, #32
   10214:	f3ef 8211 	mrs	r2, BASEPRI
   10218:	f381 8812 	msr	BASEPRI_MAX, r1
   1021c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10220:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   10224:	b111      	cbz	r1, 1022c <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   10226:	2100      	movs	r1, #0
   10228:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1022c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   10230:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   10234:	f382 8811 	msr	BASEPRI, r2
   10238:	f3bf 8f6f 	isb	sy
}
   1023c:	4770      	bx	lr

0001023e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1023e:	4770      	bx	lr

00010240 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10240:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   10242:	f100 0350 	add.w	r3, r0, #80	; 0x50
   10246:	009b      	lsls	r3, r3, #2
   10248:	b29b      	uxth	r3, r3
   1024a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1024e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   10252:	601a      	str	r2, [r3, #0]
   10254:	681b      	ldr	r3, [r3, #0]
}
   10256:	4770      	bx	lr

00010258 <z_nrf_rtc_timer_capture_task_address_get>:
	if (chan == 0) {
   10258:	b130      	cbz	r0, 10268 <z_nrf_rtc_timer_capture_task_address_get+0x10>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
   1025a:	3010      	adds	r0, #16
   1025c:	0080      	lsls	r0, r0, #2
    return (uint32_t)p_reg + task;
   1025e:	b2c0      	uxtb	r0, r0
   10260:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   10264:	f500 30a8 	add.w	r0, r0, #86016	; 0x15000
}
   10268:	4770      	bx	lr

0001026a <z_nrf_rtc_timer_set>:
	return compare_set(chan, target_time, handler, user_data);
   1026a:	f7fc be05 	b.w	ce78 <compare_set>

0001026e <sys_clock_cycle_get_32>:
{
   1026e:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   10270:	f7fc fde0 	bl	ce34 <z_nrf_rtc_timer_read>
}
   10274:	bd08      	pop	{r3, pc}

00010276 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   10276:	2000      	movs	r0, #0
   10278:	4770      	bx	lr

0001027a <psa_crypto_init>:
}
   1027a:	2000      	movs	r0, #0
   1027c:	4770      	bx	lr

0001027e <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   1027e:	b510      	push	{r4, lr}
   10280:	b088      	sub	sp, #32
   10282:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   10284:	ab05      	add	r3, sp, #20
   10286:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   10288:	230c      	movs	r3, #12
   1028a:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   1028c:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   1028e:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   10292:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   10296:	eb0d 0103 	add.w	r1, sp, r3
   1029a:	aa03      	add	r2, sp, #12
   1029c:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   1029e:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   102a2:	f7fd f807 	bl	d2b4 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   102a6:	9b00      	ldr	r3, [sp, #0]
   102a8:	6023      	str	r3, [r4, #0]

	return ret;
}
   102aa:	b008      	add	sp, #32
   102ac:	bd10      	pop	{r4, pc}

000102ae <SystemInit>:
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
   102ae:	4770      	bx	lr

000102b0 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   102b0:	4700      	bx	r0

000102b2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   102b2:	f000 b986 	b.w	105c2 <z_impl_k_busy_wait>

000102b6 <nrfx_clock_stop>:
    clock_stop(domain);
   102b6:	f7fd b897 	b.w	d3e8 <clock_stop>

000102ba <nrf_gpio_reconfigure>:
{
   102ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   102bc:	4616      	mov	r6, r2
   102be:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   102c2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   102c4:	a801      	add	r0, sp, #4
{
   102c6:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   102c8:	f7fd fa36 	bl	d738 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   102cc:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   102ce:	f1b6 0c00 	subs.w	ip, r6, #0
   102d2:	bf18      	it	ne
   102d4:	f04f 0c01 	movne.w	ip, #1
   102d8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   102dc:	1e0b      	subs	r3, r1, #0
   102de:	bf18      	it	ne
   102e0:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   102e2:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   102e4:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   102e8:	bf14      	ite	ne
   102ea:	f04f 0c0c 	movne.w	ip, #12
   102ee:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   102f2:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   102f4:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   102f8:	bf14      	ite	ne
   102fa:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
   102fe:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   10302:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   10304:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   10308:	bf14      	ite	ne
   1030a:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   1030e:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   10312:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   10316:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   1031a:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1031e:	b101      	cbz	r1, 10322 <nrf_gpio_reconfigure+0x68>
   10320:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   10322:	b10e      	cbz	r6, 10328 <nrf_gpio_reconfigure+0x6e>
   10324:	7836      	ldrb	r6, [r6, #0]
   10326:	0076      	lsls	r6, r6, #1
   10328:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1032a:	b10d      	cbz	r5, 10330 <nrf_gpio_reconfigure+0x76>
   1032c:	782d      	ldrb	r5, [r5, #0]
   1032e:	00ad      	lsls	r5, r5, #2
   10330:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   10332:	b10c      	cbz	r4, 10338 <nrf_gpio_reconfigure+0x7e>
   10334:	7824      	ldrb	r4, [r4, #0]
   10336:	0224      	lsls	r4, r4, #8
   10338:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1033a:	b10f      	cbz	r7, 10340 <nrf_gpio_reconfigure+0x86>
   1033c:	783f      	ldrb	r7, [r7, #0]
   1033e:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   10340:	430c      	orrs	r4, r1
   10342:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   10344:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   10348:	b003      	add	sp, #12
   1034a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001034c <nrf_gpio_cfg_sense_set>:
{
   1034c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1034e:	f10d 030f 	add.w	r3, sp, #15
   10352:	9301      	str	r3, [sp, #4]
   10354:	2300      	movs	r3, #0
{
   10356:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1035a:	461a      	mov	r2, r3
   1035c:	4619      	mov	r1, r3
   1035e:	9300      	str	r3, [sp, #0]
   10360:	f7ff ffab 	bl	102ba <nrf_gpio_reconfigure>
}
   10364:	b005      	add	sp, #20
   10366:	f85d fb04 	ldr.w	pc, [sp], #4

0001036a <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   1036a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1036e:	4770      	bx	lr

00010370 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   10370:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   10374:	4770      	bx	lr

00010376 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   10376:	f44f 7080 	mov.w	r0, #256	; 0x100
   1037a:	4770      	bx	lr

0001037c <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
   1037c:	2100      	movs	r1, #0
   1037e:	f7fd be8b 	b.w	e098 <nrf_gpio_cfg.constprop.0>

00010382 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   10382:	2302      	movs	r3, #2
   10384:	f7fd bde0 	b.w	df48 <qspi_xfer>

00010388 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   10388:	2303      	movs	r3, #3
   1038a:	f7fd bddd 	b.w	df48 <qspi_xfer>

0001038e <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   1038e:	2100      	movs	r1, #0
   10390:	2002      	movs	r0, #2
   10392:	f7fe b893 	b.w	e4bc <nrfx_qspi_erase>

00010396 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   10396:	4770      	bx	lr

00010398 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   10398:	b140      	cbz	r0, 103ac <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1039a:	68c3      	ldr	r3, [r0, #12]
   1039c:	7858      	ldrb	r0, [r3, #1]
   1039e:	f010 0001 	ands.w	r0, r0, #1
   103a2:	bf1e      	ittt	ne
   103a4:	7818      	ldrbne	r0, [r3, #0]
   103a6:	fab0 f080 	clzne	r0, r0
   103aa:	0940      	lsrne	r0, r0, #5
}
   103ac:	4770      	bx	lr

000103ae <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   103ae:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   103b0:	ab0b      	add	r3, sp, #44	; 0x2c
   103b2:	9305      	str	r3, [sp, #20]
   103b4:	9303      	str	r3, [sp, #12]
   103b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   103b8:	2201      	movs	r2, #1
   103ba:	9302      	str	r3, [sp, #8]
   103bc:	2300      	movs	r3, #0
   103be:	4618      	mov	r0, r3
   103c0:	e9cd 3300 	strd	r3, r3, [sp]
   103c4:	f7f9 ff5e 	bl	a284 <z_impl_z_log_msg_runtime_vcreate>
}
   103c8:	b007      	add	sp, #28
   103ca:	f85d fb04 	ldr.w	pc, [sp], #4

000103ce <z_early_memset>:
	(void) memset(dst, c, n);
   103ce:	f7ff bcee 	b.w	fdae <memset>

000103d2 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   103d2:	f7ff bce1 	b.w	fd98 <memcpy>

000103d6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   103d6:	f3ef 8005 	mrs	r0, IPSR
}
   103da:	3800      	subs	r0, #0
   103dc:	bf18      	it	ne
   103de:	2001      	movne	r0, #1
   103e0:	4770      	bx	lr

000103e2 <k_thread_name_get>:
}
   103e2:	2000      	movs	r0, #0
   103e4:	4770      	bx	lr

000103e6 <z_pm_save_idle_exit>:
{
   103e6:	b508      	push	{r3, lr}
	pm_system_resume();
   103e8:	f7fa f9b2 	bl	a750 <pm_system_resume>
}
   103ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   103f0:	f7ff bf25 	b.w	1023e <sys_clock_idle_exit>

000103f4 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   103f4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   103f8:	428b      	cmp	r3, r1
   103fa:	d001      	beq.n	10400 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   103fc:	f7fe bd1c 	b.w	ee38 <z_set_prio>
}
   10400:	2000      	movs	r0, #0
   10402:	4770      	bx	lr

00010404 <z_impl_k_mutex_init>:
{
   10404:	4603      	mov	r3, r0
	mutex->owner = NULL;
   10406:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   10408:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1040c:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   10410:	4770      	bx	lr

00010412 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   10412:	b13a      	cbz	r2, 10424 <z_impl_k_sem_init+0x12>
   10414:	428a      	cmp	r2, r1
   10416:	d305      	bcc.n	10424 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
   10418:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1041c:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
   10420:	2000      	movs	r0, #0
   10422:	4770      	bx	lr
		return -EINVAL;
   10424:	f06f 0015 	mvn.w	r0, #21
}
   10428:	4770      	bx	lr

0001042a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1042a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1042e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   10430:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10432:	2300      	movs	r3, #0
	node->prev = NULL;
   10434:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
   10438:	4770      	bx	lr

0001043a <unpend_thread_no_timeout>:
{
   1043a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1043c:	f7ff fff5 	bl	1042a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   10440:	7b43      	ldrb	r3, [r0, #13]
   10442:	f023 0302 	bic.w	r3, r3, #2
   10446:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   10448:	2300      	movs	r3, #0
   1044a:	6083      	str	r3, [r0, #8]
}
   1044c:	bd08      	pop	{r3, pc}

0001044e <add_to_waitq_locked>:
{
   1044e:	b538      	push	{r3, r4, r5, lr}
   10450:	4604      	mov	r4, r0
   10452:	460d      	mov	r5, r1
	unready_thread(thread);
   10454:	f7fe fc72 	bl	ed3c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   10458:	7b63      	ldrb	r3, [r4, #13]
   1045a:	f043 0302 	orr.w	r3, r3, #2
   1045e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   10460:	b1e5      	cbz	r5, 1049c <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   10462:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   10464:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10466:	429d      	cmp	r5, r3
   10468:	d109      	bne.n	1047e <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   1046a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1046c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   10470:	601c      	str	r4, [r3, #0]
	list->tail = node;
   10472:	606c      	str	r4, [r5, #4]
}
   10474:	e012      	b.n	1049c <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   10476:	686a      	ldr	r2, [r5, #4]
   10478:	4293      	cmp	r3, r2
   1047a:	d0f6      	beq.n	1046a <add_to_waitq_locked+0x1c>
   1047c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1047e:	2b00      	cmp	r3, #0
   10480:	d0f3      	beq.n	1046a <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   10482:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   10486:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1048a:	428a      	cmp	r2, r1
   1048c:	d0f3      	beq.n	10476 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1048e:	4291      	cmp	r1, r2
   10490:	ddf1      	ble.n	10476 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   10492:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   10494:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   10498:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1049a:	605c      	str	r4, [r3, #4]
}
   1049c:	bd38      	pop	{r3, r4, r5, pc}

0001049e <z_ready_thread>:
{
   1049e:	b510      	push	{r4, lr}
	__asm__ volatile(
   104a0:	f04f 0320 	mov.w	r3, #32
   104a4:	f3ef 8411 	mrs	r4, BASEPRI
   104a8:	f383 8812 	msr	BASEPRI_MAX, r3
   104ac:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   104b0:	f7fe fc10 	bl	ecd4 <ready_thread>
	__asm__ volatile(
   104b4:	f384 8811 	msr	BASEPRI, r4
   104b8:	f3bf 8f6f 	isb	sy
}
   104bc:	bd10      	pop	{r4, pc}

000104be <z_sched_wake_thread>:
{
   104be:	b538      	push	{r3, r4, r5, lr}
   104c0:	4604      	mov	r4, r0
	__asm__ volatile(
   104c2:	f04f 0320 	mov.w	r3, #32
   104c6:	f3ef 8511 	mrs	r5, BASEPRI
   104ca:	f383 8812 	msr	BASEPRI_MAX, r3
   104ce:	f3bf 8f6f 	isb	sy
		if (!killed) {
   104d2:	7b43      	ldrb	r3, [r0, #13]
   104d4:	f013 0f28 	tst.w	r3, #40	; 0x28
   104d8:	d10b      	bne.n	104f2 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   104da:	6883      	ldr	r3, [r0, #8]
   104dc:	b10b      	cbz	r3, 104e2 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   104de:	f7ff ffac 	bl	1043a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   104e2:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   104e4:	b951      	cbnz	r1, 104fc <z_sched_wake_thread+0x3e>
   104e6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
   104ea:	4620      	mov	r0, r4
   104ec:	7363      	strb	r3, [r4, #13]
   104ee:	f7fe fbf1 	bl	ecd4 <ready_thread>
	__asm__ volatile(
   104f2:	f385 8811 	msr	BASEPRI, r5
   104f6:	f3bf 8f6f 	isb	sy
}
   104fa:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   104fc:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   10500:	e7f3      	b.n	104ea <z_sched_wake_thread+0x2c>

00010502 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   10502:	2101      	movs	r1, #1
   10504:	3818      	subs	r0, #24
   10506:	f7ff bfda 	b.w	104be <z_sched_wake_thread>

0001050a <z_unpend_first_thread>:
{
   1050a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1050c:	f04f 0320 	mov.w	r3, #32
   10510:	f3ef 8511 	mrs	r5, BASEPRI
   10514:	f383 8812 	msr	BASEPRI_MAX, r3
   10518:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1051c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1051e:	42a0      	cmp	r0, r4
   10520:	d00d      	beq.n	1053e <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   10522:	b134      	cbz	r4, 10532 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   10524:	4620      	mov	r0, r4
   10526:	f7ff ff88 	bl	1043a <unpend_thread_no_timeout>
   1052a:	f104 0018 	add.w	r0, r4, #24
   1052e:	f000 f81e 	bl	1056e <z_abort_timeout>
	__asm__ volatile(
   10532:	f385 8811 	msr	BASEPRI, r5
   10536:	f3bf 8f6f 	isb	sy
}
   1053a:	4620      	mov	r0, r4
   1053c:	bd38      	pop	{r3, r4, r5, pc}
   1053e:	2400      	movs	r4, #0
   10540:	e7f7      	b.n	10532 <z_unpend_first_thread+0x28>

00010542 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   10542:	4603      	mov	r3, r0
   10544:	b920      	cbnz	r0, 10550 <z_reschedule_irqlock+0xe>
   10546:	f3ef 8205 	mrs	r2, IPSR
   1054a:	b90a      	cbnz	r2, 10550 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1054c:	f7fa bae2 	b.w	ab14 <arch_swap>
   10550:	f383 8811 	msr	BASEPRI, r3
   10554:	f3bf 8f6f 	isb	sy
}
   10558:	4770      	bx	lr

0001055a <z_reschedule_unlocked>:
	__asm__ volatile(
   1055a:	f04f 0320 	mov.w	r3, #32
   1055e:	f3ef 8011 	mrs	r0, BASEPRI
   10562:	f383 8812 	msr	BASEPRI_MAX, r3
   10566:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1056a:	f7ff bfea 	b.w	10542 <z_reschedule_irqlock>

0001056e <z_abort_timeout>:
{
   1056e:	b510      	push	{r4, lr}
   10570:	f04f 0220 	mov.w	r2, #32
   10574:	f3ef 8411 	mrs	r4, BASEPRI
   10578:	f382 8812 	msr	BASEPRI_MAX, r2
   1057c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   10580:	6803      	ldr	r3, [r0, #0]
   10582:	b13b      	cbz	r3, 10594 <z_abort_timeout+0x26>
			remove_timeout(to);
   10584:	f7fe fe7e 	bl	f284 <remove_timeout>
			ret = 0;
   10588:	2000      	movs	r0, #0
	__asm__ volatile(
   1058a:	f384 8811 	msr	BASEPRI, r4
   1058e:	f3bf 8f6f 	isb	sy
}
   10592:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   10594:	f06f 0015 	mvn.w	r0, #21
   10598:	e7f7      	b.n	1058a <z_abort_timeout+0x1c>

0001059a <z_get_next_timeout_expiry>:
{
   1059a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1059c:	f04f 0320 	mov.w	r3, #32
   105a0:	f3ef 8411 	mrs	r4, BASEPRI
   105a4:	f383 8812 	msr	BASEPRI_MAX, r3
   105a8:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   105ac:	f7fe fe4a 	bl	f244 <next_timeout>
	__asm__ volatile(
   105b0:	f384 8811 	msr	BASEPRI, r4
   105b4:	f3bf 8f6f 	isb	sy
}
   105b8:	bd10      	pop	{r4, pc}

000105ba <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   105ba:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   105bc:	f7fe ff5e 	bl	f47c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   105c0:	bd08      	pop	{r3, pc}

000105c2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   105c2:	b108      	cbz	r0, 105c8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   105c4:	f7f8 bfce 	b.w	9564 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   105c8:	4770      	bx	lr

000105ca <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   105ca:	4770      	bx	lr
